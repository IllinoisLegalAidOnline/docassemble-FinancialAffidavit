metadata:
  title: Financial affidavit
  short title: Financial affidavit
  comment: This program helps you make forms that provide financial information and documents to the other party in family law cases.
  authors:
    - Jim Graszer
    - Matt Newsted
---
include:
  - docassemble.AssemblyLine:assembly_line.yml
  - docassemble.ILAO:ilao-interview-framework.yml
  - docassemble.ILAO:shared-basic-questions.yml
  - section_reviews.yml
---
objects:
  - users: ALPeopleList.using(there_are_any=True)
  - other_parties: ALPeopleList.using(there_are_any=True)
  - employment: DAList.using(object_type=Thing, complete_attribute='complete')
  - employment[i].address: ALAddress
  - court_list: ALCourtLoader.using(file_name='docassemble.ILAO:data/sources/il_courts.xlsx')
---
code: |
  al_form_type = 'existing_case'
  ilao_easy_form_title = "Financial affidavit"
  ilao_easy_form_url = "https://www.illinoislegalaid.org/legal-information/financial-affidavit"
  form_name = "Financial affidavit"
  github_user = 'IllinoisLegalAidOnline'
  github_repo_name = 'docassemble-FinancialAffidavit'
  allowed_courts = ['Circuit']
---
sections:
  - section_intro: Start
  - section_case: Case information
  - section_user: About you
  - section_income: Income
  - section_expenses: Expenses
  - section_debts: Debts
  - section_assets: Assets
  - section_final: Final steps
  - section_download: Download
---
#################### Interview order #####################
mandatory: True
code: |
  nav.set_section('section_intro')
  sees_nav_bar
  set_progress(5)
  how_to_use
  accept_terms
  if family_case == False:
    family_kickout
  set_progress(10)
  nav.set_section('section_case')
  users[0].name.first
  party_label
  other_parties[0].name.first
  case_county
  case_number
  filing_status
  set_progress(20)
  nav.set_section('section_user')
  if hide_contact == False:
    users[0].address.address
    users[0].phone_number
  users[0].birthdate
  household_expenses
  users_acknowledge
  set_progress(30)
  nav.set_section('section_income')
  if employment.there_are_any == True:
    employment.gather()

  if taxes_filed == True:
    taxes_filed_status

  monthly_income_intro
  users[0].regular_pay
  users[0].pension
  users[0].social_retirement
  users[0].rental_income
  users[0].maintenance_current
  users[0].gifts_money
  if users[0].other_source == False:
    users[0].other_income = 0
  income_summary

  set_progress(40)
  nav.set_section('section_expenses') 
  expenses_intro
  users[0].deductions_federal
  users[0].maintenance_paid_court
  users[0].child_support_1
  users[0].living_house_payment
  users[0].transport_payment
  users[0].personal_doctor
  users[0].children_tuition
  expenses_summary



  set_progress(100)
  nav.set_section('section_download')
  forms_assembling
  get_docs_screen
---
id: welcome
question: |
  Financial Affidavit
subquestion: |
  Welcome to Illinois Legal Aid Online's Financial Affidavit program.

  To use this program, you must be asking or being asked to pay child support, 
  children's expenses, college expenses, spousal maintenance (alimony), or 
  attorney's fees.
field: sees_nav_bar
---
id: how to use
continue button field: how_to_use
question: |
  Instructions
subquestion: |
  To complete this program, you will need to know:

  * Your monthly income and expenses
  * Your expenses for children and other dependents, if any
  * Your income tax refunds or amounts owed for the last 2 years (federal and state)
  * Your debts and liabilities
  * Your assets, such as bank accounts, real estate, vehicles, and retirement benefits

  It could take 30 minutes to 60 minutes to finish this program. You can log in and save your work to return to later. 
 
  ${ collapse_template(help_example) }  

  Click on **{green words}** to learn what they mean. Some questions have a question mark in a circle 
  ${ fa_icon("question-circle", color_css="#0dcaf0" ) } that also gives help.
---
template: help_example
subject: |
  **You can expand sections like this to show more information.**
content: |  
  This is an example of help. Click again to hide.
---
id: family case 
question: |
  Do you have a family law case in Illinois?
subquestion: |
  If you have any active case or one where a judgment was already entered (Ex: divorce).
fields:
  - no label: family_case
    datatype: yesnoradio
---
id: family case kickout
event: family_kickout
question: |
  Sorry
subquestion: |
  You can only use this program if you have an active family law case in Illinois.
buttons:
  - Exit: exit
  - Restart: restart
---
############### CASE INFORMATION ###############
id: case county
question: |
  In which county was this case filed?
fields:
  - County: case_county
    code:
      court_list._load_courts()["address_county"].unique()
---
id: case number
question: |
  What is the case number?
subquestion: |
  ${ collapse_template(case_number_help) }
fields:
  - Case number: case_number
    maxlength: 19
---
template: case_number_help
subject: |
  **Learn about case numbers**
content: |  
  The case number should be on your court papers. Look at the Complaint or Petition, or the
  Summons if you received one. It is usually in the top-right part of the first page.
  
  If you started the case, the court clerk should have given you the case number.
---  
id: case filing status
question: |
  Are you filing your Financial Affidavit into a case that has a final 
  judgment or order?
subquestion: |
  For example, a Judgment of Dissolution of Marriage would be a final order in a divorce case.": 
fields:
  - Filing status: filing_status
    datatype: radio
    choices:
      - Pre-Judgment: pre_judgment
      - Post-Judement: post_judgment
---  
id: party label
question: |
  What is your party label in the case?
subquestion: |
  ${ collapse_template(which_party) }  
field: party_label
choices:
  - Petitioner: petitioner
  - Respondent: respondent
---
template: which_party
subject: |
  **Learn more about party labels**
content: |
  If you filed a new case, you are either the Plaintiff or the Petitioner.

  If someone filed the case against you, you are either the Defendant or the Respondent.

  The other court forms in the case should help you figure it out. Look at the top (the caption)
  of the Complaint or Petition. That form should have a label by your name.
---
id: your name
sets:
    - users[0].name.first
    - users[0].name.last
    - users[0].name.middle
    - users[0].name.suffix
question: |
  What is your name?
fields:
  - code: |
      users[0].name_fields()
---
code: |
  if party_label == 'petitioner':
    opposing_label = 'respondent'
  if party_label == 'respondent':
    opposing_label = 'petitioner'
---
id: other party name
sets:
  - other_parties[0].name.first
question: |
  What is the name of the ${ opposing_label }?
fields:
  - code: |
      other_parties[0].name_fields(person_or_business='person')
---
############### ABOUT YOU ###############
id: hide contact 
question: |
  Is your contact information is protected pursuant to court order because of 
  domestic violence or abuse?
fields:
  - no label: hide_contact
    datatype: yesnoradio
---
id: users address
sets:
  - users[0].address.address
  - users[0].address.city
  - users[0].address.state
  - users[0].address.zip
question: |
  What is your address?
fields:
  - Street address: users[0].address.address
    address autocomplete: True
  - Address line 2: users[0].address.unit
    required: False
  - City: users[0].address.city
  - State: users[0].address.state
    code: |
      states_list()
    default: IL      
  - ZIP code: users[0].address.zip
---
id: user phone
question: |
  What is your phone number?
fields:
  - Phone Number: users[0].phone_number
    datatype: al_international_phone
---
id: user birthdate
question: |
  When were you born?
fields:
  - Birth Date: users[i].birthdate
    datatype: BirthDate
    alMax: ${ today().format("yyyy-MM-dd") }
---
id: user expenses
question: |
  Do you currently live with another adult, **not ${other_parties[0].name.full()}**,
  who helps you pay your expenses?
fields:
  - no label: household_expenses
    datatype: yesnoradio
---
id: user acknowledge
continue button field: users_acknowledge
question: |
  Accuracy is important
subquestion: |
  <div class="alert alert-info ilao-info" role="alert">
    <h2 class="h4">Important</h2>
    <p>If you intentionally or recklessly enter inaccurate or misleading information on this form, 
    you may face significant penalties and sanctions, including costs and attorney's fees.</p>
    <p>Do not file this document and the enclosures with the Circuit Clerk unless a local rule or 
    court order requires you to do so.</p>
    <p>Ask the Circuit Clerk where to find these rules.</p>
  </div>
---
########### INCOME ####################
id: income intro 
question: |
  Are you employed or do you have other forms of business income?
subquestion: |
  This includes income:
  
  * From employment by someone else,
  * From self-employment as a sole proprietorship or independent contractor;  - As a member of a partnership,
  * As a member of a limited liability company (LLC) not treated as a corporation,
  * From a closely-held corporation, and
  * From any other flow-through business entities.
fields:
  - no label: employment.there_are_any
    datatype: yesnoradio
---
code: |
  employment[i].type
  employment[i].name.text
  if employment[i].type == "employed":
    employment[i].frequency
  else:
    employment[i].income_last_year
    employment[i].perks
  employment[i].complete = True 
---
id: other employment
question: |
  Do you have any other employers or business to include?
subquestion: |
  So far you have told us about ${comma_and_list(employment.complete_elements())}.
fields:
  - no label: employment.there_is_another
    datatype: yesnoradio
---
id: employment info
question: |
  What is your ${ordinal(i)} source of employment or business income? 
fields:
  - "What type of employment or income is this?": employment[i].type
    datatype: radio
    choices:
			- Employed by someone else: employed
      - Own business as a sole proprietorship: own
      - Independent contractor: contractor
      - Member of a partnership: partnership
      - As a member of a limited liability company (LLC) not treated as a corporation: llc
			- A closely-held corporation: corp
			- Other flow-through business entity: other_entity
---
id: employer or business name 
question: |
  What is the name of this employer or business?
fields: 
  - Employer or business name: employment[i].name.text
  - Street address: employment[i].address.address
    address autocomplete: True
  - Address line 2: employment[i].address.unit
    required: False
  - City: employment[i].address.city
  - State: employment[i].address.state
    code: |
      states_list()
  - ZIP code: employment[i].address.zip
---
id: employer pay 
question: |
  Details about pay from ${ employment[i].name.text }
fields:
  - Pay period: employment[i].frequency
    datatype: radio
    choices:
      - Once a month: 12
      - Twice a month: 24
      - Every two weeks: 26
      - Once a week: 52
  - "Are you paid in cash?": employment[i].cash_payment
    datatype: yesnoradio
  - "Gross income as of January 1, ${ current_datetime().year }:": employment[i].gross_income
    datatype: currency
  - "Gross income as of date (i.e. last pay statement)": employment[i].gross_date
    datatype: date
    max: ${ today().format("MM-dd-yyyy") }
    default: |
      ${ today().format("MM-dd-yyyy") }
---
id: business income 
question: 
  Income and expenses for ${ employment[i].name.text }
subquestion:
  You must attach complete business federal and state business tax returns for the most recent tax year.
fields:
  - Last year (${ current_datetime().year - 1 }): employment[i].income_last_year
    datatype: currency
  - So far this year (${ current_datetime().year }): employment[i].income_current_year
    datatype: currency
  - note: |
      What were your necessary business expenses last year, and so far this year?
  - Last year (${ current_datetime().year - 1 }): employment[i].expenses_last_year
    datatype: currency  
  - So far this year (${ current_datetime().year }): employment[i].expenses_current_year
    datatype: currency
---
id: business perks
question: 
  Do you receive any of these perks from ${ employment[i].name.text }?
fields:
  - Perks (Check all that apply): employment[i].perks
    datatype: checkboxes
    choices: 
      - Reimbursed meals: meals
      - Company car: car
      - Free housing or housing allowance: housing
      - Other: other
    none of the above: False
  - Briefly describe other perk(s): employment[i].other_perks
    js show if: |
      val("employment[i].perks['other']")
---
id: filed taxes
question: |
  Did you file taxes last year?
fields:
  - no label: taxes_filed
    datatype: yesnoradio
---
id: filed taxes detail
question: |
  Income tax details for the previous year (${ current_datetime().year-1 })
fields:
  - What was your tax filing status last year?: taxes_filed_status
    datatype: radio
    choices: 
      - Married (Joint): joint
      - Married (Separate): separate
      - Single: single
      - Head of Household: household
  - How did you claim deductions last year?: deduction_type
    datatype: radio
    choices: 
      - the standardized deduction: yes
      - itemized deductions: no
  - Gross income (before taxes and deductions) last year: gross_income_last_year
    datatype: currency
  - Did you claim any of these? (check any that apply): tax_claimed
    datatype: checkboxes
    choices: 
      - Child tax credit: child_credit
      - Additional child tax credit: additional
      - Credit for other dependents: dependents
      - Earned Income Credit: eic
      - Dependent care credit: care
---
id: monthly income intro
continue button field: monthly_income_intro
question: |
  Do you have any monthly income from any of the following categories?
subquestion: |
  Do you receive monthly income from any of the sources below? 
  For each type of income, enter the gross monthly amount (before taxes 
  and deductions) that you receive. 
  
  All fields are optional and can be left blank if not applicable.
---
id: monthly employment income 
question: |
  Monthly employment income
fields:
  - "Regular employment/self-employment earnings from all jobs (salary, wages, base pay, etc.)": users[0].regular_pay
    datatype: currency
    min: 0
    required: False
  - Overtime: users[0].overtime_pay
    datatype: currency
    min: 0
    required: False
  - Commission: users[0].commission_pay
    datatype: currency
    min: 0
    required: False
  - Tips and gratuities: users[0].tips
    datatype: currency
    min: 0
    required: False
  - Bonus: users[0].bonus
    datatype: currency
    min: 0
    required: False
---
id: monthly investment income 
question: |
  Monthly investment income
fields:
  - Pension: users[0].pension
    datatype: currency
    min: 0
    required: False
  - Annuity: users[0].annuity
    datatype: currency
    min: 0
    required: False
  - Interest income: users[0].interest
    datatype: currency
    min: 0
    required: False
  - Dividend income: users[0].dividend
    datatype: currency
    min: 0
    required: False
  - Trust income: users[0].trust
    datatype: currency
    min: 0
    required: False
  - Investment income: users[0].investment
    datatype: currency
    min: 0
    required: False
---
id: monthly benefits
question: |
  Monthly benefits
fields:
  - Social security retirement: users[0].social_retirement
    datatype: currency
    min: 0
    required: False
  - Social Security Disability: users[0].social_disability
    datatype: currency
    min: 0
    required: False
  - Social security income (SSI - not included as income for child support purposes): users[0].social_income
    datatype: currency
    min: 0
    required: False
  - Unemployment: users[0].unemployment_benefits
    datatype: currency
    min: 0
    required: False
  - Disability payment (not Social Security): users[0].disability_benefits
    datatype: currency
    min: 0
    required: False
  - Workers' compensation: users[0].workers_comp_benefits
    datatype: currency
    min: 0
    required: False
  - TANF and SNAP (not included as income for child support purposes): users[0].child_benefits
    datatype: currency
    min: 0
    required: False
  - Military allowances: users[0].military_allowances
    datatype: currency
    min: 0
    required: False
---
id: other monthly business income
question: |
  Other monthly business income
fields:
  - Rental income: users[0].rental_income
    datatype: currency
    min: 0
    required: False
  - Partnership income: users[0].partnership_income
    datatype: currency
    min: 0
    required: False
  - Distributions and draws: users[0].distributions_draws
    datatype: currency
    min: 0
    required: False
  - Royalty income: users[0].royalty_income
    datatype: currency
    min: 0
    required: False
---
id: monthly maintenance and support 
question: |
  Monthly maintenance and support
fields:
  - "Maintenance received under an order entered in this case or another case that you must report as income on your tax return": users[0].maintenance_current
    datatype: currency
    min: 0
    required: False
  - "Maintenance received under an order entered in this case or another case that you do not have to report as income on your tax return": users[0].maintenance_alternate
    datatype: currency
    min: 0
    required: False
  - "Child support for children of this relationship (if this support is paid by the other parent, it does not affect the support calculation)": users[0].child_support_current
    datatype: currency
    min: 0
    required: False
  - "Social Security payment made to the children of this relationship based on your disability or retirement": users[0].social_security_current
    datatype: currency
    min: 0
    required: False
---
id: monthly gifts other income
question: |
  Monthly gifts and other income
fields:
  - Gifts of money: users[0].gifts_money
    datatype: currency
    min: 0
    required: False
  - Do you receive other types of income?: users[0].other_source
    datatype: yesnoradio
  - Other: users[0].other_income
    datatype: currency
    min: 0
    required: False
    show if: users[0].other_source
  - "What is the source of the other income? (list all sources)": users[0].other_income_description
    required: False
    show if: users[0].other_source
---
########### EXPENSES ###########
id: expenses intro 
continue button field: expenses_intro
question: |
  Evaluate your monthly expenses.
subquestion: |
  Provide optional (you can leave blank) monthly expenses from the following categories:
  
  * Monthly deductions on your payroll,
  * Monthly maintenance and child support,
  * Monthly household living expenses,
  * Monthly transportation expenses, and 
  * Monthly personal household expenses including out of pocket medical and life insurance.
---
id: monthly deduction expenses
question: |
  What monthly deductions from income do you receive?
subquestion: |
  Monthly deductions are payments you must make every month. All fields are optional.
fields:
  - Federal income tax: users[0].deductions_federal
    datatype: currency
    min: 0
    required: False
  - State income tax: users[0].deductions_state
    datatype: currency
    min: 0
    required: False
  - FICA (or Social Security equivalent, such as Self-employment tax): users[0].deductions_FICA
    datatype: currency
    min: 0
    required: False
  - Medicare tax: users[0].deductions_medicare
    datatype: currency
    min: 0
    required: False
  - Mandatory retirement contributions: users[0].deductions_retirement
    datatype: currency
    min: 0
    required: False
under: |
  (by law or condition of employment, but only if no FICA or Social Security equivalent) 
---
id: monthly maintenance expenses
question: |
  What monthly maintenance or child support payments do you make? 
fields:
  - "Maintenance being paid or payable to the other party by you under a court order **in this case**": users[0].maintenance_paid_court
    datatype: currency
    min: 0
    required: False
  - "Maintenance being paid under a court order to a former spouse by you, which is **tax deductible** to you": users[0].maintenance_paid_no_tax
    datatype: currency
    min: 0
    required: False
  - "Maintenance being paid under a court order to a former spouse by you, which is **not tax deductible** to you": users[0].maintenance_paid_taxed
    datatype: currency
    min: 0
    required: False
---
id: monthly child support expenses
question: |
  Do you make any monthly child support payments for any children to any other person?
fields:
  - Court-ordered child support being paid for the children of this relationship: users[0].child_support_1
    label above field: True
    datatype: currency
    min: 0
    required: False
  - Child support being paid under a court order for children not shared with the other party and who are not part of this case: users[0].child_support_2
    label above field: True
    datatype: currency
    min: 0
    required: False
  - note: |
      Child support being paid, but there is no court order, for children not shared with the other party and who are not part of this case and 
      (1) that are presumed to be yours, 
      (2) for whom there is a voluntary acknowledgment of paternity (VAP) signed by you and the other parent, OR 
      (3) for whom there is a court order naming you as a parent, but there is no support order
  - no label: users[0].child_support_3
    datatype: currency
    min: 0
    required: False
---
id: monthly household expenses
question: |
  What monthly household living expenses do you have?
fields:
  - Mortgage or rent: users[0].living_house_payment
    datatype: currency
    min: 0
    required: False 
  - Home equity (HELOC) and second mortgage: users[0].living_heloc
    datatype: currency
    min: 0
    required: False
  - Real estate taxes: users[0].living_property_taxes
    datatype: currency
    min: 0
    required: False
  - Homeowners or condo association dues and assessments: users[0].living_hoa
    datatype: currency
    min: 0
    required: False
  - Homeowners or renters insurance: users[0].living_insurance
    datatype: currency
    min: 0
    required: False
  - Gas: users[0].living_gas
    datatype: currency
    min: 0
    required: False
  - Electric: users[0].living_power
    datatype: currency
    min: 0
    required: False
  - Telephone: users[0].living_phone
    datatype: currency
    min: 0
    required: False
  - Cable or satellite TV: users[0].living_cable
    datatype: currency
    min: 0
    required: False
  - Internet: users[0].living_internet
    datatype: currency
    min: 0
    required: False
  - Water and sewer: users[0].living_water
    datatype: currency
    min: 0
    required: False
  - Garbage removal: users[0].living_trash
    datatype: currency
    min: 0
    required: False
  - Laundry and dry cleaning: users[0].living_laundry
    datatype: currency
    min: 0
    required: False
  - House cleaning service: users[0].living_cleaner
    datatype: currency
    min: 0
    required: False
  - Necessary repairs and maintenance to my property: users[0].living_repairs
    datatype: currency
    min: 0
    required: False
  - Pet care: users[0].living_pets
    datatype: currency
    min: 0
    required: False
  - Groceries, household supplies, and toiletries: users[0].living_groceries
    datatype: currency
    min: 0
    required: False
  - Do you have other monthly household living expenses?: users[0].other_living
    datatype: yesnoradio
  - Other monthly household living expenses: users[0].living_other
    datatype: currency
    min: 0
    required: False
    show if: users[0].other_living
  - "What are the other monthly household living expenses?": users[0].living_other_description
    required: False
    show if: users[0].other_living
---
id: monthly transport expenses
question: |
  What monthly transportation expenses do you have?
fields:
  - Car payment: users[0].transport_payment
    datatype: currency
    min: 0
    required: False
  - Repairs and maintenance: users[0].transport_maintenance
    datatype: currency
    min: 0
    required: False
  - Insurance, license, registration, and city stickers: users[0].transport_insurance
    datatype: currency
    min: 0
    required: False
  - Gasoline/Charging: users[0].transport_fuel
    datatype: currency
    min: 0
    required: False
  - Taxi, ride-share, bus, and train: users[0].transport_public
    datatype: currency
    min: 0
    required: False
  - Parking: users[0].transport_parking
    datatype: currency
    min: 0
    required: False
  - Do you have other transportation expenses?: users[0].other_transport_yes
    datatype: yesnoradio
  - Other monthly transportation expenses: users[0].transport_other
    datatype: currency
    min: 0
    required: False
    show if: users[0].other_transport_yes
  - "What are the other monthly transportation expenses?": users[0].transport_other_description
    required: False
    show if: users[0].other_transport_yes
---
id: monthly personal expenses
question: |
  What monthly personal expenses do you have?
fields:
  - Doctor visits: users[0].personal_doctor
    datatype: currency
    min: 0
    required: False
  - Therapy and counseling: users[0].personal_therapy
    datatype: currency
    min: 0
    required: False 
  - Dental and orthodontia: users[0].personal_dental
    datatype: currency
    min: 0
    required: False 
  - Optical: users[0].personal_vision
    datatype: currency
    min: 0
    required: False 
  - Medicine and prescriptions: users[0].personal_medications
    datatype: currency
    min: 0
    required: False 
  - note: |
      Life insurance (not required by law to secure child support) 
  - Life (term): users[0].personal_life_term
    datatype: currency
    min: 0
    required: False 
  - Life (whole or annuity): users[0].personal_life_whole
    datatype: currency
    min: 0
    required: False 
  - note: |
      Other personal expenses 
  - Clothing: users[0].personal_clothing
    datatype: currency
    min: 0
    required: False
  - Grooming (hair, nails, spa, etc.): users[0].personal_stylist
    datatype: currency
    min: 0
    required: False
  - Gym & Club membership dues: users[0].personal_life_term
    datatype: currency
    min: 0
    required: False
  - Entertainment, dining out, and hobbies: users[0].personal_entertainment
    datatype: currency
    min: 0
    required: False
  - Newspapers, magazines, and subscriptions: users[0].personal_subscriptions
    datatype: currency
    min: 0
    required: False
  - Gifts: users[0].personal_gifts
    datatype: currency
    min: 0
    required: False
  - Donations (political, religious, charity, etc.): users[0].personal_donations
    datatype: currency
    min: 0
    required: False
  - Vacations: users[0].personal_vacations
    datatype: currency
    min: 0
    required: False
  - Mandatory or voluntary union, trade, or professional association dues: users[0].personal_associations
    datatype: currency
    min: 0
    required: False 
  - Professional fees (accountants, tax preparers, attorneys, etc.): users[0].peronsal_professional
    datatype: currency
    min: 0
    required: False
  - Do you have any other personal expenses not listed above?: users[0].other_personal_yes
    datatype: yesnoradio
  - Other monthly personal expenses: users[0].personal_other
    datatype: currency
    min: 0
    required: False
    show if: users[0].other_personal_yes
  - "What are the other monthly personal expenses?": users[0].personal_other_description
    required: False
    show if: users[0].other_personal_yes
---
id: monthly children expenses
question: |
  What monthly minor and dependent children expenses do you have?
fields:
  - note: |
      Education expenses:
  - Tuition: users[0].children_tuition
    datatype: currency
    min: 0
    required: False
  - Books, fees, and supplies: users[0].children_books
    datatype: currency
    min: 0
    required: False
  - School lunch: users[0].children_school_lunch
    datatype: currency
    min: 0
    required: False
  - Transportation: users[0].children_transportation
    datatype: currency
    min: 0
    required: False
  - School-sponsored trips and special events: users[0].children_school_events
    datatype: currency
    min: 0
    required: False
  - Uniforms: users[0].children_school_uniforms
    datatype: currency
    min: 0
    required: False
  - Before and after-school care: users[0].children_after_school
    datatype: currency
    min: 0
    required: False
  - Tutoring and summer school: users[0].children_tutor
    datatype: currency
    min: 0
    required: False
  - note: |
      Medical (out-of-pocket expenses) 
  - Doctor visits: users[0].children_doctor
    datatype: currency
    min: 0
    required: False
  - Therapy and counseling: users[0].children_therapy
    datatype: currency
    min: 0
    required: False
  - Dental and orthodontia: users[0].children_dental
    datatype: currency
    min: 0
    required: False
  - Optical: users[0].children_vision
    datatype: currency
    min: 0
    required: False
  - Medicine: users[0].children_medications
    datatype: currency
    min: 0
    required: False
  - note: |
      General expenses:
  - Clothing: users[0].children_clothing
    datatype: currency
    min: 0
    required: False
  - Grooming (hair, nails, spa, etc.): users[0].children_grooming
    datatype: currency
    min: 0
    required: False
  - Allowance: users[0].children_allowance
    datatype: currency
    min: 0
    required: False
  - Childcare and sitters: users[0].children_childcare
    datatype: currency
    min: 0
    required: False
  - Extracurricular activities and sports (equipment, uniforms, etc.): users[0].children_sports
    datatype: currency
    min: 0
    required: False
  - Summer and school-break camps: users[0].children_camps
    datatype: currency
    min: 0
    required: False
  - Vacations (children only): users[0].children_vacations
    datatype: currency
    min: 0
    required: False
  - Entertainment, dining out, and hobbies (children only): users[0].children_entertainment
    datatype: currency
    min: 0
    required: False
  - Gifts children give to others: users[0].children_party_gifts
    datatype: currency
    min: 0
    required: False
  - Do you have other expenses not mentioned above?: users[0].other_child_expense_yes
    datatype: yesnoradio
  - Other monthly minor and dependent children expenses: users[0].children_other
    datatype: currency
    min: 0
    required: False
    show if: users[0].other_child_expense_yes
  - "What are the other monthly minor and dependent children expenses?": users[0].children_other_description
    required: False
    show if: users[0].other_child_expense_yes
---











---
id: forms assembling
continue button field: forms_assembling
question: |
  Almost done
subquestion: |
  After you click **Next**, it may take a few moments to finish making your forms.
  
  ###### You do not need to refresh your screen. Hang in there!
  
  [NEWLINE]
---
id: get docs screen
event: get_docs_screen
question: |
  Download
subquestion: |
  Your form is ready. View and download your form below. Click **Make changes** to fix any mistakes.
  
  ${ action_button_html(url_action('review_answers'), label=':edit: Make changes', color='success', size="md") }

  ${ al_user_bundle.download_list_html() }

  [NEWLINE]

  ${ al_user_bundle.send_button_html(show_editable_checkbox=False) }

  Thank you for using ILAO Easy Forms!
under: |
  % if not user_logged_in():
  [${fa_icon("sign-in-alt", color="#0079d0", size="sm")} **Sign-in**](${url_of('login', next=interview_url())}) or [**create**](${url_of('register', next=interview_url())}) an ILAO Easy Form account to save your progress (optional).
  % endif

  ${ action_button_html(interview_url(i="docassemble.ILAO:feedback.yml", easy_form_interview=ilao_easy_form_url, easy_form_title=ilao_easy_form_title, easy_form_page=user_info().question_id, easy_form_variable=user_info().variable, local=False,reset=1), label=':comment: Was this program helpful?', color="#181c36", size="md", new_window=True) }
---
objects:
  - al_user_bundle: ALDocumentBundle.using(elements=[instructions, financial_affidavit_bundle], filename="completed_financial_affidavit.pdf", title="All forms", enabled=True)
---
objects:
  - financial_affidavit_bundle: ALDocumentBundle.using(title="Financial Affidavit", filename="fa_primary.pdf", enabled=True, elements=[
        fa_primary, 
        additional_employment_bundle,
      ])
---
objects:
  - instructions: ALDocument.using(title="Instructions", filename="instructions.pdf", enabled=True, has_addendum=False)
  - fa_primary: ALDocument.using(title="Financial Affidavit", filename="fa_primary.pdf", enabled=True, has_addendum=False)
---
############ FA PRIMARY DOCUMENT #############
attachment:
  - name: instructions
    variable name: instructions[i]
    filename: instructions
    pdf template file: instructions.pdf
---
attachment:
  - name: fa_primary
    variable name: fa_primary[i]
    filename: fa_primary
    pdf template file: fa_primary.pdf
    editable: False
    fields:
      - "county_name": ${ case_county.upper() }
      - "case_number": ${ case_number }
      - "pre-judgment": ${ filing_status == "pre_judgment" }
      - "post-judgment": ${ filing_status == "post_judgment" }
      - "petitioner_name": |
          % if party_label == 'petitioner':
          ${ users[0].name.full(middle='full') }
          % else:
          ${ other_parties[0].name.full(middle='full') }
          % endif
      - "respondent_name": |
          % if opposing_label == 'respondent':
          ${ other_parties[0].name.full(middle='full') }
          % else:
          ${ users[0].name.full(middle='full') }
          % endif
      - "petitioner_yes": ${ party_label == 'petitioner' }
      - "respondent_yes": ${ party_label == 'respondent' }
      - "date_affirm": ${ today().format('MM/dd/yyyy') }
      - "users_name": ${ users[0].name.full(middle='full') }
      - "users_phone_number": |
          % if not hide_contact:
          ${ users[0].address.line_two() }
          % endif
      - "users_address": |
          % if not hide_contact:
          ${ users[0].address.line_one(bare=True) }
          % endif
      - "users_address2": |
          % if not hide_contact:
          ${ users[0].address.line_two() }
          % endif
      - "users_birthdate": ${ users[0].birthdate.format('MM/dd/yyyy') }
      - "household_expenses": ${ household_expenses }
      # Page 2: 6. My Employment/Business
      - "unemployed_yes": ${ employment.number_gathered() == 0 }  
      # employed
      - "employed_yes": |
          % if employment.there_are_any:
          ${ employment[0].type == "employed" }
          % endif
      - "employer_name": |
          % if employment.there_are_any and employment[0].type == "employed":
          ${ employment[0].name.text }
          % endif
      - "employer_address": |
          % if employment.there_are_any and employment[0].type == "employed":
          ${ employment[0].address.line_one() }
          % endif
      - "employer_address2": |
          % if employment.there_are_any and employment[0].type == "employed":
          ${ employment[0].address.line_two() }
          % endif
      - "paychecks_monthly": |
          % if employment.there_are_any and employment[0].type == "employed":
          ${ employment[0].frequency == "12" }
          % endif
      - "paychecks_bi_monthly": |
          % if employment.there_are_any and employment[0].type == "employed":
          ${ employment[0].frequency == "24" }
          % endif
      - "paychecks_two_weeks": |
          % if employment.there_are_any and employment[0].type == "employed":
          ${ employment[0].frequency == "26" }
          % endif
      - "paychecks_weekly": |
          % if employment.there_are_any and employment[0].type == "employed":
          ${ employment[0].frequency == "52" }
          % endif
      - "paychecks_cash": |
          % if employment.there_are_any and employment[0].type == "employed":
          ${ employment[0].cash_payment }
          % endif
      - "income_gross": |
          % if employment.there_are_any and employment[0].type == "employed":
          ${ nice_number(employment[0].gross_income) }
          % endif
      - "income_date": |
          % if employment.there_are_any and employment[0].type == "employed":
          ${ employment[0].gross_date.format('MM/dd/yyyy') }
          % endif
      # business
      - "business_own": |
          % if employment.there_are_any:
          ${ employment[0].type == "own" }
          % endif
      - "business_contractor": |
          % if employment.there_are_any:
          ${ employment[0].type == "contractor" }
          % endif
      - "business_partnership": |
          % if employment.there_are_any:
          ${ employment[0].type == "partnership" }
          % endif          
      - "business_llc": |
          % if employment.there_are_any:
          ${ employment[0].type == "llc" }
          % endif          
      - "business_corporation": |
          % if employment.there_are_any:
          ${ employment[0].type == "corp" }
          % endif
      - "business_other_entity": |
          % if employment.there_are_any:
          ${ employment[0].type == "other_entity" }
          % endif          
      - "business_name": |
          % if employment.there_are_any and employment[0].type != "employed":
          ${ employment[0].name.text }
          % endif
      - "business_address": |
          % if employment.there_are_any and employment[0].type != "employed":
          ${ employment[0].address.line_one() }
          % endif
      - "business_address2": |
          % if employment.there_are_any and employment[0].type != "employed":
          ${ employment[0].address.line_two() }
          % endif
      - "business_gross_last_year": |
          % if employment.there_are_any and employment[0].type != "employed":
          ${ nice_number(employment[0].income_last_year) }
          % endif
      - "business_gross_current_year": |
          % if employment.there_are_any and employment[0].type != "employed":
          ${ nice_number(employment[0].income_current_year) }
          % endif           
      - "business_expense_last_year": |
          % if employment.there_are_any and employment[0].type != "employed":
          ${ nice_number(employment[0].expenses_last_year) }
          % endif
      - "business_expense_current_year": |
          % if employment.there_are_any and employment[0].type != "employed":
          ${ nice_number(employment[0].expenses_current_year) }
          % endif
      - "business_meals": |
          % if employment.there_are_any and employment[0].type != "employed":
          ${ employment[0].perks['meals'] }
          % endif
      - "business_car": |
          % if employment.there_are_any and employment[0].type != "employed":
          ${ employment[0].perks['car'] }
          % endif
      - "business_housing": |
          % if employment.there_are_any and employment[0].type != "employed":
          ${ employment[0].perks['housing'] }
          % endif
      - "business_other": |
          % if employment.there_are_any and employment[0].type != "employed":
          ${ employment[0].perks['other'] }
          % endif
      - "business_other_detail": |
          % if employment.there_are_any and employment[0].type != "employed":
          ${ employment[0].other_perks }
          % endif
      - "employment_addendum_yes": ${ employment.number_gathered() > 1 }

      ## Page 3:  Gross income/taxes from last year, monthly gross income sources
      - "married_joint_yes": |
          % if taxes_filed:
          ${ taxes_filed_status == "joint" }
          % endif
      - "married_separate_yes": |
          % if taxes_filed:
          ${ taxes_filed_status == "separate" }
          % endif
      - "single_yes": |
          % if taxes_filed:
          ${ taxes_filed_status == "single" }
          % endif
      - "taxes_household": |
          % if taxes_filed:
          ${ taxes_filed_status == "household" }
          % endif
      - "taxes_not_filed": ${ not taxes_filed }   
      - "deduction_standard": |
          % if taxes_filed:
          ${ deduction_type }
          % endif
      - "deduction_itemized": |
          % if taxes_filed:
          ${ not deduction_type }
          % endif
      - "Gross income (before taxes and deductions) last year": |
          % if taxes_filed:
          ${ nice_number(gross_income_last_year) }
          % endif
      - "Child Tax Credit": |
          % if taxes_filed:
          ${ tax_claimed['child_credit'] }
          % endif
      - "Additional child tax credit": |
          % if taxes_filed:
          ${ tax_claimed['additional'] }
          % endif
      - "Credit for other dependents": |
          % if taxes_filed:
          ${ tax_claimed['dependents'] }
          % endif
      - "Earned Income Credit": |
          % if taxes_filed:
          ${ tax_claimed['eic'] }
          % endif
      - "Dependent care credit": |
          % if taxes_filed:
          ${ tax_claimed['care'] }
          % endif
      # monthly gross income
      - "regular_pay": |
          ${ nice_number(users[0].regular_pay, use_word=False) }
      - "overtime_pay":  |
          ${ nice_number(users[0].overtime_pay, use_word=False) }
      - "commission_pay":  |
          ${ nice_number(users[0].commission_pay, use_word=False) }
      - "tips":  |
          ${ nice_number(users[0].tips, use_word=False) }
      - "bonus":  |
          ${ nice_number(users[0].bonus, use_word=False) }
      - "pension":  |
          ${ nice_number(users[0].pension, use_word=False) }
      - "annuity":  |
          ${ nice_number(users[0].annuity, use_word=False) }
      - "interest_income":  |
          ${ nice_number(users[0].interest, use_word=False) }
      - "dividend_income":  |
          ${ nice_number(users[0].dividend, use_word=False) }
      - "trust_income":  |
          ${ nice_number(users[0].trust, use_word=False) }
      - "investment_income":  |
          ${ nice_number(users[0].investment, use_word=False) }
      - "social_retirement":  |
          ${ nice_number(users[0].social_retirement, use_word=False) }
      - "social_disability":  |
          ${ nice_number(users[0].social_disability, use_word=False) }
      - "social_income":  |
          ${ nice_number(users[0].social_income, use_word=False) }
      - "unemployment_benefits":  |
          ${ nice_number(users[0].unemployment_benefits, use_word=False) }
      - "disability_benefits":  |
          ${ nice_number(users[0].disability_benefits, use_word=False) }
      - "workers_comp_benefits":  |
          ${ nice_number(users[0].workers_comp_benefits, use_word=False) }
      - "child_benefits":  |
          ${ nice_number(users[0].child_benefits, use_word=False) }
      - "military_allowances":  |
          ${ nice_number(users[0].military_allowances, use_word=False) }
      - "rental_income":  |
          ${ nice_number(users[0].rental_income, use_word=False) }
      - "partnership_income":  |
          ${ nice_number(users[0].partnership_income, use_word=False) }
      - "distributions_draws":  |
          ${ nice_number(users[0].distributions_draws, use_word=False) }
      - "royalty_income":  |
          ${ nice_number(users[0].royalty_income, use_word=False) }
      - "maintenance_current":  |
          ${ nice_number(users[0].maintenance_current, use_word=False) }
      - "maintenance_alternate":  |
          ${ nice_number(users[0].maintenance_alternate, use_word=False) }
      - "child_support_current":  |
          ${ nice_number(users[0].child_support_current, use_word=False) }
      - "social_security_current":  |
          ${ nice_number(users[0].social_security_current, use_word=False) }
      - "gifts_money":  |
          ${ nice_number(users[0].gifts_money, use_word=False) }
      - "other_income": |
          % if users[0].other_source:
          ${ nice_number(users[0].other_income, use_word=False) }
          % endif
      - "other_income_description": |
          % if users[0].other_source:
          ${ users[0].other_income_description }
          % endif          
      - "total_gross_monthly_income": |
          ${ nice_number(
          users[0].regular_pay +
          users[0].overtime_pay +
          users[0].commission_pay +
          users[0].tips +
          users[0].bonus +
          users[0].pension +
          users[0].annuity +
          users[0].interest +
          users[0].dividend +
          users[0].trust +
          users[0].investment + 
          users[0].social_retirement +
          users[0].social_disability +
          users[0].social_income +
          users[0].unemployment_benefits +
          users[0].disability_benefits +
          users[0].workers_comp_benefits +
          users[0].child_benefits +
          users[0].military_allowances +
          users[0].rental_income +
          users[0].partnership_income +
          users[0].distributions_draws +
          users[0].royalty_income + 
          users[0].maintenance_current +
          users[0].maintenance_alternate +
          users[0].child_support_current +
          users[0].social_security_current +
          users[0].gifts_money + 
          users[0].other_income, use_word=False) }
      # expenses
      - "deductions_federal": |
          ${ nice_number(users[0].deductions_federal, use_word=False) }
      - "deductions_state":  |
          ${ nice_number(users[0].deductions_state, use_word=False) }
      - "deductions_FICA":  |
          ${ nice_number(users[0].deductions_FICA, use_word=False) }
      - "deductions_medicare":  |
          ${ nice_number(users[0].deductions_medicare, use_word=False) }
      - "deductions_retirement":  |
          ${ nice_number(users[0].deductions_retirement, use_word=False) }
      - "total_deductions":  |
          ${ nice_number(
          users[0].deductions_federal +
          users[0].deductions_state +
          users[0].deductions_FICA +
          users[0].deductions_medicare +
          users[0].deductions_retirement) }
      - "maintenance_paid_court": |
          ${ nice_number(users[0].maintenance_paid_court, use_word=False) }
      - "maintenance_paid_no_tax": |
          ${ nice_number(users[0].maintenance_paid_no_tax, use_word=False) }
      - "maintenance_paid_taxed": |
          ${ nice_number(users[0].maintenance_paid_taxed, use_word=False) }
      - "total_maintenance": |
          ${ nice_number(
          users[0].maintenance_paid_court +
          users[0].maintenance_paid_no_tax +
          users[0].maintenance_paid_taxed) }
      - "child_support_1": |
          ${ nice_number(users[0].child_support_1, use_word=False) }
      - "child_support_2": |
          ${ nice_number(users[0].child_support_2, use_word=False) }
      - "child_support_3": |
          ${ nice_number(users[0].child_support_3, use_word=False) }
      - "total_child_support": |
          ${ nice_number(
          users[0].child_support_1 +
          users[0].child_support_2 +
          users[0].child_support_3) }
      - "child_support_1": |
          ${ nice_number(users[0].child_support_1, use_word=False) }
      - "child_support_2": |
          ${ nice_number(users[0].child_support_2, use_word=False) }
      - "child_support_3": |
          ${ nice_number(users[0].child_support_3, use_word=False) }
      - "total_child_support": |
          ${ nice_number(
          users[0].child_support_1 +
          users[0].child_support_2 +
          users[0].child_support_3) }
      - "living_house_payment": |
          ${ nice_number(users[0].living_house_payment, use_word=False) }
      - "living_heloc": |
          ${ nice_number(users[0].living_heloc, use_word=False) }
      - "living_property_taxes": |
          ${ nice_number(users[0].living_property_taxes, use_word=False) }
      - "living_hoa": |
          ${ nice_number(users[0].living_hoa, use_word=False) }
      - "living_insurance": |
          ${ nice_number(users[0].living_insurance, use_word=False) }
      - "living_gas": |
          ${ nice_number(users[0].living_gas, use_word=False) }
      - "living_power": |
          ${ nice_number(users[0].living_power, use_word=False) }
      - "living_phone": |
          ${ nice_number(users[0].living_phone, use_word=False) }
      - "living_cable": |
          ${ nice_number(users[0].living_cable, use_word=False) }
      - "living_internet": |
          ${ nice_number(users[0].living_internet, use_word=False) }
      - "living_water": |
          ${ nice_number(users[0].living_water, use_word=False) }
      - "living_trash": |
          ${ nice_number(users[0].living_trash, use_word=False) }
      - "living_laundry": |
          ${ nice_number(users[0].living_laundry, use_word=False) }
      - "living_cleaner": |
          ${ nice_number(users[0].living_cleaner, use_word=False) }
      - "living_repairs": |
          ${ nice_number(users[0].living_repairs, use_word=False) }
      - "living_pets": |
          ${ nice_number(users[0].living_pets, use_word=False) }
      - "living_groceries": |
          ${ nice_number(users[0].living_groceries, use_word=False) }
      - "living_other": |
          ${ nice_number(users[0].living_other, use_word=False) }
      - "subtotal_living": |
          ${ nice_number(
          users[0].living_house_payment +
          users[0].living_heloc +
          users[0].living_property_taxes +
          users[0].living_hoa +
          users[0].living_insurance +
          users[0].living_gas +
          users[0].living_power +
          users[0].living_phone +
          users[0].living_cable +
          users[0].living_internet +
          users[0].living_water +
          users[0].living_trash +
          users[0].living_laundry +
          users[0].living_cleaner +
          users[0].living_repairs +
          users[0].living_pets +
          users[0].living_groceries +
          users[0].living_other) }
      - "transport_payment": |
          ${ nice_number(users[0].transport_payment, use_word=False) }
      - "transport_maintenance": |
          ${ nice_number(users[0].transport_maintenance, use_word=False) }
      - "transport_insurance": |
          ${ nice_number(users[0].transport_insurance, use_word=False) }
      - "transport_fuel": |
          ${ nice_number(users[0].transport_fuel, use_word=False) }
      - "transport_public": |
          ${ nice_number(users[0].transport_public, use_word=False) }
      - "transport_parking": |
          ${ nice_number(users[0].transport_parking, use_word=False) }
      - "transport_other": |
          ${ nice_number(users[0].transport_other, use_word=False) }
      - "subtotal_transport":  |
          ${ nice_number(
          users[0].transport_payment +
          users[0].transport_maintenance +
          users[0].transport_insurance +
          users[0].transport_fuel +
          users[0].transport_public +
          users[0].transport_parking +
          users[0].transport_other) }
      - "personal_doctor": |
          ${ nice_number(users[0].transport_parking, use_word=False) }
      - "personal_therapy": |
          ${ nice_number(users[0].transpersonal_therapyport_parking, use_word=False) }
      - "personal_dental": |
          ${ nice_number(users[0].personal_dental, use_word=False) }
      - "personal_vision": |
          ${ nice_number(users[0].personal_vision, use_word=False) }
      - "personal_medications": |
          ${ nice_number(users[0].personal_medications, use_word=False) }
      - "personal_life_term": |
          ${ nice_number(users[0].personal_life_term, use_word=False) }
      - "personal_life_whole": |
          ${ nice_number(users[0].personal_life_whole, use_word=False) }
      - "personal_clothing": |
          ${ nice_number(users[0].personal_clothing, use_word=False) }
      - "personal_stylist": |
          ${ nice_number(users[0].personal_stylist, use_word=False) }
      - "personal_memberships": |
          ${ nice_number(users[0].personal_memberships, use_word=False) }
      - "personal_subscriptions": |
          ${ nice_number(users[0].personal_subscriptions, use_word=False) }
      - "personal_entertainment": |
          ${ nice_number(users[0].personal_entertainment, use_word=False) }
      - "personal_gifts": |
          ${ nice_number(users[0].personal_gifts, use_word=False) }
      - "personal_donations": |
          ${ nice_number(users[0].personal_donations, use_word=False) }
      - "personal_vacations": |
          ${ nice_number(users[0].personal_vacations, use_word=False) }
      - "personal_associations": |
          ${ nice_number(users[0].personal_associations, use_word=False) }
      - "peronsal_professional": |
          ${ nice_number(users[0].peronsal_professional, use_word=False) }
      - "personal_other": |
          ${ nice_number(users[0].personal_other, use_word=False) }
      - "subtotal_personal":  |
          ${ nice_number(
          users[0].personal_doctor +
          users[0].personal_therapy +
          users[0].personal_dental +
          users[0].personal_vision +
          users[0].personal_medications +
          users[0].personal_life_term +
          users[0].personal_life_whole +
          users[0].personal_clothing +
          users[0].personal_stylist +
          users[0].personal_memberships +
          users[0].personal_subscriptions +
          users[0].personal_entertainment +
          users[0].personal_gifts +
          users[0].personal_donations +
          users[0].personal_vacations +
          users[0].personal_associations +
          users[0].peronsal_professional +
          users[0].personal_other) }
      - "children_clothing": |
          ${ nice_number(users[0].children_clothing, use_word=False) }
      - "children_grooming": |
          ${ nice_number(users[0].children_grooming, use_word=False) }
      - "children_tuition": |
          ${ nice_number(users[0].children_tuition, use_word=False) }
      - "children_books": |
          ${ nice_number(users[0].children_books, use_word=False) }
      - "children_school_lunch": |
          ${ nice_number(users[0].children_school_lunch, use_word=False) }
      - "children_transportation": |
          ${ nice_number(users[0].children_transportation, use_word=False) }
      - "children_school_events": |
          ${ nice_number(users[0].children_school_events, use_word=False) }
      - "children_school_uniforms": |
          ${ nice_number(users[0].children_school_uniforms, use_word=False) }
      - "children_after_school": |
          ${ nice_number(users[0].children_after_school, use_word=False) }
      - "children_tutor": |
          ${ nice_number(users[0].children_tutor, use_word=False) }
      - "children_doctor": |
          ${ nice_number(users[0].children_doctor, use_word=False) }
      - "children_therapy": |
          ${ nice_number(users[0].children_therapy, use_word=False) }
      - "children_dental": |
          ${ nice_number(users[0].children_dental, use_word=False) }
      - "children_vision": |
          ${ nice_number(users[0].children_vision, use_word=False) }
      - "children_medications": |
          ${ nice_number(users[0].children_medications, use_word=False) }
      - "children_allowance": |
          ${ nice_number(users[0].children_allowance, use_word=False) }
      - "children_childcare": |
          ${ nice_number(users[0].children_childcare, use_word=False) }
      - "children_sports": |
          ${ nice_number(users[0].children_sports, use_word=False) }
      - "children_camps": |
          ${ nice_number(users[0].children_camps, use_word=False) }
      - "children_vacations": |
          ${ nice_number(users[0].children_vacations, use_word=False) }
      - "children_entertainment": |
          ${ nice_number(users[0].children_entertainment, use_word=False) }
      - "children_party_gifts": |
          ${ nice_number(users[0].children_party_gifts, use_word=False) }
      - "children_other": |
          ${ nice_number(users[0].children_other, use_word=False) }
      - "subtotal_children_expense":  |
          ${ nice_number(
          users[0].children_clothing +
          users[0].children_grooming +
          users[0].children_tuition +
          users[0].children_books +
          users[0].children_school_lunch +
          users[0].children_transportation +
          users[0].children_school_events +
          users[0].children_school_uniforms +
          users[0].children_after_school +
          users[0].children_tutor +
          users[0].children_doctor +
          users[0].children_therapy +
          users[0].children_dental +
          users[0].children_vision +
          users[0].children_medications +
          users[0].children_allowance +
          users[0].children_childcare +
          users[0].children_sports +
          users[0].children_camps +
          users[0].children_vacations +
          users[0].children_entertainment +
          users[0].children_party_gifts +
          users[0].children_other) }
      # Part 12 total monthly living expenses
      - "total_monthly_living _expenses": |
          ${ nice_number(
          users[0].living_house_payment +
          users[0].living_heloc +
          users[0].living_property_taxes +
          users[0].living_hoa +
          users[0].living_insurance +
          users[0].living_gas +
          users[0].living_power +
          users[0].living_phone +
          users[0].living_cable +
          users[0].living_internet +
          users[0].living_water +
          users[0].living_trash +
          users[0].living_laundry +
          users[0].living_cleaner +
          users[0].living_repairs +
          users[0].living_pets +
          users[0].living_groceries +
          users[0].living_other +
          users[0].transport_payment +
          users[0].transport_maintenance +
          users[0].transport_insurance +
          users[0].transport_fuel +
          users[0].transport_public +
          users[0].transport_parking +
          users[0].transport_other +
          users[0].personal_doctor +
          users[0].personal_therapy +
          users[0].personal_dental +
          users[0].personal_vision +
          users[0].personal_medications +
          users[0].personal_life_term +
          users[0].personal_life_whole +
          users[0].personal_clothing +
          users[0].personal_stylist +
          users[0].personal_memberships +
          users[0].personal_subscriptions +
          users[0].personal_entertainment +
          users[0].personal_gifts +
          users[0].personal_donations +
          users[0].personal_vacations +
          users[0].personal_associations +
          users[0].peronsal_professional +
          users[0].personal_other +
          users[0].children_clothing +
          users[0].children_grooming +
          users[0].children_tuition +
          users[0].children_books +
          users[0].children_school_lunch +
          users[0].children_transportation +
          users[0].children_school_events +
          users[0].children_school_uniforms +
          users[0].children_after_school +
          users[0].children_tutor +
          users[0].children_doctor +
          users[0].children_therapy +
          users[0].children_dental +
          users[0].children_vision +
          users[0].children_medications +
          users[0].children_allowance +
          users[0].children_childcare +
          users[0].children_sports +
          users[0].children_camps +
          users[0].children_vacations +
          users[0].children_entertainment +
          users[0].children_party_gifts +
          users[0].children_other) }

---
############ FA EMPLOYMENT/BUSINESS INCOME ADDENDUM #############
objects:
  - employment[i].additional_employment: ALDocument.using(title="FA Additional Employment Business", filename="fa_additional_employment_business.pdf", has_addendum=False)
---
objects:
  - additional_employment_bundle: ALDocumentBundle.using(elements=[], title= "FA Additional Employment Bundle", filename="fa_additional_employment_business.pdf", has_addendum=False)
---
reconsider: True
code: |
  employment_to_bundle = []
  additional_employment_bundle.enabled = False

  if employment.number_gathered():
    for index, el in enumerate(employment):
      # No need for additional employment or business income unless employment.number_gathered() >= 1
      if index == 0:
        el.additional_employment.enabled = False
      else:
        el.additional_employment.enabled = True
        additional_employment_bundle.enabled = True
        employment_to_bundle.append(el.additional_employment)

  additional_employment_bundle.elements = employment_to_bundle
  complete_additional_employment = True
---
attachment:
  variable name: employment[i].additional_employment[j]
  name: additional_employment
  filename: additional_employment
  skip undefined: True
  editable: False
  pdf template file: fa_additional_employment_business.pdf
  fields:
      - "county": ${ case_county }
      - "case_number": ${ case_number }
      - "pre-judgment": ${ filing_status == "pre_judgment" }
      - "post-judgment": ${ filing_status == "post_judgment" }
      - "petitioner_name": |
          % if party_label == 'petitioner':
          ${ users[0].name.full(middle='full') }
          % else:
          ${ other_parties[0].name.full(middle='full') }
          % endif
      - "respondent_name": |
          % if opposing_label == 'respondent':
          ${ other_parties[0].name.full(middle='full') }
          % else:
          ${ users[0].name.full(middle='full') }
          % endif
      - "petitioner_yes": ${ party_label == 'petitioner' }
      - "respondent_yes": ${ party_label == 'respondent' }

      - "employed_yes": ${ employment[i].type == 'employed' }
      - "employer_name": |
          % if employment[i].type == "employed":
          ${ employment[i].name.text }
          % endif
      - "employer_address": |
          % if employment[i].type == "employed":
          ${ employment[i].address.line_one() }
          % endif
      - "employer_address2": |
          % if employment[i].type == "employed":
          ${ employment[i].address.line_two() }
          % endif
      - "paychecks_monthly": |
          % if employment[i].type == "employed":
          ${ employment[i].frequency == "12" }
          % endif
      - "paychecks_bi_monthly": |
          % if employment[i].type == "employed":
          ${ employment[i].frequency == "24" }
          % endif
      - "paychecks_two_weeks": |
          % if employment[i].type == "employed":
          ${ employment[i].frequency == "26" }
          % endif
      - "paychecks_weekly": |
          % if employment[i].type == "employed":
          ${ employment[i].frequency == "52" }
          % endif
      - "paychecks_cash": |
          % if employment[i].type == "employed":
          ${ employment[i].cash_payment }
          % endif
      - "income_gross": |
          % if employment[i].type == "employed":
          ${ nice_number(employment[i].gross_income) }
          % endif
      - "income_date": |
          % if employment[i].type == "employed":
          ${ employment[i].gross_date.format('MM/dd/yyyy') }
          % endif
      # business
      - "business_own": ${ employment[i].type == "own" }
      - "business_contractor": ${ employment[i].type == "contractor" }
      - "business_partnership": ${ employment[i].type == "partnership" }
      - "business_llc": ${ employment[i].type == "llc" }
      - "business_corporation": ${ employment[i].type == "corp" }
      - "business_other_entity": ${ employment[i].type == "other_entity" }
      - "business_name": |
          % if employment[i].type != "employed":
          ${ employment[i].name.text }
          % endif
      - "business_address": |
          % if employment[i].type != "employed":
          ${ employment[i].address.line_one() }
          % endif
      - "business_address2": |
          % if employment[i].type != "employed":
          ${ employment[i].address.line_two() }
          % endif
      - "business_gross_last_year": |
          % if employment[i].type != "employed":
          ${ nice_number(employment[i].income_last_year) }
          % endif
      - "business_gross_current_year": |
          % if employment[i].type != "employed":
          ${ nice_number(employment[i].income_current_year) }
          % endif           
      - "business_expense_last_year": |
          % if employment[i].type != "employed":
          ${ nice_number(employment[i].expenses_last_year) }
          % endif
      - "business_expense_current_year": |
          % if employment[i].type != "employed":
          ${ nice_number(employment[i].expenses_current_year) }
          % endif
      - "business_meals": |
          % if employment[i].type != "employed":
          ${ employment[i].perks['meals'] }
          % endif
      - "business_car": |
          % if employment[i].type != "employed":
          ${ employment[i].perks['car'] }
          % endif
      - "business_housing": |
          % if employment[i].type != "employed":
          ${ employment[i].perks['housing'] }
          % endif
      - "business_other": |
          % if employment[i].type != "employed":
          ${ employment[i].perks['other'] }
          % endif
      - "business_other_detail": |
          % if employment[i].type != "employed":
          ${ employment[i].other_perks }
          % endif
---