metadata:
  title: Financial affidavit
  short title: Financial affidavit
  comment: This program helps you make forms that provide financial information and documents to the other party in family law cases.
  authors:
    - Jim Graszer
    - Matt Newsted
---
include:
  - docassemble.AssemblyLine:assembly_line.yml
  - docassemble.ILAO:ilao-interview-framework.yml
  - docassemble.ILAO:shared-basic-questions.yml
  - section_reviews.yml
  - fa_additional.yml
---
objects:
  - users: ALPeopleList.using(there_are_any=True)
  - other_parties: ALPeopleList.using(there_are_any=True)
  - employment: DAList.using(object_type=Thing, complete_attribute='complete')
  - employment[i].address: ALAddress
  - taxes: DAList.using(object_type=Thing, there_are_any=False)
  - insurance: DAList.using(object_type=Thing, complete_attribute='complete')
  - debts: DAList.using(object_type=Thing, complete_attribute='complete', there_are_any=True)
  - cash: DAList.using(object_type=Thing, complete_attribute='complete', there_are_any=True)
  - cert_deposit: DAList.using(object_type=Thing, complete_attribute='complete', there_are_any=True)
  - money: DAList.using(object_type=Thing, complete_attribute='complete', there_are_any=True)
  - investments: DAList.using(object_type=Thing, complete_attribute='complete', there_are_any=True)
  - securities: DAList.using(object_type=Thing, complete_attribute='complete', there_are_any=True)
  - real_estate: DAList.using(object_type=Thing, complete_attribute='complete', there_are_any=True)
  - real_estate[i].address: ALAddress
  - motor_vehicle: DAList.using(object_type=Thing, complete_attribute='complete', there_are_any=True)
  - business_interests: DAList.using(object_type=Thing, complete_attribute='complete', there_are_any=True)
  - life_insurance: DAList.using(object_type=Thing, complete_attribute='complete', there_are_any=True)
  - retirement_plan: DAList.using(object_type=Thing, complete_attribute='complete', there_are_any=True)
  - collection: DAList.using(object_type=Thing, complete_attribute='complete', there_are_any=True)
  - other_property: DAList.using(object_type=Thing, complete_attribute='complete', there_are_any=True)
  - transfer: DAList.using(object_type=Thing, complete_attribute='complete', there_are_any=True)
  - lawsuits: DAList.using(object_type=Thing, complete_attribute='complete', there_are_any=True)
  - court_list: ALCourtLoader.using(file_name='docassemble.ILAO:data/sources/il_courts.xlsx')
---
code: |
  al_form_type = 'existing_case'
  ilao_easy_form_title = "Financial affidavit"
  ilao_easy_form_url = "https://www.illinoislegalaid.org/legal-information/financial-affidavit"
  form_name = "Financial affidavit"
  github_user = 'IllinoisLegalAidOnline'
  github_repo_name = 'docassemble-FinancialAffidavit'
  allowed_courts = ['Circuit']
---
sections:
  - section_intro: Start
  - section_case: Case information
  - section_user: About you
  - section_income: Income
  - section_expenses: Expenses
  - section_debts: Debts
  - section_assets: Assets
  - section_final: Final steps
  - section_download: Download
---
#################### Interview order #####################
mandatory: True
code: |
  nav.set_section('section_intro')
  sees_nav_bar
  set_progress(5)
  how_to_use
  accept_terms
  if family_case == False:
    family_kickout
  set_progress(10)
  nav.set_section('section_case')
  users[0].name.first
  party_label
  other_parties[0].name.first
  case_county
  case_number
  filing_status
  set_progress(20)
  nav.set_section('section_user')
  if hide_contact == False:
    users[0].address.address
    users[0].phone_number
  users[0].birthdate
  household_expenses
  users_acknowledge
  set_progress(30)
  nav.set_section('section_income')
  if employment.there_are_any == True:
    employment.gather()

  if taxes_filed == True:
    taxes_filed_status
    taxes[0].federal_tax
  if taxes_filed_two_years == True:
    taxes[1].federal_tax

  monthly_income_intro
  users[0].regular_pay_question
  users[0].pension_question
  users[0].social_retirement_question
  users[0].rental_income_question
  users[0].maintenance_current_question
  users[0].gifts_money_question
  income_summary

  set_progress(50)
  nav.set_section('section_expenses') 
  expenses_intro
  users[0].deductions_federal_question
  users[0].maintenance_paid_court_question
  users[0].child_support_1_question
  
  users[0].living_house_payment_question
  users[0].living_gas_question
  users[0].living_laundry_question
  users[0].living_other_question

  users[0].transport_payment_question
  users[0].transport_other_question

  users[0].personal_doctor_question
  users[0].personal_life_term_question
  users[0].personal_clothing_question
  users[0].personal_entertainment_question
  users[0].personal_gifts_question
  users[0].personal_vacations_question
  users[0].personal_associations_question
  users[0].personal_other_question

  if users[0].children_expenses_question:
    users[0].children_clothing_question
    users[0].children_tuition_question
    users[0].children_doctor_question
    users[0].children_allowance_question 
    users[0].children_vacations_question 
    users[0].children_other_question

  expenses_summary

  if insurance.there_are_any:
    insurance.gather()

  set_progress(60)
  nav.set_section('section_debts')
  if has_debts:
    debts.gather()

  set_progress(70)
  nav.set_section('section_assets')
  assets_intro
  if has_cash_assets:
    cash.gather()
  if has_cert_deposit:
    cert_deposit.gather()
  if has_money:
    money.gather()
  if has_investments:
    investments.gather()
  if has_securities:
    securities.gather()
  if has_real_estate:
    real_estate.gather()
  if has_motor_vehicle:
    motor_vehicle.gather()
  if has_business_interests:
    business_interests.gather()
  if has_life_insurance:
    life_insurance.gather()
  if has_retirement_plan:
    retirement_plan.gather()
  if has_collection:
    collection.gather()
  if has_other_property:
    other_property.gather()
  if has_transfer:
    transfer.gather()
  

  if has_lawsuits:
    lawsuits.gather()
  e_signature

  set_progress(100)
  nav.set_section('section_download')
  forms_assembling
  get_docs_screen
---
# mandatory: True
# code:
#   users[0].other_income = 0
#   users[0].living_other = 0
#   users[0].transport_other = 0
#   users[0].personal_other = 0
#   users[0].children_other = 0
# ---
id: welcome
question: |
  Financial Affidavit
subquestion: |
  Welcome to Illinois Legal Aid Online's Financial Affidavit program.

  To use this program, you must be asking or being asked to pay child support, 
  children's expenses, college expenses, spousal maintenance (alimony), or 
  attorney's fees.
field: sees_nav_bar
---
id: how to use
continue button field: how_to_use
question: |
  Instructions
subquestion: |
  To complete this program, you will need to know:

  * Your monthly income and expenses
  * Your expenses for children and other dependents, if any
  * Your income tax refunds or amounts owed for the last 2 years (federal and state)
  * Your debts and liabilities
  * Your assets, such as bank accounts, real estate, vehicles, and retirement benefits

  It could take 30 minutes to 60 minutes to finish this program. You can log in and save your work to return to later. 
 
  ${ collapse_template(help_example) }  

  Click on **{green words}** to learn what they mean. Some questions have a question mark in a circle 
  ${ fa_icon("question-circle", color_css="#0dcaf0" ) } that also gives help.
---
template: help_example
subject: |
  **You can expand sections like this to show more information.**
content: |  
  This is an example of help. Click again to hide.
---
id: family case 
question: |
  Do you have a family law case in Illinois?
subquestion: |
  If you have any active case or one where a judgment was already entered (Ex: divorce).
fields:
  - no label: family_case
    datatype: yesnoradio
---
id: family case kickout
event: family_kickout
question: |
  Sorry
subquestion: |
  You can only use this program if you have an active family law case in Illinois.
buttons:
  - Exit: exit
  - Restart: restart
---
############### CASE INFORMATION ###############
id: case county
question: |
  In which county was this case filed?
fields:
  - County: case_county
    code:
      court_list._load_courts()["address_county"].unique()
---
id: case number
question: |
  What is the case number?
subquestion: |
  ${ collapse_template(case_number_help) }
fields:
  - Case number: case_number
    maxlength: 19
---
template: case_number_help
subject: |
  **Learn about case numbers**
content: |  
  The case number should be on your court papers. Look at the Complaint or Petition, or the
  Summons if you received one. It is usually in the top-right part of the first page.
  
  If you started the case, the court clerk should have given you the case number.
---  
id: case filing status
question: |
  Are you filing your Financial Affidavit into a case that has a final 
  judgment or order?
subquestion: |
  For example, a Judgment of Dissolution of Marriage would be a final order in a divorce case.": 
fields:
  - Filing status: filing_status
    datatype: radio
    choices:
      - Pre-Judgment: pre_judgment
      - Post-Judement: post_judgment
---  
id: party label
question: |
  What is your party label in the case?
subquestion: |
  ${ collapse_template(which_party) }  
field: party_label
choices:
  - Petitioner: petitioner
  - Respondent: respondent
---
template: which_party
subject: |
  **Learn more about party labels**
content: |
  If you filed a new case, you are either the Plaintiff or the Petitioner.

  If someone filed the case against you, you are either the Defendant or the Respondent.

  The other court forms in the case should help you figure it out. Look at the top (the caption)
  of the Complaint or Petition. That form should have a label by your name.
---
id: your name
sets:
    - users[0].name.first
    - users[0].name.last
    - users[0].name.middle
    - users[0].name.suffix
question: |
  What is your name?
fields:
  - code: |
      users[0].name_fields()
---
code: |
  if party_label == 'petitioner':
    opposing_label = 'respondent'
  if party_label == 'respondent':
    opposing_label = 'petitioner'
---
id: other party name
sets:
  - other_parties[0].name.first
question: |
  What is the name of the ${ opposing_label }?
fields:
  - code: |
      other_parties[0].name_fields(person_or_business='person')
---
############### ABOUT YOU ###############
id: hide contact 
question: |
  Is your contact information is protected pursuant to court order because of 
  domestic violence or abuse?
fields:
  - no label: hide_contact
    datatype: yesnoradio
---
id: users address
sets:
  - users[0].address.address
  - users[0].address.city
  - users[0].address.state
  - users[0].address.zip
question: |
  What is your address?
fields:
  - Street address: users[0].address.address
    address autocomplete: True
  - Address line 2: users[0].address.unit
    required: False
  - City: users[0].address.city
  - State: users[0].address.state
    code: |
      states_list()
    default: IL      
  - ZIP code: users[0].address.zip
---
id: user phone
question: |
  What is your phone number?
fields:
  - Phone Number: users[0].phone_number
    datatype: al_international_phone
---
id: user birthdate
question: |
  When were you born?
fields:
  - Birth date: users[i].birthdate
    datatype: BirthDate
    alMax: ${ today().format("yyyy-MM-dd") }
---
id: user expenses
question: |
  Do you currently live with another adult, **not ${other_parties[0].name.full()}**,
  who helps you pay your expenses?
fields:
  - no label: household_expenses
    datatype: yesnoradio
---
id: user acknowledge
continue button field: users_acknowledge
question: |
  Accuracy is important
subquestion: |
  <div class="alert alert-info ilao-info" role="alert">
    <h2 class="h4">Important</h2>
    <p>If you intentionally or recklessly enter inaccurate or misleading information on this form, 
    you may face significant penalties and sanctions, including costs and attorney's fees.</p>
    <p>Do not file this document and the enclosures with the Circuit Clerk unless a local rule or 
    court order requires you to do so.</p>
    <p>Ask the Circuit Clerk where to find these rules.</p>
  </div>
---
########### INCOME ####################
id: income intro 
question: |
  Are you employed or do you have other forms of business income?
subquestion: |
  This includes income:
  
  * From employment by someone else,
  * From self-employment as a sole proprietorship or independent contractor 
  * As a member of a partnership,
  * As a member of a limited liability company (LLC) not treated as a corporation,
  * From a closely-held corporation, and
  * From any other flow-through business entities.
fields:
  - no label: employment.there_are_any
    datatype: yesnoradio
---
code: |
  employment[i].type
  employment[i].name.text
  if employment[i].type == "employed":
    employment[i].frequency
  else:
    employment[i].income_last_year
    employment[i].perks
  employment[i].complete = True 
---
id: other employment
question: |
  Do you have any other employers or business to include?
subquestion: |
  So far you have told us about ${comma_and_list(employment.complete_elements())}.
fields:
  - no label: employment.there_is_another
    datatype: yesnoradio
---
id: employment info
question: |
  What is your ${ordinal(i)} source of employment or business income? 
fields:
  - "What type of employment or income is this?": employment[i].type
    datatype: radio
    choices:
			- Employed by someone else: employed
      - Own business as a sole proprietorship: own
      - Independent contractor: contractor
      - Member of a partnership: partnership
      - As a member of a limited liability company (LLC) not treated as a corporation: llc
			- A closely-held corporation: corp
			- Other flow-through business entity: other_entity
---
id: employer or business name 
question: |
  Employer or business info
fields: 
  - Employer or business name: employment[i].name.text
  - Street address: employment[i].address.address
    address autocomplete: True
  - Address line 2: employment[i].address.unit
    required: False
  - City: employment[i].address.city
  - State: employment[i].address.state
    code: |
      states_list()
  - ZIP code: employment[i].address.zip
---
id: employer pay 
question: |
  Details about pay from ${ employment[i].name.text }
fields:
  - Pay period: employment[i].frequency
    datatype: radio
    choices:
      - Once a month: 12
      - Twice a month: 24
      - Every two weeks: 26
      - Once a week: 52
  - "Are you paid in cash?": employment[i].cash_payment
    datatype: yesnoradio
  - "Gross income in ${ current_datetime().year }:": employment[i].gross_income
    datatype: currency
  - "Gross income from January 1, ${ current_datetime().year } through :": employment[i].gross_date
    datatype: date
    max: ${ today().format("MM-dd-yyyy") }
    default: |
      ${ today().format("MM-dd-yyyy") }
---
id: business income 
question: |
  Income and expenses for ${ employment[i].name.text }
subquestion: |
  **Note:** You must attach complete business federal and state business tax returns for the most recent tax year.
fields:
  - Gross business receipts for last year (${ current_datetime().year - 1 }): employment[i].income_last_year
    datatype: currency
  - Gross business receipts so far this year (${ current_datetime().year }): employment[i].income_current_year
    datatype: currency
  - note: |
      What were your necessary business expenses last year, and so far this year?
  - Last year (${ current_datetime().year - 1 }): employment[i].expenses_last_year
    datatype: currency  
  - So far this year (${ current_datetime().year }): employment[i].expenses_current_year
    datatype: currency
---
id: business perks
question: |
  Do you receive any of these perks from ${ employment[i].name.text }?
fields:
  - Perks (Check all that apply): employment[i].perks
    datatype: checkboxes
    choices: 
      - Reimbursed meals: meals
      - Company car: car
      - Free housing or housing allowance: housing
      - Other: other
    none of the above: False
  - Briefly describe other perk(s): employment[i].other_perks
    js show if: |
      val("employment[i].perks['other']")
---
id: filed taxes
question: |
  Did you file taxes for ${ current_datetime().year - 1 }?
fields:
  - no label: taxes_filed
    datatype: yesnoradio
---
id: filed taxes two years
question: |
  Did you file taxes for ${ current_datetime().year - 2 }?
fields:
  - no label: taxes_filed_two_years
    datatype: yesnoradio
---
id: filed taxes detail
question: |
  Tax return details for the year ${ current_datetime().year-1 }
fields:
  - What was your tax filing status last year?: taxes_filed_status
    datatype: radio
    choices: 
      - Married (Joint): joint
      - Married (Separate): separate
      - Single: single
      - Head of Household: household
  - How did you claim deductions last year?: deduction_type
    datatype: radio
    choices: 
      - the standardized deduction: yes
      - itemized deductions: no
  - Gross income (before taxes and deductions) last year: gross_income_last_year
    datatype: currency
  - Did you claim any of these? (check any that apply): tax_claimed
    datatype: checkboxes
    choices: 
      - Child tax credit: child_credit
      - Additional child tax credit: additional
      - Credit for other dependents: dependents
      - Earned Income Credit: eic
      - Dependent care credit: care
---
id: federal state taxes last year
question: |
  Tax return details for ${ current_datetime().year-1 }
fields: 
  - Federal: taxes[0].federal_tax
    datatype: radio
    choices:
      - Refund: refund
      - Amount Owed: owed
  - What was your refund: taxes[0].federal_refund
    datatype: currency
    min: 0
    show if:
      variable: taxes[0].federal_tax
      is: refund
  - How much did you owe?: taxes[0].federal_owed
    datatype: currency
    min: 0
    show if:
      variable: taxes[0].federal_tax
      is: owed
  - State: taxes[0].state_tax
    datatype: radio
    choices:
      - Refund: refund
      - Amount Owed: owed
  - What was your refund: taxes[0].state_refund
    datatype: currency
    min: 0
    show if:
      variable: taxes[0].state_tax
      is: refund
  - How much did you owe?: taxes[0].state_owed
    datatype: currency
    min: 0
    show if:
      variable: taxes[0].state_tax
      is: owed
---
id: federal state taxes two years ago
question: |
  Tax return details for ${ current_datetime().year-2 }
fields: 
  - Federal: taxes[1].federal_tax
    datatype: radio
    choices:
      - Refund: refund
      - Amount Owed: owed
  - What was your refund: taxes[1].federal_refund
    datatype: currency
    min: 0
    show if:
      variable: taxes[1].federal_tax
      is: refund
  - How much did you owe?: taxes[1].federal_owed
    datatype: currency
    min: 0
    show if:
      variable: taxes[1].federal_tax
      is: owed
  - State: taxes[1].state_tax
    datatype: radio
    choices:
      - Refund: refund
      - Amount Owed: owed
  - What was your refund: taxes[1].state_refund
    datatype: currency
    min: 0
    show if:
      variable: taxes[1].state_tax
      is: refund
  - How much did you owe?: taxes[1].state_owed
    datatype: currency
    min: 0
    show if:
      variable: taxes[1].state_tax
      is: owed
---
id: monthly income intro
continue button field: monthly_income_intro
question: |
  Do you have any monthly income from any of the following categories?
subquestion: |
  Do you receive monthly income from any of the sources below? 
  For each type of income, enter the gross monthly amount (before taxes 
  and deductions) that you receive. 
  
  All fields are optional and can be left blank if not applicable.
---
id: monthly employment income 
question: |
  Monthly employment income
fields:
  - "Regular employment/self-employment earnings from all jobs (salary, wages, base pay, etc.)": users[0].regular_pay_question
    datatype: yesnowide
  - Amount: users[0].regular_pay
    datatype: currency
    min: 0
    show if: users[0].regular_pay_question
  - Overtime: users[0].overtime_pay_question
    datatype: yesnowide
  - Amount: users[0].overtime_pay
    datatype: currency
    min: 0
    show if: users[0].overtime_pay_question
  - Commission: users[0].commission_pay_question
    datatype: yesnowide
  - Amount: users[0].commission_pay
    datatype: currency
    min: 0
    show if: users[0].commission_pay_question
  - Tips and gratuities: users[0].tips_question
    datatype: yesnowide
  - Amount: users[0].tips
    datatype: currency
    min: 0
    show if: users[0].tips_question
  - Bonus: users[0].bonus_question
    datatype: yesnowide
  - Bonus: users[0].bonus
    datatype: currency
    min: 0
    show if: users[0].bonus_question
---
id: monthly investment income 
question: |
  Monthly investment income
fields:
  - Pension: users[0].pension_question
    datatype: yesnowide
  - Amount: users[0].pension
    datatype: currency
    min: 0
    show if: users[0].pension_question
  - Annuity: users[0].annuity_question
    datatype: yesnowide
  - Amount: users[0].annuity
    datatype: currency
    min: 0
    show if: users[0].annuity_question
  - Interest income: users[0].interest_question
    datatype: yesnowide
  - Amount: users[0].interest
    datatype: currency
    min: 0
    show if: users[0].interest_question
  - Dividend income: users[0].dividend_question
    datatype: yesnowide
  - Amount: users[0].dividend
    datatype: currency
    min: 0
    show if: users[0].dividend_question
  - Trust income: users[0].trust_question
    datatype: yesnowide
  - Amount: users[0].trust
    datatype: currency
    min: 0
    show if: users[0].trust_question
  - Investment income: users[0].investment_question
    datatype: yesnowide
  - Amount: users[0].investment
    datatype: currency
    min: 0
    show if: users[0].investment_question
---
id: monthly benefits
question: |
  Monthly benefits
fields:
  - Social security retirement: users[0].social_retirement_question
    datatype: yesnowide
  - Amount: users[0].social_retirement
    datatype: currency
    min: 0
    show if: users[0].social_retirement_question
  - Social Security Disability: users[0].social_disability_question
    datatype: yesnowide
  - Amount: users[0].social_disability
    datatype: currency
    min: 0
    show if: users[0].social_disability_question
  - Social security income (SSI - not included as income for child support purposes): users[0].social_income_question
    datatype: yesnowide
  - Amount: users[0].social_income
    datatype: currency
    min: 0
    show if: users[0].social_income_question
  - Unemployment: users[0].unemployment_benefits_question
    datatype: yesnowide
  - Amount: users[0].unemployment_benefits
    datatype: currency
    min: 0
    show if: users[0].unemployment_benefits_question
  - Disability payment (not Social Security): users[0].disability_benefits_question
    datatype: yesnowide
  - Amount: users[0].disability_benefits
    datatype: currency
    min: 0
    show if: users[0].disability_benefits_question
  - Workers' compensation: users[0].workers_comp_benefits_question
    datatype: yesnowide
  - Amount: users[0].workers_comp_benefits
    datatype: currency
    min: 0
    show if: users[0].workers_comp_benefits_question
  - TANF and SNAP (not included as income for child support purposes): users[0].child_benefits_question
    datatype: yesnowide
  - Amount: users[0].child_benefits
    datatype: currency
    min: 0
    show if: users[0].child_benefits_question
  - Military allowances: users[0].military_allowances_question
    datatype: yesnowide
  - Amount: users[0].military_allowances
    datatype: currency
    min: 0
    show if: users[0].military_allowances_question
---
id: other monthly business income
question: |
  Other monthly business income
fields:
  - Rental income: users[0].rental_income_question
    datatype: yesnowide
  - Amount: users[0].rental_income
    datatype: currency
    min: 0
    show if: users[0].rental_income_question
  - Partnership income: users[0].partnership_income_question
    datatype: yesnowide
  - Amount: users[0].partnership_income
    datatype: currency
    min: 0
    show if: users[0].partnership_income_question
  - Distributions and draws: users[0].distributions_draws_question
    datatype: yesnowide
  - Amount: users[0].distributions_draws
    datatype: currency
    min: 0
    show if: users[0].distributions_draws_question
  - Royalty income: users[0].royalty_income_question
    datatype: yesnowide
  - Amount: users[0].royalty_income
    datatype: currency
    min: 0
    show if: users[0].royalty_income_question
---
id: monthly maintenance and support 
question: |
  Monthly maintenance and support
fields:
  - "Maintenance received under an order entered in this case or another case that you must report as income on your tax return": users[0].maintenance_current_question
    datatype: yesnowide
  - Amount: users[0].maintenance_current
    datatype: currency
    min: 0
    show if: users[0].maintenance_current_question
  - "Maintenance received under an order entered in this case or another case that you do not have to report as income on your tax return": users[0].maintenance_alternate_question
    datatype: yesnowide
  - Amount: users[0].maintenance_alternate
    datatype: currency
    min: 0
    show if: users[0].maintenance_alternate_question
  - "Child support for children of this relationship (if this support is paid by the other parent, it does not affect the support calculation)": users[0].child_support_current_question
    datatype: yesnowide
  - Amount: users[0].child_support_current
    datatype: currency
    min: 0
    show if: users[0].child_support_current_question
  - "Social Security payment made to the children of this relationship based on your disability or retirement": users[0].social_security_current_question
    datatype: yesnowide
  - Amount: users[0].social_security_current
    datatype: currency
    min: 0
    show if: users[0].social_security_current_question
---
id: monthly gifts other income
question: |
  Monthly gifts and other income
fields:
  - Gifts of money: users[0].gifts_money_question
    datatype: yesnowide
  - Amount: users[0].gifts_money
    datatype: currency
    min: 0
    show if: users[0].gifts_money_question
  - Do you receive other types of income?: users[0].other_income_question
    datatype: yesnowide
  - "What is the source of the other income? (list all sources)": users[0].other_income_description
    maxlength: 60
    show if: users[0].other_income_question
  - Total monthly income from other sources?: users[0].other_income
    datatype: currency
    min: 0
    show if: users[0].other_income_question
---
depends on:
  - users[0].regular_pay
  - users[0].overtime_pay
  - users[0].commission_pay
  - users[0].tips
  - users[0].bonus
  - users[0].pension
  - users[0].annuity
  - users[0].interest
  - users[0].dividend
  - users[0].trust
  - users[0].investment 
  - users[0].social_retirement
  - users[0].social_disability
  - users[0].social_income
  - users[0].unemployment_benefits
  - users[0].disability_benefits
  - users[0].workers_comp_benefits
  - users[0].child_benefits
  - users[0].military_allowances
  - users[0].rental_income
  - users[0].partnership_income
  - users[0].distributions_draws
  - users[0].royalty_income 
  - users[0].maintenance_current
  - users[0].maintenance_alternate
  - users[0].child_support_current
  - users[0].social_security_current
  - users[0].gifts_money 
  - users[0].other_income
code: |
  total_monthly_employment_income = sum_if_defined(
    'users[0].regular_pay',
    'users[0].overtime_pay',
    'users[0].commission_pay',
    'users[0].tips',
    'users[0].bonus')
  total_monthly_investment_income = sum_if_defined(
    'users[0].pension',
    'users[0].annuity',
    'users[0].interest',
    'users[0].dividend',
    'users[0].trust',
    'users[0].investment')

  total_monthly_benefits_income = sum_if_defined(
    'users[0].social_retirement',
    'users[0].social_disability',
    'users[0].social_income',
    'users[0].unemployment_benefits',
    'users[0].disability_benefits',
    'users[0].workers_comp_benefits',
    'users[0].child_benefits',
    'users[0].military_allowances')

  total_other_monthly_business_income = sum_if_defined(
    'users[0].rental_income',
    'users[0].partnership_income',
    'users[0].distributions_draws',
    'users[0].royalty_income')

  total_monthly_maintenance_support_income = sum_if_defined(
    'users[0].maintenance_current',
    'users[0].maintenance_alternate',
    'users[0].child_support_current',
    'users[0].social_security_current')

  total_monthly_gifts_other_income = sum_if_defined(
    'users[0].gifts_money',
    'users[0].other_income')

  total_gross_monthly_income = sum_if_defined(
    'users[0].regular_pay',
    'users[0].overtime_pay',
    'users[0].commission_pay',
    'users[0].tips',
    'users[0].bonus',
    'users[0].pension',
    'users[0].annuity',
    'users[0].interest',
    'users[0].dividend',
    'users[0].trust',
    'users[0].investment',
    'users[0].social_retirement',
    'users[0].social_disability',
    'users[0].social_income',
    'users[0].unemployment_benefits',
    'users[0].disability_benefits',
    'users[0].workers_comp_benefits',
    'users[0].child_benefits',
    'users[0].military_allowances',
    'users[0].rental_income',
    'users[0].partnership_income',
    'users[0].distributions_draws',
    'users[0].royalty_income',
    'users[0].maintenance_current',
    'users[0].maintenance_alternate',
    'users[0].child_support_current',
    'users[0].social_security_current',
    'users[0].gifts_money',
    'users[0].other_income')
---
########### EXPENSES ###########
id: expenses intro 
continue button field: expenses_intro
question: |
  Evaluate your monthly expenses.
subquestion: |
  Provide optional (you can leave blank) monthly expenses from the following categories:
  
  * Monthly deductions on your payroll,
  * Monthly maintenance and child support,
  * Monthly household living expenses,
  * Monthly transportation expenses, and 
  * Monthly personal household expenses including out of pocket medical and life insurance.
---
id: monthly deduction expenses
question: |
  What monthly deductions from income do you receive?
subquestion: |
  Monthly deductions are payments you must make every month. All fields are optional.
fields:
  - Federal income tax: users[0].deductions_federal_question
    datatype: yesnowide
  - Amount: users[0].deductions_federal
    datatype: currency
    min: 0
    show if: users[0].deductions_federal_question
  - State income tax: users[0].deductions_state_question
    datatype: yesnowide
  - Amount: users[0].deductions_state
    datatype: currency
    min: 0
    show if: users[0].deductions_state_question
  - FICA (or Social Security equivalent, such as Self-employment tax): users[0].deductions_FICA_question
    datatype: yesnowide
  - Amount: users[0].deductions_FICA
    datatype: currency
    min: 0
    show if: users[0].deductions_FICA_question
  - Medicare tax: users[0].deductions_medicare_question
    datatype: yesnowide
  - Amount: users[0].deductions_medicare
    datatype: currency
    min: 0
    show if: users[0].deductions_medicare_question
  - Mandatory retirement contributions: users[0].deductions_retirement_question
    datatype: yesnowide
  - note: |
      (by law or condition of employment, but only if no FICA or Social Security equivalent) 
    show if: users[0].deductions_retirement_question
  - Amount: users[0].deductions_retirement
    datatype: currency
    min: 0
    show if: users[0].deductions_retirement_question
---
id: monthly maintenance expenses
question: |
  What monthly maintenance or child support payments do you make? 
fields:
  - "Maintenance being paid or payable to the other party by you under a court order **in this case**": users[0].maintenance_paid_court_question
    datatype: yesnowide
  - Amount: users[0].maintenance_paid_court
    datatype: currency
    min: 0
    show if: users[0].maintenance_paid_court_question
  - "Maintenance being paid under a court order to a former spouse by you, which is **tax deductible** to you": users[0].maintenance_paid_no_tax_question
    datatype: yesnowide
  - Amount: users[0].maintenance_paid_no_tax
    datatype: currency
    min: 0
    show if: users[0].maintenance_paid_no_tax_question
  - "Maintenance being paid under a court order to a former spouse by you, which is **not tax deductible** to you": users[0].maintenance_paid_taxed_question
    datatype: yesnowide
  - Amount: users[0].maintenance_paid_taxed
    datatype: currency
    min: 0
    show if: users[0].maintenance_paid_taxed_question
---
id: monthly child support expenses
question: |
  Do you make any monthly child support payments for any children to any other person?
fields:
  - Court-ordered child support being paid for the children of this relationship: users[0].child_support_1_question
    datatype: yesnowide
  - Amount: users[0].child_support_1
    datatype: currency
    min: 0
    show if: users[0].child_support_1_question
  - Child support being paid under a court order for children not shared with the other party and who are not part of this case: users[0].child_support_2_question
    datatype: yesnowide
  - Amount: users[0].child_support_2
    datatype: currency
    min: 0
    show if: users[0].child_support_2_question
  - Child support being paid, but there is no court order, for children not shared with the other party and who are not part of this case and: users[0].child_support_3_question
    datatype: yesnowide
  - note: |
      (1) that are presumed to be yours, 

      (2) for whom there is a voluntary acknowledgment of paternity (VAP) signed by you and the other parent, OR 

      (3) for whom there is a court order naming you as a parent, but there is no support order
    show if: users[0].child_support_3_question
  - Amount: users[0].child_support_3
    datatype: currency
    min: 0
    show if: users[0].child_support_3_question
---
id: monthly housing expenses
question: |
  Monthly housing expenses:
fields:
  - Mortgage or rent: users[0].living_house_payment_question
    datatype: yesnowide
  - Amount: users[0].living_house_payment
    datatype: currency
    min: 0
    show if: users[0].living_house_payment_question
  - Home equity (HELOC) and second mortgage: users[0].living_heloc_question
    datatype: yesnowide
  - Amount: users[0].living_heloc
    datatype: currency
    min: 0
    show if: users[0].living_heloc_question
  - Real estate taxes: users[0].living_property_taxes_question
    datatype: yesnowide
  - Amount: users[0].living_property_taxes
    datatype: currency
    min: 0
    show if: users[0].living_property_taxes_question
  - Homeowners or condo association dues and assessments: users[0].living_hoa_question
    datatype: yesnowide
  - Amount: users[0].living_hoa
    datatype: currency
    min: 0
    show if: users[0].living_hoa_question
  - Homeowners or renters insurance: users[0].living_insurance_question
    datatype: yesnowide
  - Amount: users[0].living_insurance
    datatype: currency
    min: 0
    show if: users[0].living_insurance_question
---
id: monthly utility expenses
question: |
  Monthly household utility expenses:
fields:
  - Gas: users[0].living_gas_question
    datatype: yesnowide
  - Amount: users[0].living_gas
    datatype: currency
    min: 0
    show if:  users[0].living_gas_question
  - Electric: users[0].living_power_question
    datatype: yesnowide
  - Amount: users[0].living_power
    datatype: currency
    min: 0
    show if: users[0].living_power_question
  - Telephone: users[0].living_phone_question
    datatype: yesnowide
  - Amount: users[0].living_phone
    datatype: currency
    min: 0
    show if: users[0].living_phone_question
  - Cable or satellite TV: users[0].living_cable_question
    datatype: yesnowide
  - Amount: users[0].living_cable
    datatype: currency
    min: 0
    show if: users[0].living_cable_question
  - Internet: users[0].living_internet_question
    datatype: yesnowide
  - Amount: users[0].living_internet
    datatype: currency
    min: 0
    show if: users[0].living_internet_question
  - Water and sewer: users[0].living_water_question
    datatype: yesnowide
  - Amount: users[0].living_water
    datatype: currency
    min: 0
    show if: users[0].living_water_question
  - Garbage removal: users[0].living_trash_question
    datatype: yesnowide
  - Amount: users[0].living_trash
    datatype: currency
    min: 0
    show if: users[0].living_trash_question
---
id: monthly living expenses
question: |
  Monthly living expenses:
fields:
  - Laundry and dry cleaning: users[0].living_laundry_question
    datatype: yesnowide
  - Amount: users[0].living_laundry
    datatype: currency
    min: 0
    show if: users[0].living_laundry_question
  - House cleaning service: users[0].living_cleaner_question
    datatype: yesnowide
  - Amount: users[0].living_cleaner
    datatype: currency
    min: 0
    show if: users[0].living_cleaner_question
  - Necessary repairs and maintenance to my property: users[0].living_repairs_question
    datatype: yesnowide
  - Amount: users[0].living_repairs
    datatype: currency
    min: 0
    show if: users[0].living_repairs_question
  - Pet care: users[0].living_pets_question
    datatype: yesnowide
  - Amount: users[0].living_pets
    datatype: currency
    min: 0
    show if: users[0].living_pets_question
  - Groceries, household supplies, and toiletries: users[0].living_groceries_question
    datatype: yesnowide
  - Amount: users[0].living_groceries
    datatype: currency
    min: 0
    show if: users[0].living_groceries_question
---
id: monthly other expenses
question: |
  Other (non transportation):
fields:
  - Other monthly household living expenses: users[0].living_other_question
    datatype: yesnowide
  - "What are the other monthly household living expenses?": users[0].living_other_description
    maxlength: 60
    show if: users[0].living_other_question
  - Total monthly other expenses?: users[0].living_other
    datatype: currency
    min: 0
    show if: users[0].living_other_question
---
id: monthly transport expenses
question: |
  What monthly transportation expenses do you have?
fields:
  - Car payment: users[0].transport_payment_question
    datatype: yesnowide
  - Amount: users[0].transport_payment
    datatype: currency
    min: 0
    show if: users[0].transport_payment_question
  - Repairs and maintenance: users[0].transport_maintenance_question
    datatype: yesnowide
  - Amount: users[0].transport_maintenance
    datatype: currency
    min: 0
    show if: users[0].transport_maintenance_question
  - Insurance, license, registration, and city stickers: users[0].transport_insurance_question
    datatype: yesnowide
  - Amount: users[0].transport_insurance
    datatype: currency
    min: 0
    show if: users[0].transport_insurance_question
  - Gasoline/Charging: users[0].transport_fuel_question
    datatype: yesnowide
  - Amount: users[0].transport_fuel
    datatype: currency
    min: 0
    show if: users[0].transport_fuel_question
  - Taxi, ride-share, bus, and train: users[0].transport_public_question
    datatype: yesnowide
  - Amount: users[0].transport_public
    datatype: currency
    min: 0
    show if: users[0].transport_public_question
  - Parking: users[0].transport_parking_question
    datatype: yesnowide
  - Amount: users[0].transport_parking
    datatype: currency
    min: 0
    show if: users[0].transport_parking_question
---
id: monthly other transport expenses
question: |
  Do you have other transportation expenses?
fields:
  - Other monthly transportation expenses: users[0].transport_other_question
    datatype: yesnowide
  - "What are the other monthly transportation expenses?": users[0].transport_other_description
    maxlength: 60
    show if: users[0].transport_other_question
  - Total monthly other transportation expenses?: users[0].transport_other
    datatype: currency
    min: 0
    show if: users[0].transport_other_question
---
id: monthly personal medical expenses
question: |
  What monthly personal medical expenses do you have?
fields:
  - Doctor visits: users[0].personal_doctor_question
    datatype: yesnowide
  - Amount: users[0].personal_doctor
    datatype: currency
    min: 0
    show if: users[0].personal_doctor_question
  - Therapy and counseling: users[0].personal_therapy_question
    datatype: yesnowide
  - Amount: users[0].personal_therapy
    datatype: currency
    min: 0
    show if: users[0].personal_therapy_question
  - Dental and orthodontia: users[0].personal_dental_question
    datatype: yesnowide
  - Amount: users[0].personal_dental
    datatype: currency
    min: 0
    show if: users[0].personal_dental_question
  - Optical: users[0].personal_vision_question
    datatype: yesnowide
  - Amount: users[0].personal_vision
    datatype: currency
    min: 0
    show if: users[0].personal_vision_question
  - Medicine and prescriptions: users[0].personal_medications_question
    datatype: yesnowide
  - Amount: users[0].personal_medications
    datatype: currency
    min: 0
    show if: users[0].personal_medications_question
---
id: monthly personal insurance expenses
question: |
  Life insurance (not required by law to secure child support) 
fields:
  - Life (term): users[0].personal_life_term_question
    datatype: yesnowide
  - Amount: users[0].personal_life_term
    datatype: currency
    min: 0
    show if: users[0].personal_life_term_question
  - Life (whole or annuity): users[0].personal_life_whole_question
    datatype: yesnowide
  - Amount: users[0].personal_life_whole
    datatype: currency
    min: 0
    show if: users[0].personal_life_whole_question
---
id: monthly personal expenses
question: |
  Personal expenses 
fields:
  - Clothing: users[0].personal_clothing_question
    datatype: yesnowide
  - Amount: users[0].personal_clothing  
    datatype: currency
    min: 0
    show if: users[0].personal_clothing_question 
  - Grooming (hair, nails, spa, etc.): users[0].personal_stylist_question
    datatype: yesnowide
  - Amount: users[0].personal_stylist  
    datatype: currency
    min: 0
    show if: users[0].personal_stylist_question 
  - Gym & Club membership dues: users[0].personal_memberships_question
    datatype: yesnowide
  - Amount: users[0].personal_memberships  
    datatype: currency
    min: 0
    show if: users[0].personal_memberships_question 
---
id: monthly personal entertainment expenses
question: |
  Entertainment and monthly subscriptions
fields:
  - Entertainment, dining out, and hobbies: users[0].personal_entertainment_question
    datatype: yesnowide
  - Amount: users[0].personal_entertainment  
    datatype: currency
    min: 0
    show if: users[0].personal_entertainment_question 
  - Newspapers, magazines, and subscriptions: users[0].personal_subscriptions_question
    datatype: yesnowide
  - Amount: users[0].personal_subscriptions  
    datatype: currency
    min: 0
    show if: users[0].personal_subscriptions_question 
---
id: monthly personal gifts expenses
question: |
  Gifts and donations
fields:
  - Gifts: users[0].personal_gifts_question
    datatype: yesnowide
  - Amount: users[0].personal_gifts  
    datatype: currency
    min: 0
    show if: users[0].personal_gifts_question 
  - Donations (political, religious, charity, etc.): users[0].personal_donations_question
    datatype: yesnowide
  - Amount: users[0].personal_donations  
    datatype: currency
    min: 0
    show if: users[0].personal_donations_question 
---
id: monthly personal vacation expenses
question: |
  Vacation expenses
fields:
  - Vacations: users[0].personal_vacations_question
    datatype: yesnowide
  - Amount: users[0].personal_vacations  
    datatype: currency
    min: 0
    show if: users[0].personal_vacations_question
--- 
id: monthly personal dues expenses
question: |
  Dues and professional fees
fields:
  - Mandatory or voluntary union, trade, or professional association dues: users[0].personal_associations_question
    datatype: yesnowide
  - Amount: users[0].personal_associations  
    datatype: currency
    min: 0
    show if: users[0].personal_associations_question 
  - Professional fees (accountants, tax preparers, attorneys, etc.): users[0].peronsal_professional_question
    datatype: yesnowide
  - Amount: users[0].peronsal_professional  
    datatype: currency
    min: 0
    show if: users[0].peronsal_professional_question 
---
id: monthly other personal expenses
question: |
  Other personal expenses:
fields:
  - Do you have any other personal expenses not listed above?: users[0].personal_other_question
    datatype: yesnowide
  - "What are the other monthly personal expenses?": users[0].personal_other_description
    maxlength: 60
    show if: users[0].personal_other_question
  - Total monthly other personal expenses?: users[0].personal_other
    datatype: currency
    min: 0
    show if: users[0].personal_other_question
---
id: monthly children expenses
question: |
  Do you have any minor and/or dependent children expenses?
fields:
  - no label: users[0].children_expenses_question
    datatype: yesnoradio
---
id: monthly children personal expenses
question: |
  Personal expenses:
fields:
  - Clothing: users[0].children_clothing_question
    datatype: yesnowide
  - Amount: users[0].children_clothing  
    datatype: currency
    min: 0
    show if: users[0].children_clothing_question 
  - Grooming (hair, nails, spa, etc.): users[0].children_grooming_question
    datatype: yesnowide
  - Amount: users[0].children_grooming  
    datatype: currency
    min: 0
    show if: users[0].children_grooming_question 
---
id: monthly children education expenses
question: |
  Education expenses:
fields:
  - Tuition: users[0].children_tuition_question
    datatype: yesnowide
  - Amount: users[0].children_tuition
    datatype: currency
    min: 0
    show if: users[0].children_tuition_question
  - Books, fees, and supplies: users[0].children_books_question
    datatype: yesnowide
  - Amount: users[0].children_books
    datatype: currency
    min: 0
    show if: users[0].children_books_question 
  - School lunch: users[0].children_school_lunch_question
    datatype: yesnowide
  - Amount: users[0].children_school_lunch
    datatype: currency
    min: 0
    show if: users[0].children_school_lunch_question 
  - Transportation: users[0].children_transportation_question
    datatype: yesnowide
  - Amount: users[0].children_transportation
    datatype: currency
    min: 0
    show if: users[0].children_transportation_question 
  - School-sponsored trips and special events: users[0].children_school_events_question
    datatype: yesnowide
  - Amount: users[0].children_school_events
    datatype: currency
    min: 0
    show if: users[0].children_school_events_question 
  - Uniforms: users[0].children_school_uniforms_question
    datatype: yesnowide
  - Amount: users[0].children_school_uniforms
    datatype: currency
    min: 0
    show if: users[0].children_school_uniforms_question 
  - Before and after-school care: users[0].children_after_school_question
    datatype: yesnowide
  - Amount: users[0].children_after_school
    datatype: currency
    min: 0
    show if: users[0].children_after_school_question 
  - Tutoring and summer school: users[0].children_tutor_question
    datatype: yesnowide
  - Amount: users[0].children_tutor
    datatype: currency
    min: 0
    show if: users[0].children_tutor_question 
---
id: monthly children medical expenses
question: |
  Medical (out-of-pocket expenses) 
fields:
  - Doctor visits: users[0].children_doctor_question
    datatype: yesnowide
  - Amount: users[0].children_doctor
    datatype: currency
    min: 0
    show if: users[0].children_doctor_question 
  - Therapy and counseling: users[0].children_therapy_question
    datatype: yesnowide
  - Amount: users[0].children_therapy
    datatype: currency
    min: 0
    show if: users[0].children_therapy_question 
  - Dental and orthodontia: users[0].children_dental_question 
    datatype: yesnowide
  - Amount: users[0].children_dental
    datatype: currency
    min: 0
    show if: users[0].children_dental_question 
  - Optical: users[0].children_vision_question
    datatype: yesnowide
  - Amount: users[0].children_vision
    datatype: currency
    min: 0
    show if: users[0].children_vision_question 
  - Medicine: users[0].children_medications_question
    datatype: yesnowide
  - Amount: users[0].children_medications
    datatype: currency
    min: 0
    show if: users[0].children_medications_question 
---
id: monthly children additional expenses
question: |
  Additional monthly children expenses
fields:
  - Allowance: users[0].children_allowance_question 
    datatype: yesnowide
  - Amount: users[0].children_allowance
    datatype: currency
    min: 0
    show if: users[0].children_allowance_question 
  - Childcare and sitters: users[0].children_childcare_question 
    datatype: yesnowide
  - Amount: users[0].children_childcare
    datatype: currency
    min: 0
    show if: users[0].children_childcare_question 
  - Extracurricular activities and sports (equipment, uniforms, etc.): users[0].children_sports_question
    datatype: yesnowide
  - Amount: users[0].children_sports
    datatype: currency
    min: 0
    show if: users[0].children_sports_question 
  - Summer and school-break camps: users[0].children_camps_question 
    datatype: yesnowide
  - Amount: users[0].children_camps
    datatype: currency
    min: 0
    show if: users[0].children_camps_question 
---
id: monthly children vacation expenses
question: |
  Vacations and entertainment (children only)
fields:
  - Vacations (children only): users[0].children_vacations_question 
    datatype: yesnowide
  - Amount: users[0].children_vacations
    datatype: currency
    min: 0
    show if: users[0].children_vacations_question 
  - Entertainment, dining out, and hobbies (children only): users[0].children_entertainment_question
    datatype: yesnowide
  - Amount: users[0].children_entertainment
    datatype: currency
    min: 0
    show if: users[0].children_entertainment_question 
  - Gifts children give to others: users[0].children_party_gifts_question 
    datatype: yesnowide
  - Amount: users[0].children_party_gifts
    datatype: currency
    min: 0
    show if: users[0].children_party_gifts_question 
---
id: monthly children other expenses
question: |
  Other monthly expenses for children:
fields:
  - Do you have other expenses not mentioned above?: users[0].children_other_question
    datatype: yesnoradio
  - "What are the other monthly minor and dependent children expenses?": users[0].children_other_description
    maxlength: 60
    show if: users[0].children_other_question
  - Total monthly other expenses for the children?: users[0].children_other
    datatype: currency
    min: 0
    show if: users[0].children_other_question
---
depends on:
  - users[0].deductions_federal
  - users[0].deductions_state
  - users[0].deductions_FICA
  - users[0].deductions_medicare
  - users[0].deductions_retirement
  - users[0].maintenance_paid_court
  - users[0].maintenance_paid_no_tax
  - users[0].maintenance_paid_taxed
  - users[0].child_support_1
  - users[0].child_support_2
  - users[0].child_support_3
  # Section 12 a-d
  - users[0].living_house_payment
  - users[0].living_heloc
  - users[0].living_property_taxes
  - users[0].living_hoa
  - users[0].living_insurance
  - users[0].living_gas
  - users[0].living_power
  - users[0].living_phone
  - users[0].living_cable
  - users[0].living_internet
  - users[0].living_water
  - users[0].living_trash
  - users[0].living_laundry
  - users[0].living_cleaner
  - users[0].living_repairs
  - users[0].living_pets
  - users[0].living_groceries
  - users[0].living_other
  - users[0].transport_payment
  - users[0].transport_maintenance
  - users[0].transport_insurance
  - users[0].transport_fuel
  - users[0].transport_public
  - users[0].transport_parking
  - users[0].transport_other
  - users[0].personal_doctor
  - users[0].personal_therapy
  - users[0].personal_dental
  - users[0].personal_vision
  - users[0].personal_medications
  - users[0].personal_life_term
  - users[0].personal_life_whole
  - users[0].personal_clothing
  - users[0].personal_stylist
  - users[0].personal_memberships
  - users[0].personal_subscriptions
  - users[0].personal_entertainment
  - users[0].personal_gifts
  - users[0].personal_donations
  - users[0].personal_vacations
  - users[0].personal_associations
  - users[0].peronsal_professional
  - users[0].personal_other
  - users[0].children_clothing
  - users[0].children_grooming
  - users[0].children_tuition
  - users[0].children_books
  - users[0].children_school_lunch
  - users[0].children_transportation
  - users[0].children_school_events
  - users[0].children_school_uniforms
  - users[0].children_after_school
  - users[0].children_tutor
  - users[0].children_doctor
  - users[0].children_therapy
  - users[0].children_dental
  - users[0].children_vision
  - users[0].children_medications
  - users[0].children_allowance
  - users[0].children_childcare
  - users[0].children_sports
  - users[0].children_camps
  - users[0].children_vacations
  - users[0].children_entertainment
  - users[0].children_party_gifts
  - users[0].children_other
code: |
  total_monthly_deductions = sum_if_defined(
    'users[0].deductions_federal',
    'users[0].deductions_state',
    'users[0].deductions_FICA',
    'users[0].deductions_medicare',
    'users[0].deductions_retirement')

  total_maintenance_payments = sum_if_defined(
    'users[0].maintenance_paid_court',
    'users[0].maintenance_paid_no_tax',
    'users[0].maintenance_paid_taxed')

  total_child_support_payments = sum_if_defined(
    'users[0].child_support_1',
    'users[0].child_support_2',
    'users[0].child_support_3')

  subtotal_monthly_household_expenses = sum_if_defined(
    'users[0].living_house_payment',
    'users[0].living_heloc',
    'users[0].living_property_taxes',
    'users[0].living_hoa',
    'users[0].living_insurance',
    'users[0].living_gas',
    'users[0].living_power',
    'users[0].living_phone',
    'users[0].living_cable',
    'users[0].living_internet',
    'users[0].living_water',
    'users[0].living_trash',
    'users[0].living_laundry',
    'users[0].living_cleaner',
    'users[0].living_repairs',
    'users[0].living_pets',
    'users[0].living_groceries',
    'users[0].living_other')

  subtotal_monthly_transportation_expenses = sum_if_defined(
    'users[0].transport_payment',
    'users[0].transport_maintenance',
    'users[0].transport_insurance',
    'users[0].transport_fuel',
    'users[0].transport_public',
    'users[0].transport_parking',
    'users[0].transport_other')
  
  subtotal_monthly_personal_expenses = sum_if_defined(
    'users[0].personal_doctor',
    'users[0].personal_therapy',
    'users[0].personal_dental',
    'users[0].personal_vision',
    'users[0].personal_medications',
    'users[0].personal_life_term',
    'users[0].personal_life_whole',
    'users[0].personal_clothing',
    'users[0].personal_stylist',
    'users[0].personal_memberships',
    'users[0].personal_subscriptions',
    'users[0].personal_entertainment',
    'users[0].personal_gifts',
    'users[0].personal_donations',
    'users[0].personal_vacations',
    'users[0].personal_associations',
    'users[0].peronsal_professional',
    'users[0].personal_other')

  subtotal_monthly_children_expenses = sum_if_defined(
    'users[0].children_clothing',
    'users[0].children_grooming',
    'users[0].children_tuition',
    'users[0].children_books',
    'users[0].children_school_lunch',
    'users[0].children_transportation',
    'users[0].children_school_events',
    'users[0].children_school_uniforms',
    'users[0].children_after_school',
    'users[0].children_tutor',
    'users[0].children_doctor',
    'users[0].children_therapy',
    'users[0].children_dental',
    'users[0].children_vision',
    'users[0].children_medications',
    'users[0].children_allowance',
    'users[0].children_childcare',
    'users[0].children_sports',
    'users[0].children_camps',
    'users[0].children_vacations',
    'users[0].children_entertainment',
    'users[0].children_party_gifts',
    'users[0].children_other')

  total_monthly_household_expenses = sum_if_defined(
    'subtotal_monthly_household_expenses',
    'subtotal_monthly_transportation_expenses',
    'subtotal_monthly_personal_expenses',
    'subtotal_monthly_children_expenses')
---
################### FA HEALTH INSURANCE ##################
id: health insurance intro 
question: |
  Do you have health insurance?
subquestion: |
  If theree are children/dependents you should select Yes
fields:
  - no label: insurance.there_are_any
    datatype: yesnoradio
---
code: |
  insurance[i].name.text
  insurance[i].coverage
  insurance[i].monthly_cost
  insurance[i].complete = True 
---
id: additional health insurance
question: |
  Do you have another insurance policy you want to include?
subquestion: |
  So far you have told us about ${comma_and_list(insurance.complete_elements())}.
fields:
  - no label: insurance.there_is_another
    datatype: yesnoradio
---
id: health insurance name
question: |
  Details for the ${ordinal(i)} insurance provider: 
fields:
  - Name of the insurance company: insurance[i].name.text
  - Type of insurance: insurance[i].type
    datatype: radio
    choices:
      - Medical
      - Dental
      - Orthodontic
      - Vision
  - Type of policy: insurance[i].policy
    datatype: radio
    choices:
      - HMO
      - PPO
      - Other
  - Provided through: insurance[i].provider
    datatype: radio
    choices:
      - Employer: employer
      - Private policy: private 
      - Other group policy: group
      - Medicaid/All Kids: public
---
id: health insurance coverage
question: |
  Who is covered under this policy?
fields:
  - Number of people covered: insurance[i].total_covered
    datatype: integer
    min: 1
    max: 20
  - Insurance coverage: insurance[i].coverage
    datatype: radio
    choices:
      - Me: myself
      - My spouse/partner: both
      - children of this relationship: children_current
      - children of this relationship and other children: children_other
  
  - note: |
      List the number of the other children covered and their ages: 
    js show if: |
      val("insurance[i].coverage") == 'children_other'
  - Number of children": insurance[i].other_children_count
    datatype: integer
    min: 0
    js show if: |
      val("insurance[i].coverage") == 'children_other'
  - Ages of children: insurance[i].other_children_age_list
    maxlength: 60
    js show if: |
      val("insurance[i].coverage") == 'children_other'
---
id: health insurance costs 
question: |
  What are the monthly costs for this insurance policy?
fields:
  - Total monthly costs for this insurance: insurance[i].monthly_cost
    datatype: currency
    min: 0
  - This is paid for by: insurance[i].paid
    datatype: radio
    choices:
      - Me: myself 
      - My spouse/partner: partner 
      - Other: other
  - Name the other payment source: insurance[i].other_description
    maxlength: 30
    js show if: |
      val("insurance[i].paid") == 'other'
  - What are the monthly cost for this insurance for covering children?: insurance[i].cost_children 
    datatype: currency
    min: 0
  - What are the monthly cost for this insurance for covering children of this relationship (if known)?: insurance[i].cost_children_current
    datatype: currency
    min: 0
  - What is the individual deductible?: insurance[i].individual_deductible
    datatype: currency
    min: 0
  - What is the family deductible?: insurance[i].family_deductible
    datatype: currency
    min: 0
  - Coinsurance (percentage of costs you pay, e.g. 20%): insurance[i].coinsurance
    datatype: integer
    min: 0
    max: 100
  - Copayment (a flat amount you pay per service, e.g. $20): insurance[i].copayment
    datatype: currency
    min: 0
---
########### FA DEBTS ###########
id: debt intro 
question: |
  Do you have any debts?
subquestion: |
  Debts including credit cards and past due bills. Do not include debt payments previously listed.
fields:
  - no label: has_debts
    datatype: yesnoradio
---
id: additional debts
question: |
  Do you have other ${ debts.number_gathered() } debts you need to include?
subquestion: |
  So far you have told us about:

  ${ debts_table }
fields:
  - Add another?: debts.there_is_another
    datatype: yesnoradio
---
table: debts_table
rows: debts
columns:
  - Creditor: row_item.name.text
  - Describe debt: row_item.description
  - Amount owed: currency(row_item.amount)
  - Monthly payment: currency(row_item.payment)
---
id: debt information
question: |
  Details for the ${ordinal(i)} account: 
fields:
  - Name of the creditor: debts[i].name.text
    maxlength: 25
  - Describe nature of debt: debts[i].description
    maxlength: 25
  - Amount owed: debts[i].amount
    datatype: currency
    min: 0
  - Monthly payment: debts[i].payment
    datatype: currency
    min: 0
---
code: |
  debts[i].name.text
  debts[i].complete = True 
---
code: |
  if debts.number_gathered() > 26:
    debts.there_is_another = False
---
########### FA ASSETS ###########
id: assets intro
continue button field: assets_intro
question: |
  Consider your assets
subquestion: |
  * Cash and Cash Equivalents 
  * Certificates of Deposit
  * Cash, Prepaid Debit Cards and Money Transfer Apps like Venmo, PayPal, Apple pay, 
  * Investment Accounts and Securities
  * Investment/Brokerage Accounts, Mutual Funds, Secured or Unsecured Notes, and 
  * Cryptocurrency
  * Real Estate 
  * Motor Vehicles
  * Business Interests
  * Life Insurance Policies
  * Retirement Benefits and Deferred Compensation
  * Valuable Collectibles 
  * Other Personal Property Valued Over $500
  * Transfer or Sale of Assets or Property Within the Last 2 Years With a FMV of at Least $1,000
---
########### FA ASSETS - 15a Cash/Cash Equivalents ###########
id: cash equivalent intro 
question: |
  Do you have any cash assets?
subquestion: |
  Cash and cash equivalents are checking, savings, money market, and other
  bank or credit union accounts. **Do not list account numbers.** 
fields:
  - no label: has_cash_assets
    datatype: yesnoradio
---
id: additional cash
question: |
  Do you have other cash or cash equivalent accounts to include?
subquestion: |
  So far you have told us about:
  ${ cash_table }
fields:
  - Add another?: cash.there_is_another
    datatype: yesnoradio
---
table: cash_table
rows: cash
columns:
  - Bank name: row_item.name.text
  - Name on account: row_item.account
  - Account type: row_item.type
  - Balance: currency(row_item.balance)
---
id: cash information
question: |
  Details for the ${ordinal(i)} creditor: 
fields:
  - Bank name: cash[i].name.text
  - Name on the account: cash[i].account
  - Account type: cash[i].type
    datatype: radio
    choices:
      - Checking
      - Savings 
      - Money market
      - Credit union
  - Balance: cash[i].balance
    datatype: currency
    min: 0
---
code: |
  cash[i].name.text
  cash[i].complete = True 
---
code: |
  if cash.number_gathered() > 25:
    cash.there_is_another = False
---
########### FA ASSETS - 15a Certificate of Deposit ###########
id: certificate of deposit intro 
question: |
  Do you have any certificates of deposit?
fields:
  - no label: has_cert_deposit
    datatype: yesnoradio
---
id: additional certificate of deposit
question: |
  Do you have other certificates of deposit to include?
subquestion: |
  So far you have told us about:
  ${ cert_deposit_table }
fields:
  - Add another?: cert_deposit.there_is_another
    datatype: yesnoradio
---
table: cert_deposit_table
rows: cert_deposit
columns:
  - Name of bank/institution: row_item.name.text
  - Name on account: row_item.account
  - Balance: currency(row_item.balance)
---
id: certificate of deposit information
question: |
  Details for the ${ordinal(i)} certificate of deposit: 
fields:
  - Name of bank or institution: cert_deposit[i].name.text
  - Name on the account: cert_deposit[i].account
  - Balance: cert_deposit[i].balance
    datatype: currency
    min: 0
---
code: |
  cert_deposit[i].name.text
  cert_deposit[i].complete = True 
---
code: |
  if cert_deposit.number_gathered() > 25:
    cert_deposit.there_is_another = False
---
########### FA ASSETS - 15a money cash/card ###########
id: money cash/card intro 
question: |
  Do you have any money on cash and prepaid debit cards or through
  money transfer mobile apps like Venmo, PayPal, or Apple Pay?
fields:
  - no label: has_money
    datatype: yesnoradio
---
id: additional money cash/card
question: |
  Do you have other cash/card or money app balances to include?
subquestion: |
  So far you have told us about:
  ${ money_table }
fields:
  - Add another?: money.there_is_another
    datatype: yesnoradio
---
table: money_table
rows: money
columns:
  - Location of cash/card: row_item.name.text
  - Held by: row_item.holder
  - Balance: currency(row_item.balance)
---
id: money cash/card information
question: |
  Details for the ${ordinal(i)} cash/card or app: 
fields:
  - Location of cash/card: money[i].name.text
  - Name of holder: money[i].holder
  - Balance: money[i].balance
    datatype: currency
    min: 0
---
code: |
  money[i].name.text
  money[i].complete = True 
---
code: |
  if money.number_gathered() > 25:
    money.there_is_another = False
---
########### FA ASSETS - 15b Investment Accounts ###########
id: investment accounts intro 
question: |
  Do you have any investment accounts and securities?
subquestion: |
  Stocks, bonds, options, employee stock ownership plans 
fields:
  - no label: has_investments
    datatype: yesnoradio
---
id: additional investment accounts
question: |
  Do you have other investment accounts to include?
subquestion: |
  So far you have told us about:
  ${ investments_table }
fields:
  - Add another?: investments.there_is_another
    datatype: yesnoradio
---
table: investments_table
rows: investments
columns:
  - Company name: row_item.name.text
  - "# shares": row_item.shares
  - Account type: row_item.type
  - Owner: row_item.owner
  - FMV: currency(row_item.fmv)
---
id: investments information
question: |
  Details for the ${ordinal(i)} investment account: 
fields:
  - Company name: investments[i].name.text
  - Number of shares: investments[i].shares
  - Type of account: investments[i].type
    datatype: radio
    choices:
      - Stock
      - Bond 
      - Option
      - Employee plan
  - Who is the owner?: investments[i].owner
  - Fair market value: investments[i].fmv
    datatype: currency
    min: 0
---
code: |
  investments[i].name.text
  investments[i].complete = True 
---
code: |
  if investments.number_gathered() > 25:
    investments.there_is_another = False
---
########### FA ASSETS - 15b Securities ###########
id: securities intro 
question: |
  Do you have any investment accounts and securities?
subquestion: |
  Brokerage accounts, mutual funds, secured or unsecured notes, and cryptocurrency
fields:
  - no label: has_securities
    datatype: yesnoradio
---
id: additional securities
question: |
  Do you have other securities to include?
subquestion: |
  So far you have told us about:
  ${ securities_table }
fields:
  - Add another?: securities.there_is_another
    datatype: yesnoradio
---
table: securities_table
rows: securities
columns:
  - Description: row_item.name.text
  - Owner: row_item.owner
  - Balance: currency(row_item.balance)
---
id: securities information
question: |
  Details for the ${ordinal(i)} investment: 
fields:
  - Description of asset: securities[i].name.text
  - Who is the owner?: securities[i].owner
  - Balance: securities[i].balance
    datatype: currency
    min: 0
---
code: |
  securities[i].name.text
  securities[i].complete = True 
---
code: |
  if securities.number_gathered() > 25:
    securities.there_is_another = False
---
########### FA ASSETS - 15c REAL ESTATE ###########
id: real estate intro 
question: |
  Do you have any real estate?
fields:
  - no label: has_real_estate
    datatype: yesnoradio
---
id: additional real estate
question: |
  Do you have other properties to include?
subquestion: |
  So far you have told us about:
  ${ real_estate_table }
fields:
  - Add another?: real_estate.there_is_another
    datatype: yesnoradio
---
table: real_estate_table
rows: real_estate
columns:
  - Address: row_item.address.on_one_line()
  - Name on Title: row_item.name.text
  - FMV: currency(row_item.fmv)
  - Balance: currency(row_item.balance)
---
id: real estate information
question: |
  Details for the ${ordinal(i)} property: 
fields:
  - Street address: real_estate[i].address.address
    address autocomplete: True
  - Address line 2: real_estate[i].address.unit
    required: False
  - City: real_estate[i].address.city
  - State: real_estate[i].address.state
    code: |
      states_list()
  - ZIP code: real_estate[i].address.zip
  - Name on the title: real_estate[i].name.text
  - Fair market value: real_estate[i].fmv
    datatype: currency
    min: 0
  - Balance due: real_estate[i].balance
    datatype: currency
    min: 0
---
code: |
  real_estate[i].address.address
  real_estate[i].complete = True 
---
code: |
  if real_estate.number_gathered() > 25:
    real_estate.there_is_another = False
---
########### FA ASSETS - 15d Motor Vehicle ###########
id: motor vehicle intro 
question: |
  Do you have any motor vehicles?
subquestion: |
  Brokerage accounts, mutual funds, secured or unsecured notes, and cryptocurrency
fields:
  - no label: has_motor_vehicle
    datatype: yesnoradio
---
id: additional motor vehicle
question: |
  Do you have other vehicles to include?
subquestion: |
  So far you have told us about:
  ${ motor_vehicle_table }
fields:
  - Add another?: motor_vehicle.there_is_another
    datatype: yesnoradio
---
table: motor_vehicle_table
rows: motor_vehicle
columns:
  - Vehicle year: row_item.year 
  - Vehicle make: row_item.make 
  - Vehicle model: row_item.model
  - Name on title: row_item.name.text
  - FMV: currency(row_item.fmv)
  - Balance: currency(row_item.balance)
---
id: motor vehicle information
question: |
  Details for the ${ordinal(i)} investment: 
fields:
  - Vehicle year: motor_vehicle[i].year
    datatype: integer
    maxlength: 4
    min: 1900
    max: 2100
  - Vehicle make: motor_vehicle[i].make
    maxlength: 15
  - Vehicle model: motor_vehicle[i].model
    maxlength: 10
  - Name on title: motor_vehicle[i].name.text
  - Fair market value: motor_vehicle[i].fmv
    datatype: currency
    min: 0
  - Balance: motor_vehicle[i].balance
    datatype: currency
    min: 0
---
code: |
  motor_vehicle[i].year
  motor_vehicle[i].complete = True 
---
code: |
  if motor_vehicle.number_gathered() > 25:
    motor_vehicle.there_is_another = False
---
########### FA ASSETS - 15e Business Interests ###########
id: business interests intro 
question: |
  Do you have any business interests?
fields:
  - no label: has_business_interests
    datatype: yesnoradio
---
id: additional business interests
question: |
  Do you have other business interests to include?
subquestion: |
  So far you have told us about:
  ${ business_interests_table }
fields:
  - Add another?: business_interests.there_is_another
    datatype: yesnoradio
---
table: business_interests_table
rows: business_interests
columns:
  - Name of business: row_item.name.text
  - Type of business: row_item.type
  - "% Ownership": row_item.ownership
  - FMV: currency(row_item.fmv)
---
id: business_interests information
question: |
  Details for the ${ordinal(i)} investment: 
fields:
  - Name of business: business_interests[i].name.text
  - Type of business: business_interests[i].type
  - "How much ownership (1-100%)?": business_interests[i].ownership
    datatype: integer
    min: 1
    max: 100
  - Fair market value: business_interests[i].fmv
    datatype: currency
    min: 0
---
code: |
  business_interests[i].name.text
  business_interests[i].complete = True 
---
code: |
  if business_interests.number_gathered() > 25:
    business_interests.there_is_another = False
---
########### FA ASSETS - 15f Life Insurance ###########
id: life insurance intro
question: |
  Do you have any life insurance policies?
fields:
  - no label: has_life_insurance
    datatype: yesnoradio
---
id: additional investment accounts
question: |
  Do you have other investment accounts to include?
subquestion: |
  So far you have told us about:
  ${ life_insurance_table }
fields:
  - Add another?: life_insurance.there_is_another
    datatype: yesnoradio
---
table: life_insurance_table
rows: life_insurance
columns:
  - Name of insurance company: row_item.name.text
  - Type of policy: row_item.type
  - Death benefit: currency(row_item.benefit)
  - Cash value: currency(row_item.value)
---
id: life_insurance information
question: |
  Details for the ${ordinal(i)} investment account: 
fields:
  - Name of insurance company: life_insurance[i].name.text
  - Type of policy: life_insurance[i].type
    datatype: radio
    choices:
      - Whole
      - Term
      - Universal
      - Variable
      - Final expense
  - Death benfit: life_insurance[i].benefit
    datatype: currency
    min: 0
  - Cash value: life_insurance[i].value
    datatype: currency
    min: 0
---
code: |
  life_insurance[i].name.text
  life_insurance[i].complete = True 
---
code: |
  if life_insurance.number_gathered() > 25:
    life_insurance.there_is_another = False
---
########### FA ASSETS - 15g Retirement Benefits #######
id: retirement benefits intro
question: |
  Do you have any retirement benefits or deferred compensation?
subquestion: |
  Pension plan, annuity, IRA, 401(k), 403(b), SEP

  (balance as of the date of this affidavit)
fields:
  - no label: has_retirement_plan
    datatype: yesnoradio
---
id: additional retirement benefits
question: |
  Do you have other retirement plan benefits to include?
subquestion: |
  So far you have told us about:
  ${ retirement_plan_table }
fields:
  - Add another?: retirement_plan.there_is_another
    datatype: yesnoradio
---
table: retirement_plan_table
rows: retirement_plan
columns:
  - Name of plan: row_item.name.text
  - Type of plan: row_item.type
  - Balance: currency(row_item.balance)
---
id: retirement_plan information
question: |
  Details for the ${ordinal(i)} plan: 
fields:
  - Name of plan: retirement_plan[i].name.text
  - Type of plan: retirement_plan[i].type
  - Balance: retirement_plan[i].balance
    datatype: currency
    min: 0
---
code: |
  retirement_plan[i].name.text
  retirement_plan[i].complete = True 
---
code: |
  if retirement_plan.number_gathered() > 25:
    retirement_plan.there_is_another = False
---
########### FA ASSETS - 15h Valuable collectibles ###########
id: collectibles intro 
question: |
  Do you have any valuable collectibles?
subquestion: 
  Things like coins, stamps, art, antiques, etc.
fields:
  - no label: has_collection
    datatype: yesnoradio
---
id: additional collectibles 
question: |
  Do you have other collectibles to include?
subquestion: |
  So far you have told us about:
  ${ collection_table }
fields:
  - Add another?: collection.there_is_another
    datatype: yesnoradio
---
table: collection_table
rows: collection
columns:
  - Description: row_item.name.text
  - FMV: currency(row_item.fmv)
---
id: collectibles information
question: |
  Details for the ${ordinal(i)} cash/card or app: 
fields:
  - Description: collection[i].name.text
  - Fair market value: collection[i].fmv
    datatype: currency
    min: 0
---
code: |
  collection[i].name.text
  collection[i].complete = True 
---
code: |
  if collection.number_gathered() > 25:
    collection.there_is_another = False
---
########### FA ASSETS - 15i Other Personal Property ###########
id: other property intro 
question: |
  Do you have any other personal property valued over $500?
fields:
  - no label: has_other_property
    datatype: yesnoradio
---
id: additional other_property 
question: |
  Do you have other personal property to include?
subquestion: |
  So far you have told us about:
  ${ other_property_table }
fields:
  - Add another?: other_property.there_is_another
    datatype: yesnoradio
---
table: other_property_table
rows: other_property
columns:
  - Description: row_item.name.text
  - FMV: currency(row_item.fmv)
---
id: other property information
question: |
  Details for the ${ordinal(i)} property: 
fields:
  - Description: other_property[i].name.text
  - Fair market value: other_property[i].fmv
    datatype: currency
    min: 0
---
code: |
  other_property[i].name.text
  other_property[i].complete = True 
---
code: |
  if other_property.number_gathered() > 25:
    other_property.there_is_another = False
---
########### FA ASSETS - 15j Transfer or Sale of Assets #######
id: transfer sale intro
question: |
  Have you had any transfer or sale of assets or property within the Last
  two years with a fair market value of at least $1000?
fields:
  - no label: has_transfer
    datatype: yesnoradio
---
id: additional transfer
question: |
  Do you have other transfer benefits to include?
subquestion: |
  So far you have told us about:
  ${ transfer_table }
fields:
  - Add another?: transfer.there_is_another
    datatype: yesnoradio
---
table: transfer_table
rows: transfer
columns:
  - Description: row_item.name.text
  - Transfer/Sold to: row_item.sold
  - Date: row_item.date.format("MM/dd/yyyy")
  - Amount: currency(row_item.amount)
---
id: transfer information
question: |
  Details for the ${ordinal(i)} plan: 
fields:
  - Description of asset/property: transfer[i].name.text
  - Who received the transfer?: transfer[i].sold
  - Date transfer/sold: transfer[i].date
    datatype: ThreePartsDate
    alMax: ${ today().format("MM/dd/yyyy") }
  - Amount: transfer[i].amount
    datatype: currency
    min: 0
---
code: |
  transfer[i].name.text
  transfer[i].complete = True 
---
code: |
  if transfer.number_gathered() > 25:
    transfer.there_is_another = False
---
########### FA LAWSUITS AND CLAIMS #######
id: lawsuits and claims intro
question: |
  Have you had any lawsuits or claims?
fields:
  - no label: has_lawsuits
    datatype: yesnoradio
---
id: additional lawsuits
question: |
  Do you have other lawsuits or claims to include?
subquestion: |
  So far you have told us about:
  ${ lawsuits_table }
fields:
  - Add another?: lawsuits.there_is_another
    datatype: yesnoradio
---
table: lawsuits_table
rows: lawsuits
columns:
  - Case number: row_item.case
  - Date lawsuit/claim filed: row_item.date
  - Amount received: currency(row_item.amount)
---
id: lawsuits information
question: |
  Details for the ${ordinal(i)} plan: 
fields:
  - Case number: lawsuits[i].case
  - Date lawsuit/claim filed: lawsuits[i].date
    datatype: ThreePartsDate
    alMax: ${ today().format("yyyy-MM-dd") }
  - Amount received: lawsuits[i].amount
    datatype: currency
    min: 0
---
code: |
  lawsuits[i].case
  lawsuits[i].complete = True 
---
code: |
  if lawsuits.number_gathered() > 25:
    lawsuits.there_is_another = False
---
id: e-signature
question: |
  Do you want to add your e-signature to your ${ form_name }?
subquestion: |
  This program can put "**/s/ ${users[0].name.full(middle='full')}**" where you would sign your name. The court will accept this as your signature.

  If you do not add your **{e-signature}**, you must sign your paper form before you file it.

  <div class="alert alert-info ilao-info" role="alert">
    <h6 class="alert-heading">What it means to sign your forms</h6>
    <p>By signing your <i>Application for Waiver of Court Fees</i>, you are certifying that:</p>
    <p><ul>
      <li>Everything on the forms is true and correct, and</li>
      <li>You understand that making a false statement on the form is perjury, which can result in criminal penalties.</li>
    </ul></p>
  <p>See the <a href="https://www.ilga.gov/legislation/ilcs/documents/073500050k1-109.htm"><b>Code of Civil Procedure, 735 ILCS 5/1-109</b></a> for more information.</p>
  </div>
fields:
  - "Add e-signature?": e_signature
    datatype: yesnoradio
terms:
  - "e-signature": |
      An e-signature is an electronic signature. It is a digital version of a signature that has the same effect as a hand-written signature. 
---
id: signature choice
decoration: file-signature
question: |
  Sign your forms
subquestion: |
  Your forms are almost ready. 
  
  You need to sign your forms before you file. You can:
  
  * Sign with your finger on a smartphone,
  * Sign with the mouse or touchpad on your computer,
  * Add your name as an e-signature **(recommended)**, or
  * Sign the forms by hand after you download and print.
field: signature_choice
buttons:  
  - Sign on my phone: phone
    image: mobile-alt
  - Sign on this device: this device
    image: desktop
  - Just add my name: add name
    image: keyboard
  - Sign later: no signature
    image: print
continue button field: saw_signature_choice
script: |
  <script>
    $(".da-field-buttons > div > .btn-da-custom").last().after("<br>")
    $(".da-field-buttons > div > .btn-da-custom").first().before("<br>")
  </script>
---
code: |
  signature_fields = ['users[0].signature']
---
depends on:
  - signature_choice
id: persons signature
question: |
  ${ users[0].familiar() }, please sign in the box below
signature: users[0].signature
under: |
  ${ users[0].name.full(middle="full") }
---
id: forms assembling
continue button field: forms_assembling
question: |
  Almost done
subquestion: |
  After you click **Next**, it may take a few moments to finish making your forms.
  
  ###### You do not need to refresh your screen. Hang in there!
  
  [NEWLINE]
---
id: get docs screen
event: get_docs_screen
question: |
  Download
subquestion: |
  Your form is ready. View and download your form below. Click **Make changes** to fix any mistakes.
  
  ${ action_button_html(url_action('review_answers'), label=':edit: Make changes', color='success', size="md") }

  ${ al_user_bundle.download_list_html() }

  [NEWLINE]

  ${ al_user_bundle.send_button_html(show_editable_checkbox=False) }

  Thank you for using ILAO Easy Forms!
under: |
  % if not user_logged_in():
  [${fa_icon("sign-in-alt", color="#0079d0", size="sm")} **Sign-in**](${url_of('login', next=interview_url())}) or [**create**](${url_of('register', next=interview_url())}) an ILAO Easy Form account to save your progress (optional).
  % endif

  ${ action_button_html(interview_url(i="docassemble.ILAO:feedback.yml", easy_form_interview=ilao_easy_form_url, easy_form_title=ilao_easy_form_title, easy_form_page=user_info().question_id, easy_form_variable=user_info().variable, local=False,reset=1), label=':comment: Was this program helpful?', color="#181c36", size="md", new_window=True) }
---
objects:
  - al_user_bundle: ALDocumentBundle.using(elements=[instructions, financial_affidavit_bundle], filename="completed_financial_affidavit.pdf", title="All forms", enabled=True)
---
objects:
  - financial_affidavit_bundle: ALDocumentBundle.using(title="Financial Affidavit", filename="fa_primary.pdf", enabled=True, elements=[
        fa_primary, 
        additional_employment_bundle,
        additional_health_insurance_bundle,
        additional_debts,
        additional_cash,
        additional_cd,
        additional_money,
        additional_investments,
        additional_securities,
        additional_real_estate,
        additional_motor_vehicle,
        additional_business_interests,
        additional_life_insurance,
        additional_retirement,
        additional_collectibles,
        additional_other_property,
        additional_transfer,
        additional_lawsuits,
      ])
---
objects:
  - instructions: ALDocument.using(title="Instructions", filename="instructions.pdf", enabled=True, has_addendum=False)
  - fa_primary: ALDocument.using(title="Financial Affidavit", filename="fa_primary.pdf", enabled=True, has_addendum=False)
---
############ FA PRIMARY DOCUMENT #############
attachment:
  - name: instructions
    variable name: instructions[i]
    filename: instructions
    pdf template file: instructions.pdf
---
attachment:
  - name: fa_primary
    variable name: fa_primary[i]
    filename: fa_primary
    pdf template file: fa_primary.pdf
    editable: False
    fields:
      - "county_name": ${ case_county.upper() }
      - "case_number": ${ case_number }
      - "pre-judgment": ${ filing_status == "pre_judgment" }
      - "post-judgment": ${ filing_status == "post_judgment" }
      - "petitioner_name": |
          % if party_label == 'petitioner':
          ${ users[0].name.full(middle='full') }
          % else:
          ${ other_parties[0].name.full(middle='full') }
          % endif
      - "respondent_name": |
          % if opposing_label == 'respondent':
          ${ other_parties[0].name.full(middle='full') }
          % else:
          ${ users[0].name.full(middle='full') }
          % endif
      - "petitioner_yes": ${ party_label == 'petitioner' }
      - "respondent_yes": ${ party_label == 'respondent' }
      - "date_affirm": ${ today().format('MM/dd/yyyy') }
      - "users_name": ${ users[0].name.full(middle='full') }
      - "users_phone_number": |
          % if not hide_contact:
          ${ users[0].address.line_two() }
          % endif
      - "users_address": |
          % if not hide_contact:
          ${ users[0].address.line_one(bare=True) }
          % endif
      - "users_address2": |
          % if not hide_contact:
          ${ users[0].address.line_two() }
          % endif
      - "users_birthdate": ${ users[0].birthdate.format('MM/dd/yyyy') }
      - "household_expenses": ${ household_expenses }
      # Page 2: 6. My Employment/Business
      - "unemployed_yes": ${ employment.number_gathered() == 0 }  
      # employed
      - "employed_yes": |
          % if employment.there_are_any:
          ${ employment[0].type == "employed" }
          % endif
      - "employer_name": |
          % if employment.there_are_any and employment[0].type == "employed":
          ${ employment[0].name.text }
          % endif
      - "employer_address": |
          % if employment.there_are_any and employment[0].type == "employed":
          ${ employment[0].address.line_one(bare=True) }
          % endif
      - "employer_address2": |
          % if employment.there_are_any and employment[0].type == "employed":
          ${ employment[0].address.line_two() }
          % endif
      - "paychecks_monthly": |
          % if employment.there_are_any and employment[0].type == "employed":
          ${ employment[0].frequency == "12" }
          % endif
      - "paychecks_bi_monthly": |
          % if employment.there_are_any and employment[0].type == "employed":
          ${ employment[0].frequency == "24" }
          % endif
      - "paychecks_two_weeks": |
          % if employment.there_are_any and employment[0].type == "employed":
          ${ employment[0].frequency == "26" }
          % endif
      - "paychecks_weekly": |
          % if employment.there_are_any and employment[0].type == "employed":
          ${ employment[0].frequency == "52" }
          % endif
      - "paychecks_cash": |
          % if employment.there_are_any and employment[0].type == "employed":
          ${ employment[0].cash_payment }
          % endif
      - "income_gross": |
          % if employment.there_are_any and employment[0].type == "employed":
          ${ thousands(employment[0].gross_income, show_decimals=True) }
          % endif
      - "income_date": |
          % if employment.there_are_any and employment[0].type == "employed":
          ${ employment[0].gross_date.format('MM/dd/yyyy') }
          % endif
      # business
      - "business_own": |
          % if employment.there_are_any:
          ${ employment[0].type == "own" }
          % endif
      - "business_contractor": |
          % if employment.there_are_any:
          ${ employment[0].type == "contractor" }
          % endif
      - "business_partnership": |
          % if employment.there_are_any:
          ${ employment[0].type == "partnership" }
          % endif          
      - "business_llc": |
          % if employment.there_are_any:
          ${ employment[0].type == "llc" }
          % endif          
      - "business_corporation": |
          % if employment.there_are_any:
          ${ employment[0].type == "corp" }
          % endif
      - "business_other_entity": |
          % if employment.there_are_any:
          ${ employment[0].type == "other_entity" }
          % endif          
      - "business_name": |
          % if employment.there_are_any and employment[0].type != "employed":
          ${ employment[0].name.text }
          % endif
      - "business_address": |
          % if employment.there_are_any and employment[0].type != "employed":
          ${ employment[0].address.line_one(bare=True) }
          % endif
      - "business_address2": |
          % if employment.there_are_any and employment[0].type != "employed":
          ${ employment[0].address.line_two() }
          % endif
      - "business_gross_last_year": |
          % if employment.there_are_any and employment[0].type != "employed":
          ${ thousands(employment[0].income_last_year, show_decimals=True) }
          % endif
      - "business_gross_current_year": |
          % if employment.there_are_any and employment[0].type != "employed":
          ${ thousands(employment[0].income_current_year, show_decimals=True) }
          % endif           
      - "business_expense_last_year": |
          % if employment.there_are_any and employment[0].type != "employed":
          ${ thousands(employment[0].expenses_last_year, show_decimals=True) }
          % endif
      - "business_expense_current_year": |
          % if employment.there_are_any and employment[0].type != "employed":
          ${ thousands(employment[0].expenses_current_year, show_decimals=True) }
          % endif
      - "business_meals": |
          % if employment.there_are_any and employment[0].type != "employed":
          ${ employment[0].perks['meals'] }
          % endif
      - "business_car": |
          % if employment.there_are_any and employment[0].type != "employed":
          ${ employment[0].perks['car'] }
          % endif
      - "business_housing": |
          % if employment.there_are_any and employment[0].type != "employed":
          ${ employment[0].perks['housing'] }
          % endif
      - "business_other": |
          % if employment.there_are_any and employment[0].type != "employed":
          ${ employment[0].perks['other'] }
          % endif
      - "business_other_detail": |
          % if employment.there_are_any and employment[0].type != "employed":
          ${ employment[0].other_perks }
          % endif
      - "employment_addendum_yes": ${ employment.number_gathered() > 1 }

      ## Page 3:  Gross income/taxes from last year, monthly gross income sources
      - "married_joint_yes": |
          % if taxes_filed:
          ${ taxes_filed_status == "joint" }
          % endif
      - "married_separate_yes": |
          % if taxes_filed:
          ${ taxes_filed_status == "separate" }
          % endif
      - "single_yes": |
          % if taxes_filed:
          ${ taxes_filed_status == "single" }
          % endif
      - "taxes_household": |
          % if taxes_filed:
          ${ taxes_filed_status == "household" }
          % endif
      - "taxes_not_filed": ${ not taxes_filed }   
      - "deduction_standard": |
          % if taxes_filed:
          ${ deduction_type }
          % endif
      - "deduction_itemized": |
          % if taxes_filed:
          ${ not deduction_type }
          % endif
      - "Gross income (before taxes and deductions) last year": |
          % if taxes_filed:
          ${ thousands(gross_income_last_year, show_decimals=True)}
          % endif
      - "Child Tax Credit": |
          % if taxes_filed:
          ${ tax_claimed['child_credit'] }
          % endif
      - "Additional child tax credit": |
          % if taxes_filed:
          ${ tax_claimed['additional'] }
          % endif
      - "Credit for other dependents": |
          % if taxes_filed:
          ${ tax_claimed['dependents'] }
          % endif
      - "Earned Income Credit": |
          % if taxes_filed:
          ${ tax_claimed['eic'] }
          % endif
      - "Dependent care credit": |
          % if taxes_filed:
          ${ tax_claimed['care'] }
          % endif
      # monthly gross income
      - "regular_pay": |
          % if users[0].regular_pay_question:
          ${thousands(users[0].regular_pay, show_decimals=True)}
          % endif
      - "overtime_pay": |
          % if users[0].overtime_pay_question:
          ${ thousands(users[0].overtime_pay, show_decimals=True)}
          % endif
      - "commission_pay": |
          % if users[0].commission_pay_question:
          ${ thousands(users[0].commission_pay, show_decimals=True)}
          % endif
      - "tips": |
          % if users[0].tips_question:
          ${ thousands(users[0].tips, show_decimals=True)}
          % endif
      - "bonus": |
          % if users[0].bonus_question:
          ${ thousands(users[0].bonus, show_decimals=True)}
          % endif
      - "pension": |
          % if users[0].pension_question:
          ${ thousands(users[0].pension, show_decimals=True)}
          % endif
      - "annuity": |
          % if users[0].annuity_question:
          ${ thousands(users[0].annuity, show_decimals=True)}
          % endif
      - "interest_income": |
          % if users[0].interest_question:
          ${ thousands(users[0].interest, show_decimals=True)}
          % endif
      - "dividend_income": |
          % if users[0].dividend_question:
          ${ thousands(users[0].dividend, show_decimals=True)}
          % endif
      - "trust_income": |
          % if users[0].trust_question:
          ${ thousands(users[0].trust, show_decimals=True)}
          % endif
      - "investment_income": |
          % if users[0].investment_question:
          ${ thousands(users[0].investment, show_decimals=True)}
          % endif
      - "social_retirement": |
          % if users[0].social_retirement_question:
          ${ thousands(users[0].social_retirement, show_decimals=True)}
          % endif
      - "social_disability": |
          % if users[0].social_disability_question:
          ${ thousands(users[0].social_disability, show_decimals=True)}
          % endif
      - "social_income": |
          % if users[0].social_income_question:
          ${ thousands(users[0].social_income, show_decimals=True)}
          % endif
      - "unemployment_benefits": |
          % if users[0].unemployment_benefits_question:
          ${ thousands(users[0].unemployment_benefits, show_decimals=True)}
          % endif
      - "disability_benefits": |
          % if users[0].disability_benefits_question:
          ${ thousands(users[0].disability_benefits, show_decimals=True)}
          % endif
      - "workers_comp_benefits": |
          % if users[0].workers_comp_benefits_question:
          ${ thousands(users[0].workers_comp_benefits, show_decimals=True)}
          % endif
      - "child_benefits": |
          % if users[0].child_benefits_question:
          ${ thousands(users[0].child_benefits, show_decimals=True)}
          % endif
      - "military_allowances": |
          % if users[0].military_allowances_question:
          ${ thousands(users[0].military_allowances, show_decimals=True)}
          % endif
      - "rental_income": |
          % if users[0].rental_income_question:
          ${ thousands(users[0].rental_income, show_decimals=True)}
          % endif
      - "partnership_income": |
          % if users[0].partnership_income_question:
          ${ thousands(users[0].partnership_income, show_decimals=True)}
          % endif
      - "distributions_draws": |
          % if users[0].distributions_draws_question:
          ${ thousands(users[0].distributions_draws, show_decimals=True)}
          % endif
      - "royalty_income": |
          % if users[0].royalty_income_question:
          ${ thousands(users[0].royalty_income, show_decimals=True)}
          % endif
      - "maintenance_current": |
          % if users[0].maintenance_current_question:
          ${ thousands(users[0].maintenance_current, show_decimals=True)}
          % endif
      - "maintenance_alternate": |
          % if users[0].maintenance_alternate_question:
          ${ thousands(users[0].maintenance_alternate, show_decimals=True)}
          % endif
      - "child_support_current": |
          % if users[0].child_support_current_question:
          ${ thousands(users[0].child_support_current, show_decimals=True)}
          % endif
      - "social_security_current": |
          % if users[0].social_security_current_question:
          ${ thousands(users[0].social_security_current, show_decimals=True)}
          % endif
      - "gifts_money": |
          % if users[0].gifts_money_question:
          ${ thousands(users[0].gifts_money, show_decimals=True)}
          % endif
      - "other_income": |
          % if users[0].other_income_question:
          ${ thousands(users[0].other_income, show_decimals=True)}
          % endif
      - "other_income_description": |
          % if users[0].other_income_question:
          ${ users[0].other_income_description }
          % endif          
      - "total_gross_monthly_income": |
          ${ thousands(total_gross_monthly_income, show_decimals=True) }
      # expenses
      - "deductions_federal": |
          % if users[0].deductions_federal_question:
          ${ thousands(users[0].deductions_federal, show_decimals=True)}
          % endif
      - "deductions_state":  |
          % if users[0].deductions_state_question:
          ${ thousands(users[0].deductions_state, show_decimals=True)}
          % endif
      - "deductions_FICA":  |
          % if users[0].deductions_FICA_question:
          ${ thousands(users[0].deductions_FICA, show_decimals=True)}
          % endif
      - "deductions_medicare":  |
          % if users[0].deductions_medicare_question:
          ${ thousands(users[0].deductions_medicare, show_decimals=True)}
          % endif
      - "deductions_retirement":  |
          % if users[0].deductions_retirement_question:
          ${ thousands(users[0].deductions_retirement, show_decimals=True)}
          % endif
      - "total_deductions":  |
          ${ thousands(total_monthly_deductions, show_decimals=True)}
      - "maintenance_paid_court": |
          % if users[0].maintenance_paid_court_question:
          ${ thousands(users[0].maintenance_paid_court, show_decimals=True)}
          % endif
      - "maintenance_paid_no_tax": |
          % if users[0].maintenance_paid_no_tax_question:
          ${ thousands(users[0].maintenance_paid_no_tax, show_decimals=True)}
          % endif
      - "maintenance_paid_taxed": |
          % if users[0].maintenance_paid_taxed_question:
          ${ thousands(users[0].maintenance_paid_taxed, show_decimals=True)}
          % endif
      - "total_maintenance": |
          ${ thousands(total_maintenance_payments, show_decimals=True)}
      - "child_support_1": |
          % if users[0].child_support_1_question:
          ${ thousands(users[0].child_support_1, show_decimals=True)}
          % endif
      - "child_support_2": |
          % if users[0].child_support_2_question:
          ${ thousands(users[0].child_support_2, show_decimals=True)}
          % endif
      - "child_support_3": |
          % if users[0].child_support_3_question:
          ${ thousands(users[0].child_support_3, show_decimals=True)}
          % endif
      - "total_child_support": |
          ${ thousands(total_child_support_payments, show_decimals=True)}
      - "living_house_payment": |
          % if users[0].living_house_payment_question:
          ${ thousands(users[0].living_house_payment, show_decimals=True)}
          % endif
      - "living_heloc": |
          % if users[0].living_heloc_question:
          ${ thousands(users[0].living_heloc, show_decimals=True)}
          % endif
      - "living_property_taxes": |
          % if users[0].living_property_taxes_question:
          ${ thousands(users[0].living_property_taxes, show_decimals=True)}
          % endif
      - "living_hoa": |
          % if users[0].living_hoa_question:
          ${ thousands(users[0].living_hoa, show_decimals=True)}
          % endif
      - "living_insurance": |
          % if users[0].living_insurance_question:
          ${ thousands(users[0].living_insurance, show_decimals=True)}
          % endif
      - "living_gas": |
          % if users[0].living_gas_question:
          ${ thousands(users[0].living_gas, show_decimals=True)}
          % endif
      - "living_power": |
          % if users[0].living_power_question:
          ${ thousands(users[0].living_power, show_decimals=True)}
          % endif
      - "living_phone": |
          % if users[0].living_phone_question:
          ${ thousands(users[0].living_phone, show_decimals=True)}
          % endif
      - "living_cable": |
          % if users[0].living_cable_question:
          ${ thousands(users[0].living_cable, show_decimals=True)}
          % endif
      - "living_internet": |
          % if users[0].living_internet_question:
          ${ thousands(users[0].living_internet, show_decimals=True)}
          % endif
      - "living_water": |
          % if users[0].living_water_question:
          ${ thousands(users[0].living_water, show_decimals=True)}
          % endif
      - "living_trash": |
          % if users[0].living_trash_question:
          ${ thousands(users[0].living_trash, show_decimals=True)}
          % endif
      - "living_laundry": |
          % if users[0].living_laundry_question:
          ${ thousands(users[0].living_laundry, show_decimals=True)}
          % endif
      - "living_cleaner": |
          % if users[0].living_cleaner_question:
          ${ thousands(users[0].living_cleaner, show_decimals=True)}
          % endif
      - "living_repairs": |
          % if users[0].living_repairs_question:
          ${ thousands(users[0].living_repairs, show_decimals=True)}
          % endif
      - "living_pets": |
          % if users[0].living_pets_question:
          ${ thousands(users[0].living_pets, show_decimals=True)}
          % endif
      - "living_groceries": |
          % if users[0].living_groceries_question:
          ${ thousands(users[0].living_groceries, show_decimals=True)}
          % endif
      - "living_other": |
          % if users[0].living_other_question:
          ${ thousands(users[0].living_other, show_decimals=True)}
          % endif
      - "living_other_description": |
          % if users[0].living_other_question:
          ${ users[0].living_other_description }
          % endif
      - "subtotal_living": |
          ${ thousands(subtotal_monthly_household_expenses, show_decimals=True)}
      - "transport_payment": |
          % if users[0].transport_payment_question:
          ${ thousands(users[0].transport_payment, show_decimals=True)}
          % endif
      - "transport_maintenance": |
          % if users[0].transport_maintenance_question:
          ${ thousands(users[0].transport_maintenance, show_decimals=True)}
          % endif
      - "transport_insurance": |
          % if users[0].transport_insurance_question:
          ${ thousands(users[0].transport_insurance, show_decimals=True)}
          % endif
      - "transport_fuel": |
          % if users[0].transport_fuel_question:
          ${ thousands(users[0].transport_fuel, show_decimals=True)}
          % endif
      - "transport_public": |
          % if users[0].transport_public_question:
          ${ thousands(users[0].transport_public, show_decimals=True)}
          % endif
      - "transport_parking": |
          % if users[0].transport_parking_question:
          ${ thousands(users[0].transport_parking, show_decimals=True)}
          % endif
      - "transport_other": |
          % if users[0].transport_other_question:
          ${ thousands(users[0].transport_other, show_decimals=True)}
          % endif
      - "transport_other_description": |
          % if users[0].transport_other_question:
          ${ users[0].transport_other_description }
          % endif
      - "subtotal_transport":  |
          ${ thousands(subtotal_monthly_transportation_expenses) }
      - "personal_doctor": |
          % if users[0].personal_doctor_question:
          ${ thousands(users[0].personal_doctor, show_decimals=True)}
          % endif
      - "personal_therapy": |
          % if users[0].personal_therapy_question:
          ${ thousands(users[0].personal_therapy, show_decimals=True)}
          % endif
      - "personal_dental": |
          % if users[0].personal_dental_question:
          ${ thousands(users[0].personal_dental, show_decimals=True)}
          % endif
      - "personal_vision": |
          % if users[0].personal_vision_question:
          ${ thousands(users[0].personal_vision, show_decimals=True)}
          % endif
      - "personal_medications": |
          % if users[0].personal_medications_question:
          ${ thousands(users[0].personal_medications, show_decimals=True)}
          % endif
      - "personal_life_term": |
          % if users[0].personal_life_term_question:
          ${ thousands(users[0].personal_life_term, show_decimals=True)}
          % endif
      - "personal_life_whole": |
          % if users[0].personal_life_whole_question:
          ${ thousands(users[0].personal_life_whole, show_decimals=True)}
          % endif
      - "personal_clothing": |
          % if users[0].personal_clothing_question:
          ${ thousands(users[0].personal_clothing, show_decimals=True)}
          % endif
      - "personal_stylist": |
          % if users[0].personal_stylist_question:
          ${ thousands(users[0].personal_stylist, show_decimals=True)}
          % endif
      - "personal_memberships": |
          % if users[0].personal_memberships_question:
          ${ thousands(users[0].personal_memberships, show_decimals=True)}
          % endif
      - "personal_subscriptions": |
          % if users[0].personal_subscriptions_question:
          ${ thousands(users[0].personal_subscriptions, show_decimals=True)}
          % endif
      - "personal_entertainment": |
          % if users[0].personal_entertainment_question:
          ${ thousands(users[0].personal_entertainment, show_decimals=True)}
          % endif
      - "personal_gifts": |
          % if users[0].personal_gifts_question:
          ${ thousands(users[0].personal_gifts, show_decimals=True)}
          % endif
      - "personal_donations": |
          % if users[0].personal_donations_question:
          ${ thousands(users[0].personal_donations, show_decimals=True)}
          % endif
      - "personal_vacations": |
          % if users[0].personal_vacations_question:
          ${ thousands(users[0].personal_vacations, show_decimals=True)}
          % endif
      - "personal_associations": |
          % if users[0].personal_associations_question:
          ${ thousands(users[0].personal_associations, show_decimals=True)}
          % endif
      - "peronsal_professional": |
          % if users[0].peronsal_professional_question:
          ${ thousands(users[0].peronsal_professional, show_decimals=True)}
          % endif
      - "personal_other": |
          % if users[0].personal_other_question:
          ${ thousands(users[0].personal_other, show_decimals=True)}
          % endif
      - "personal_other": |
          % if users[0].personal_other_question:
          ${ thousands(users[0].personal_other, show_decimals=True)}
          % endif
      - "personal_other_description": |
          % if users[0].personal_other_question:
          ${ users[0].personal_other_description}
          % endif
      - "subtotal_personal":  |
          ${ thousands(subtotal_monthly_personal_expenses, show_decimals=True) }
      - "children_clothing": |
          % if users[0].children_expenses_question and users[0].children_clothing_question:
          ${ thousands(users[0].children_clothing, show_decimals=True)}
          % endif
      - "children_grooming": |
          % if users[0].children_expenses_question and users[0].children_grooming_question:
          ${ thousands(users[0].children_grooming, show_decimals=True)}
          % endif
      - "children_tuition": |
          % if users[0].children_expenses_question and users[0].children_tuition_question:
          ${ thousands(users[0].children_tuition, show_decimals=True)}
          % endif
      - "children_books": |
          % if users[0].children_expenses_question and users[0].children_books_question:
          ${ thousands(users[0].children_books, show_decimals=True)}
          % endif
      - "children_school_lunch": |
          % if users[0].children_expenses_question and users[0].children_school_lunch_question:
          ${ thousands(users[0].children_school_lunch, show_decimals=True)}
          % endif
      - "children_transportation": |
          % if users[0].children_expenses_question and users[0].children_transportation_question:
          ${ thousands(users[0].children_transportation, show_decimals=True)}
          % endif
      - "children_school_events": |
          % if users[0].children_expenses_question and users[0].children_school_events_question:
          ${ thousands(users[0].children_school_events, show_decimals=True)}
          % endif
      - "children_school_uniforms": |
          % if users[0].children_expenses_question and users[0].children_school_uniforms_question:
          ${ thousands(users[0].children_school_uniforms, show_decimals=True)}
          % endif
      - "children_after_school": |
          % if users[0].children_expenses_question and users[0].children_after_school_question:
          ${ thousands(users[0].children_after_school, show_decimals=True)}
          % endif
      - "children_tutor": |
          % if users[0].children_expenses_question and users[0].children_tutor_question:
          ${ thousands(users[0].children_tutor, show_decimals=True)}
          % endif
      - "children_doctor": |
          % if users[0].children_expenses_question and users[0].children_doctor_question:
          ${ thousands(users[0].children_doctor, show_decimals=True)}
          % endif
      - "children_therapy": |
          % if users[0].children_expenses_question and users[0].children_therapy_question:
          ${ thousands(users[0].children_therapy, show_decimals=True)}
          % endif
      - "children_dental": |
          % if users[0].children_expenses_question and users[0].children_dental_question:
          ${ thousands(users[0].children_dental, show_decimals=True)}
          % endif
      - "children_vision": |
          % if users[0].children_expenses_question and users[0].children_vision_question:
          ${ thousands(users[0].children_vision, show_decimals=True)}
          % endif
      - "children_medications": |
          % if users[0].children_expenses_question and users[0].children_medications_question:
          ${ thousands(users[0].children_medications, show_decimals=True)}
          % endif
      - "children_allowance": |
          % if users[0].children_expenses_question and users[0].children_allowance_question:
          ${ thousands(users[0].children_allowance, show_decimals=True)}
          % endif
      - "children_childcare": |
          % if users[0].children_expenses_question and users[0].children_childcare_question:
          ${ thousands(users[0].children_childcare, show_decimals=True)}
          % endif
      - "children_sports": |
          % if users[0].children_expenses_question and users[0].children_sports_question:
          ${ thousands(users[0].children_sports, show_decimals=True)}
          % endif
      - "children_camps": |
          % if users[0].children_expenses_question and users[0].children_camps_question:
          ${ thousands(users[0].children_camps, show_decimals=True)}
          % endif
      - "children_vacations": |
          % if users[0].children_expenses_question and users[0].children_vacations_question:
          ${ thousands(users[0].children_vacations, show_decimals=True)}
          % endif
      - "children_entertainment": |
          % if users[0].children_expenses_question and users[0].children_entertainment_question:
          ${ thousands(users[0].children_entertainment, show_decimals=True)}
          % endif
      - "children_party_gifts": |
          % if users[0].children_expenses_question and users[0].children_party_gifts_question:
          ${ thousands(users[0].children_party_gifts, show_decimals=True)}
          % endif
      - "children_other": |
          % if users[0].children_expenses_question and users[0].children_other_question:
          ${ thousands(users[0].children_other, show_decimals=True)}
          % endif
      - "children_other_description": |
          % if users[0].children_expenses_question and users[0].children_other_question:
          ${ users[0].children_other_description}
          % endif
      - "subtotal_children_expense":  |
          ${ thousands(subtotal_monthly_children_expenses, show_decimals=True)}
      # Part 12 total monthly living expenses
      - "total_monthly_living _expenses": |
          ${ thousands(total_monthly_household_expenses, show_decimals=True)}
      # 13 Health insurance
      - "health_insurance_yes": ${ insurance.there_are_any }
      - "health_insurance_no": ${ insurance.number_gathered() == 0 }
      - "health_insurance_company": |
          % if insurance.there_are_any:
          ${ insurance[0].name.text }
          % endif
      - "insurance_type_dental": |
          % if insurance.there_are_any:
          ${ insurance[0].type == "Dental" }
          % endif
      - "insurance_type_medical": |
          % if insurance.there_are_any:
          ${ insurance[0].type == "Medical" }
          % endif
      - "insurance_type_vision": |
          % if insurance.there_are_any:
          ${ insurance[0].type == "Vision" }
          % endif          
      - "insurance_type_orthodontic": |
          % if insurance.there_are_any:
          ${ insurance[0].type == "Orthodontic" }
          % endif          
      - "policy_type_ppo": |
          % if insurance.there_are_any:
          ${ insurance[0].policy == "PPO" }
          % endif
      - "policy_type_hmo": |
          % if insurance.there_are_any:
          ${ insurance[0].policy == "HMO" }
          % endif         
      - "policy_type_other": |
          % if insurance.there_are_any:
          ${ insurance[0].policy == "Other" }
          % endif
      - "insurance_provided_employer": |
          % if insurance.there_are_any:
          ${ insurance[0].provider == "employer" }
          % endif         
      - "insurance_provided_private": |
          % if insurance.there_are_any:
          ${ insurance[0].provider == "private" }
          % endif 
      - "insurance_provided_group": |
          % if insurance.there_are_any:
          ${ insurance[0].provider == "group" }
          % endif          
      - "insurance_provided_public": |
          % if insurance.there_are_any:
          ${ insurance[0].provider == "public" }
          % endif
      - "insurance_total_covered": |
          % if insurance.there_are_any:
          ${ nice_number(insurance[0].total_covered, use_word=False) }
          % endif
      - "insurance_covers_myself": |
          % if insurance.there_are_any:
          ${ insurance[0].coverage == "myself" }
          % endif
      - "insurance_covers_both": |
          % if insurance.there_are_any:
          ${ insurance[0].coverage == "both" }
          % endif
      - "insurance_covers_children_current": |
          % if insurance.there_are_any:
          ${ insurance[0].coverage == "children_current" }
          % endif
      - "insurance_covers_children_other": |
          % if insurance.there_are_any:
          ${ insurance[0].coverage == "children_other" }
          % endif
      - "other_children_covered": |
          % if insurance.there_are_any and insurance[0].coverage == "children_other":
          ${ insurance[0].other_children_count } " - " ${ insurance[0].other_children_age_list }
          % endif
      - "insurance_monthly_cost": |
          % if insurance.there_are_any:
          ${ thousands(insurance[0].monthly_cost, show_decimals=True) }
          % endif
      - "insurance_paid_myself": |
          % if insurance.there_are_any:
          ${ insurance[0].paid == "myself" }
          % endif
      - "insurance_paid_partner": |
          % if insurance.there_are_any:
          ${ insurance[0].paid == "partner" }
          % endif
      - "insurance_paid_other": |
          % if insurance.there_are_any:
          ${ insurance[0].paid == "other" }
          % endif
      - "insurance_paid_other_description": |
          % if insurance.there_are_any and insurance[0].paid == "other":
          ${ insurance[0].other_description }
          % endif
      - "cost_insurance_children": |
          % if insurance.there_are_any:
          ${ thousands(insurance[0].cost_children, show_decimals=True) }
          % endif
      - "cost_insurance_children_current": |
          % if insurance.there_are_any:
          ${ thousands(insurance[0].cost_children_current, show_decimals=True) }
          % endif
      - "individual_deductible": |
          % if insurance.there_are_any:
          ${ thousands(insurance[0].individual_deductible, show_decimals=True) }
          % endif
      - "family_deductible": |
          % if insurance.there_are_any:
          ${ thousands(insurance[0].family_deductible, show_decimals=True) }
          % endif
      - "coinsurance": |
          % if insurance.there_are_any:
          ${ nice_number(insurance[0].coinsurance, use_word=False) }
          % endif
      - "copayment": |
          % if insurance.there_are_any:
          ${ thousands(insurance[0].copayment, show_decimals=True) }
          % endif
      - "insurance_addendum_yes": ${ insurance.number_gathered() > 1 }
      # 14 Debts
      - "creditor_name_1": |
          % if debts.there_are_any:
          ${ debts[0].name.text }
          % endif
      - "creditor_description_1": |
          % if debts.there_are_any:
          ${ debts[0].description }
          % endif
      - "creditor_amount_1": |
          % if debts.there_are_any:
          ${ thousands(debts[0].amount, show_decimals=True) }
          % endif
      - "creditor_payment_1": |
          % if debts.there_are_any:
          ${ thousands(debts[0].payment, show_decimals=True) }
          % endif
      - "creditor_name_2": |
          % if debts.number_gathered() >= 2:
          ${ debts[1].name.text }
          % endif
      - "creditor_description_2": |
          % if debts.number_gathered() >= 2:
          ${ debts[1].description }
          % endif
      - "creditor_amount_2": |
          % if debts.number_gathered() >= 2:
          ${ thousands(debts[1].amount, show_decimals=True) }
          % endif
      - "creditor_payment_2": |
          % if debts.number_gathered() >= 2:
          ${ thousands(debts[1].payment, show_decimals=True) }
          % endif
      - "creditor_name_3": |
          % if debts.number_gathered() >= 3:
          ${ debts[2].name.text }
          % endif
      - "creditor_description_3": |
          % if debts.number_gathered() >= 3:
          ${ debts[2].description }
          % endif
      - "creditor_amount_3": |
          % if debts.number_gathered() >= 3:
          ${ thousands(debts[2].amount, show_decimals=True) }
          % endif
      - "creditor_payment_3": |
          % if debts.number_gathered() >= 3:
          ${ thousands(debts[2].payment, show_decimals=True) }
          % endif
      - "creditor_addendum_yes": ${ debts.number_gathered() > 6 }
      - "total_aditional_debts": |
          % if debts.number_gathered() >= 7:
          ${ thousands(sum(y.payment for y in debts[6:]), show_decimals=True) }
          % endif
      - "total_debt_payments": |
          % if debts.there_are_any:
          ${ thousands(sum(y.payment for y in debts), show_decimals=True) }
          % endif
      # 15 Assets - Cash/bank accounts
      - "cash_bank_name_1": |
          % if cash.there_are_any:
          ${ cash[0].name.text }
          % endif
      - "cash_account_name_1": |
          % if cash.there_are_any:
          ${ cash[0].account }
          % endif
      - "cash_account_type_1": |
          % if cash.there_are_any:
          ${ cash[0].type }
          % endif
      - "cash_balance_1": |
          % if cash.there_are_any:
          ${ thousands(cash[0].balance, show_decimals=True) }
          % endif
      - "cash_bank_name_2": |
          % if cash.number_gathered() >= 2:
          ${ cash[1].name.text }
          % endif
      - "cash_account_name_2": |
          % if cash.number_gathered() >= 2:
          ${ cash[1].account }
          % endif
      - "cash_account_type_2": |
          % if cash.number_gathered() >= 2:
          ${ cash[1].type }
          % endif
      - "cash_balance_2": |
          % if cash.number_gathered() >= 2:
          ${ thousands(cash[1].balance, show_decimals=True) }
          % endif
      - "cash_bank_name_3": |
          % if cash.number_gathered() >= 3:
          ${ cash[2].name.text }
          % endif
      - "cash_account_name_3": |
          % if cash.number_gathered() >= 3:
          ${ cash[2].account }
          % endif
      - "cash_account_type_3": |
          % if cash.number_gathered() >= 3:
          ${ cash[2].type }
          % endif
      - "cash_balance_3": |
          % if cash.number_gathered() >= 3:
          ${ thousands(cash[2].balance, show_decimals=True) }
          % endif
      - "cash_addendum_yes": ${ cash.number_gathered() > 3 }
      # 15 Assets - Certificate of Deposit
      - "cd_bank_name_1": |
          % if cert_deposit.there_are_any:
          ${ cert_deposit[0].name.text }
          % endif
      - "cd_account_name_1": |
          % if cert_deposit.there_are_any:
          ${ cert_deposit[0].account }
          % endif
      - "cd_balance_1": |
          % if cert_deposit.there_are_any:
          ${ thousands(cert_deposit[0].balance, show_decimals=True) }
          % endif
      - "cd_bank_name_2": |
          % if cert_deposit.number_gathered() >= 2:
          ${ cert_deposit[1].name.text }
          % endif
      - "cd_account_name_2": |
          % if cert_deposit.number_gathered() >= 2:
          ${ cert_deposit[1].account }
          % endif
      - "cd_balance_2": |
          % if cert_deposit.number_gathered() >= 2:
          ${ thousands(cert_deposit[1].balance, show_decimals=True) }
          % endif
      - "cd_bank_name_3": |
          % if cert_deposit.number_gathered() >= 3:
          ${ cert_deposit[2].name.text }
          % endif
      - "cd_account_name_3": |
          % if cert_deposit.number_gathered() >= 3:
          ${ cert_deposit[2].account }
          % endif
      - "cd_balance_3": |
          % if cert_deposit.number_gathered() >= 3:
          ${ thousands(cert_deposit[2].balance, show_decimals=True) }
          % endif
      - "cd_addendum_yes": ${ cert_deposit.number_gathered() > 3 }
      # 15 Assets - Money cash/card/apps
      - "money_card_1": |
          % if money.there_are_any:
          ${ money[0].name.text }
          % endif
      - "money_holder_1": |
          % if money.there_are_any:
          ${ money[0].holder }
          % endif
      - "money_balance_1": |
          % if money.there_are_any:
          ${ thousands(money[0].balance, show_decimals=True) }
          % endif
      - "money_card_2": |
          % if money.number_gathered() >= 2:
          ${ money[1].name.text }
          % endif
      - "money_holder_2": |
          % if money.number_gathered() >= 2:
          ${ money[1].holder }
          % endif
      - "money_balance_2": |
          % if money.number_gathered() >= 2:
          ${ thousands(money[1].balance, show_decimals=True) }
          % endif
      - "money_card_3": |
          % if money.number_gathered() >= 3:
          ${ money[2].name.text }
          % endif
      - "money_holder_3": |
          % if money.number_gathered() >= 3:
          ${ money[2].holder }
          % endif
      - "money_balance_3": |
          % if money.number_gathered() >= 3:
          ${ thousands(money[2].balance, show_decimals=True) }
          % endif
      - "money_addendum_yes": ${ money.number_gathered() > 3 }
      # 15 Assets - Investments
      - "investment_name_1": |
          % if investments.there_are_any:
          ${ investments[0].name.text }
          % endif
      - "investment_shares_1": |
          % if investments.there_are_any:
          ${ investments[0].shares }
          % endif
      - "investment_type_1": |
          % if investments.there_are_any:
          ${ investments[0].type }
          % endif
      - "investment_owner_1": |
          % if investments.there_are_any:
          ${ investments[0].owner }
          % endif
      - "investment_fmv_1": |
          % if investments.there_are_any:
          ${ thousands(investments[0].fmv, show_decimals=True) }
          % endif
      - "investment_name_2": |
          % if investments.number_gathered() >= 2:
          ${ investments[1].name.text }
          % endif
      - "investment_shares_2": |
          % if investments.number_gathered() >= 2:
          ${ investments[1].shares }
          % endif
      - "investment_type_2": |
          % if investments.number_gathered() >= 2:
          ${ investments[1].type }
          % endif
      - "investment_owner_2": |
          % if investments.number_gathered() >= 2:
          ${ investments[1].owner }
          % endif
      - "investment_fmv_2": |
          % if investments.number_gathered() >= 2:
          ${ thousands(investments[1].fmv, show_decimals=True) }
          % endif
      - "investment_name_3": |
          % if investments.number_gathered() >= 2:
          ${ investments[2].name.text }
          % endif
      - "investment_shares_3": |
          % if investments.number_gathered() >= 2:
          ${ investments[2].shares }
          % endif
      - "investment_type_3": |
          % if investments.number_gathered() >= 2:
          ${ investments[2].type }
          % endif
      - "investment_owner_3": |
          % if investments.number_gathered() >= 2:
          ${ investments[2].owner }
          % endif
      - "investment_fmv_3": |
          % if investments.number_gathered() >= 3:
          ${ thousands(investments[2].fmv, show_decimals=True) }
          % endif
      - "investment_addendum_yes": ${ investments.number_gathered() > 3 }
      # 15 Assets - Investment securities
      - "securities_description_1": |
          % if securities.there_are_any:
          ${ securities[0].name.text }
          % endif
      - "securities_owner_1": |
          % if securities.there_are_any:
          ${ securities[0].owner }
          % endif
      - "securities_balance_1": |
          % if securities.there_are_any:
          ${ thousands(securities[0].balance, show_decimals=True) }
          % endif
      - "securities_description_2": |
          % if securities.number_gathered() >= 2:
          ${ securities[1].name.text }
          % endif
      - "securities_owner_2": |
          % if securities.number_gathered() >= 2:
          ${ securities[1].owner }
          % endif
      - "securities_balance_2": |
          % if securities.number_gathered() >= 2:
          ${ thousands(securities[1].balance, show_decimals=True) }
          % endif
      - "securities_description_3": |
          % if securities.number_gathered() >= 3:
          ${ securities[2].name.text }
          % endif
      - "securities_owner_3": |
          % if securities.number_gathered() >= 3:
          ${ securities[2].owner }
          % endif
      - "securities_balance_3": |
          % if securities.number_gathered() >= 3:
          ${ thousands(securities[2].balance, show_decimals=True) }
          % endif
      - "securities_addendum_yes": ${ securities.number_gathered() > 3 }
      # 15 Assets - Real Estate
      - "real_estate_address_1": |
          % if real_estate.there_are_any:
          ${ real_estate[0].address.on_one_line() }
          % endif
      - "real_estate_title_1": |
          % if real_estate.there_are_any:
          ${ real_estate[0].name.text }
          % endif
      - "real_estate_fmv_1": |
          % if real_estate.there_are_any:
          ${ thousands(real_estate[0].balance, show_decimals=True) }
          % endif
      - "real_estate_balance_1": |
          % if real_estate.there_are_any:
          ${ thousands(real_estate[0].balance, show_decimals=True) }
          % endif
      - "real_estate_address_2": |
          % if real_estate.number_gathered() >= 2:
          ${ real_estate[1].address.on_one_line() }
          % endif
      - "real_estate_title_2": |
          % if real_estate.number_gathered() >= 2:
          ${ real_estate[1].name.text }
          % endif
      - "real_estate_fmv_2": |
          % if real_estate.number_gathered() >= 2:
          ${ thousands(real_estate[1].balance, show_decimals=True) }
          % endif
      - "real_estate_balance_2": |
          % if real_estate.number_gathered() >= 2:
          ${ thousands(real_estate[1].balance, show_decimals=True) }
          % endif
      - "real_estate_address_3": |
          % if real_estate.number_gathered() >= 3:
          ${ real_estate[2].address.on_one_line() }
          % endif
      - "real_estate_title_3": |
          % if real_estate.number_gathered() >= 3:
          ${ real_estate[2].name.text }
          % endif
      - "real_estate_fmv_3": |
          % if real_estate.number_gathered() >= 3:
          ${ thousands(real_estate[2].fmv, show_decimals=True) }
          % endif
      - "real_estate_balance_3": |
          % if real_estate.number_gathered() >= 3:
          ${ thousands(real_estate[2].balance, show_decimals=True) }
          % endif
      - "real_estate_addendum_yes": ${ real_estate.number_gathered() > 3 }
      # 15 Assets - Motor Vehicles
      - "motor_vehicle_info_1": |
          % if motor_vehicle.there_are_any:
          ${ motor_vehicle[0].year } ${ motor_vehicle[0].make } ${ motor_vehicle[0].model }
          % endif
      - "motor_vehicle_title_1": |
          % if motor_vehicle.there_are_any:
          ${ motor_vehicle[0].name.text }
          % endif
      - "motor_vehicle_fmv_1": |
          % if motor_vehicle.there_are_any:
          ${ thousands(motor_vehicle[0].fmv, show_decimals=True) }
          % endif
      - "motor_vehicle_balance_1": |
          % if motor_vehicle.there_are_any:
          ${ thousands(motor_vehicle[0].balance, show_decimals=True) }
          % endif
      - "motor_vehicle_info_2": |
          % if motor_vehicle.number_gathered() >= 2:
          ${ motor_vehicle[1].year } ${ motor_vehicle[1].make } ${ motor_vehicle[1].model }
          % endif
      - "motor_vehicle_title_2": |
          % if motor_vehicle.number_gathered() >= 2:
          ${ motor_vehicle[1].name.text }
          % endif
      - "motor_vehicle_fmv_2": |
          % if motor_vehicle.number_gathered() >= 2:
          ${ thousands(motor_vehicle[1].fmv, show_decimals=True) }
          % endif
      - "motor_vehicle_balance_2": |
          % if motor_vehicle.number_gathered() >= 2:
          ${ thousands(motor_vehicle[1].balance, show_decimals=True) }
          % endif
      - "motor_vehicle_info_3": |
          % if motor_vehicle.number_gathered() >= 3:
          ${ motor_vehicle[2].year } ${ motor_vehicle[2].make } ${ motor_vehicle[2].model }
          % endif
      - "motor_vehicle_title_3": |
          % if motor_vehicle.number_gathered() >= 3:
          ${ motor_vehicle[2].name.text }
          % endif
      - "motor_vehicle_fmv_3": |
          % if motor_vehicle.number_gathered() >= 3:
          ${ thousands(motor_vehicle[2].fmv, show_decimals=True) }
          % endif
      - "motor_vehicle_balance_3": |
          % if motor_vehicle.number_gathered() >= 3:
          ${ thousands(motor_vehicle[2].balance, show_decimals=True) }
          % endif
      - "motor_vehicle_info_4": |
          % if motor_vehicle.number_gathered() >= 4:
          ${ motor_vehicle[3].year } ${ motor_vehicle[3].make } ${ motor_vehicle[3].model }
          % endif
      - "motor_vehicle_title_4": |
          % if motor_vehicle.number_gathered() >= 4:
          ${ motor_vehicle[3].name.text }
          % endif
      - "motor_vehicle_fmv_4": |
          % if motor_vehicle.number_gathered() >= 4:
          ${ thousands(motor_vehicle[3].fmv, show_decimals=True) }
          % endif
      - "motor_vehicle_balance_4": |
          % if motor_vehicle.number_gathered() >= 4:
          ${ thousands(motor_vehicle[3].balance, show_decimals=True) }
          % endif
      - "motor_vehicle_addendum_yes": ${ motor_vehicle.number_gathered() > 4 }
      # 15 Assets - Business interests
      - "business_interests_name_1": |
          % if business_interests.there_are_any:
          ${ business_interests[0].name.text }
          % endif
      - "business_interests_type_1": |
          % if business_interests.there_are_any:
          ${ business_interests[0].name.text }
          % endif
      - "business_interests_ownership_1": |
          % if business_interests.there_are_any:
          ${ nice_number(business_interests[0].ownership, use_word=False) }
          % endif
      - "business_interests_fmv_1": |
          % if business_interests.there_are_any:
          ${ thousands(business_interests[0].fmv, show_decimals=True) }
          % endif
      - "business_interests_name_2": |
          % if business_interests.number_gathered() >= 2:
          ${ business_interests[1].name.text }
          % endif
      - "business_interests_type_2": |
          % if business_interests.number_gathered() >= 2:
          ${ business_interests[1].type }
          % endif
      - "business_interests_ownership_2": |
          % if business_interests.number_gathered() >= 2:
          ${ nice_number(business_interests[1].ownership, use_word=False) }
          % endif
      - "business_interests_fmv_2": |
          % if business_interests.number_gathered() >= 2:
          ${ thousands(business_interests[1].fmv, show_decimals=True) }
          % endif
      - "business_interests_name_3": |
          % if business_interests.number_gathered() >= 3:
          ${ business_interests[2].name.text }
          % endif
      - "business_interests_type_3": |
          % if business_interests.number_gathered() >= 3:
          ${ business_interests[2].type }
          % endif
      - "business_interests_ownership_3": |
          % if business_interests.number_gathered() >= 3:
          ${ nice_number(business_interests[2].ownership, use_word=False) }
          % endif
      - "business_interests_fmv_3": |
          % if business_interests.number_gathered() >= 3:
          ${ thousands(business_interests[2].fmv, show_decimals=True) }
          % endif
      - "business_interests_addendum_yes": ${ business_interests.number_gathered() > 3 }
      # 15 Assets - Life insurance
      - "life_insurance_company_1": |
          % if life_insurance.there_are_any:
          ${ life_insurance[0].name.text }
          % endif
      - "life_insurance_type_1": |
          % if life_insurance.there_are_any:
          ${ life_insurance[0].type }
          % endif
      - "life_insurance_benefit_1": |
          % if life_insurance.there_are_any:
          ${ thousands(life_insurance[0].benefit, show_decimals=True) }
          % endif
      - "life_insurance_value_1": |
          % if life_insurance.there_are_any:
          ${ thousands(life_insurance[0].value, show_decimals=True) }
          % endif
      - "life_insurance_company_2": |
          % if life_insurance.number_gathered() >= 2:
          ${ life_insurance[1].name.text }
          % endif
      - "life_insurance_type_2": |
          % if life_insurance.number_gathered() >= 2:
          ${ life_insurance[1].type }
          % endif
      - "life_insurance_benefit_2": |
          % if life_insurance.number_gathered() >= 2:
          ${ thousands(life_insurance[1].benefit, show_decimals=True) }
          % endif
      - "life_insurance_value_2": |
          % if life_insurance.number_gathered() >= 2:
          ${ thousands(life_insurance[1].value, show_decimals=True) }
          % endif
      - "life_insurance_company_3": |
          % if life_insurance.number_gathered() >= 3:
          ${ life_insurance[2].name.text }
          % endif
      - "life_insurance_type_3": |
          % if life_insurance.number_gathered() >= 3:
          ${ life_insurance[2].type }
          % endif
      - "life_insurance_benefit_3": |
          % if life_insurance.number_gathered() >= 3:
          ${ thousands(life_insurance[2].benefit, show_decimals=True) }
          % endif
      - "life_insurance_value_3": |
          % if life_insurance.number_gathered() >= 3:
          ${ thousands(life_insurance[2].value, show_decimals=True) }
          % endif
      - "life_insurance_addendum_yes": ${ life_insurance.number_gathered() > 3 }
      # 15 Assets - retirement benefits
      - "retirement_plan_1": |
          % if retirement_plan.there_are_any:
          ${ retirement_plan[0].name.text }
          % endif
      - "retirement_type_1": |
          % if retirement_plan.there_are_any:
          ${ retirement_plan[0].name.text }
          % endif
      - "retirement_balance_1": |
          % if retirement_plan.there_are_any:
          ${ thousands(retirement_plan[0].balance, show_decimals=True) }
          % endif
      - "retirement_plan_2": |
          % if retirement_plan.number_gathered() >= 2:
          ${ retirement_plan[1].name.text }
          % endif
      - "retirement_type_2": |
          % if retirement_plan.number_gathered() >= 2:
          ${ retirement_plan[1].name.text }
          % endif
      - "retirement_balance_2": |
          % if retirement_plan.number_gathered() >= 2:
          ${ thousands(retirement_plan[1].balance, show_decimals=True) }
          % endif
      - "retirement_plan_3": |
          % if retirement_plan.number_gathered() >= 3:
          ${ retirement_plan[2].name.text }
          % endif
      - "retirement_type_3": |
          % if retirement_plan.number_gathered() >= 3:
          ${ retirement_plan[2].name.text }
          % endif
      - "retirement_balance_3": |
          % if retirement_plan.number_gathered() >= 3:
          ${ thousands(retirement_plan[2].balance, show_decimals=True) }
          % endif
      - "retirement_addendum_yes": ${ retirement_plan.number_gathered() > 3 }
      # 15 Assets - valuable collectibles
      - "collection_description_1": |
          % if collection.there_are_any:
          ${ collection[0].name.text }
          % endif
      - "collection_fmv_1": |
          % if collection.there_are_any:
          ${ thousands(collection[0].fmv, show_decimals=True) }
          % endif
      - "collection_description_2": |
          % if collection.number_gathered() >= 2:
          ${ collection[1].name.text }
          % endif
      - "collection_fmv_2": |
          % if collection.number_gathered() >= 2:
          ${ thousands(collection[1].fmv, show_decimals=True) }
          % endif
      - "collection_description_3": |
          % if collection.number_gathered() >= 3:
          ${ collection[2].name.text }
          % endif
      - "collection_fmv_3": |
          % if collection.number_gathered() >= 3:
          ${ thousands(collection[2].fmv, show_decimals=True) }
          % endif
      - "collection_addendum_yes": ${ collection.number_gathered() > 3 }
      # 15 Assets - other personal property
      - "other_property_description_1": |
          % if other_property.there_are_any:
          ${ other_property[0].name.text }
          % endif
      - "other_property_fmv_1": |
          % if other_property.there_are_any:
          ${ thousands(other_property[0].fmv, show_decimals=True) }
          % endif
      - "other_property_description_2": |
          % if other_property.number_gathered() >= 2:
          ${ other_property[1].name.text }
          % endif
      - "other_property_fmv_2": |
          % if other_property.number_gathered() >= 2:
          ${ thousands(other_property[1].fmv, show_decimals=True) }
          % endif
      - "other_property_description_3": |
          % if other_property.number_gathered() >= 3:
          ${ other_property[2].name.text }
          % endif
      - "other_property_fmv_3": |
          % if other_property.number_gathered() >= 3:
          ${ thousands(other_property[2].fmv, show_decimals=True) }
          % endif
      - "other_property_addendum_yes": ${ other_property.number_gathered() > 3 }
      # 15 Assets - transfer/sale property
      - "transfer_description_1": |
          % if transfer.there_are_any:
          ${ transfer[0].name.text }
          % endif
      - "transfer_sold_1": |
          % if transfer.there_are_any:
          ${ transfer[0].sold }
          % endif
      - "transfer_date_1": |
          % if transfer.there_are_any:
          ${ transfer[0].date.format('MM/dd/yyyy') }
          % endif
      - "transfer_amount_1": |
          % if transfer.there_are_any:
          ${ thousands(transfer[0].amount, show_decimals=True) }
          % endif
      - "transfer_description_2": |
          % if transfer.number_gathered() >= 2:
          ${ transfer[1].name.text }
          % endif
      - "transfer_sold_2": |
          % if transfer.number_gathered() >= 2:
          ${ transfer[1].sold }
          % endif
      - "transfer_date_2": |
          % if transfer.number_gathered() >= 2:
          ${ transfer[1].date.format('MM/dd/yyyy') }
          % endif
      - "transfer_amount_2": |
          % if transfer.number_gathered() >= 2:
          ${ thousands(transfer[1].amount, show_decimals=True) }
          % endif
      - "transfer_description_3": |
          % if transfer.number_gathered() >= 3:
          ${ transfer[2].name.text }
          % endif
      - "transfer_sold_3": |
          % if transfer.number_gathered() >= 3:
          ${ transfer[2].sold }
          % endif
      - "transfer_date_3": |
          % if transfer.number_gathered() >= 3:
          ${ transfer[2].date.format('MM/dd/yyyy') }
          % endif
      - "transfer_amount_3": |
          % if transfer.number_gathered() >= 3:
          ${ thousands(transfer[2].amount, show_decimals=True) }
          % endif
      - "transfer_addendum_yes": ${ transfer.number_gathered() > 3 }
      # 16 Lawsuits and Claims
      - "lawsuit_number_1": |
          % if lawsuits.there_are_any:
          ${ lawsuits[0].case }
          % endif
      - "lawsuit_date_1":  |
          % if lawsuits.there_are_any:
          ${ lawsuits[0].date.format('MM/dd/yyyy') }
          % endif
      - "lawsuit_amount_1": |
          % if lawsuits.there_are_any:
          ${ thousands(lawsuits[0].amount, show_decimals=True) }
          % endif
      - "lawsuit_number_2": |
          % if lawsuits.number_gathered() >= 2:
          ${ lawsuits[1].case }
          % endif
      - "lawsuit_date_2":  |
          % if lawsuits.number_gathered() >= 2:
          ${ lawsuits[1].date.format('MM/dd/yyyy') }
          % endif
      - "lawsuit_amount_2": |
          % if lawsuits.number_gathered() >= 2:
          ${ thousands(lawsuits[1].amount, show_decimals=True) }
          % endif
      - "lawsuit_number_3": |
          % if lawsuits.number_gathered() >= 3:
          ${ lawsuits[2].case }
          % endif
      - "lawsuit_date_3":  |
          % if lawsuits.number_gathered() >= 3:
          ${ lawsuits[2].date.format('MM/dd/yyyy') }
          % endif
      - "lawsuit_amount_3": |
          % if lawsuits.number_gathered() >= 3:
          ${ thousands(lawsuits[2].amount, show_decimals=True) }
          % endif
      - "lawsuit_addendum_yes":  ${ lawsuits.number_gathered() > 3 }
      # 17 Income Tax Refund/Owed Amounts
      - "taxes_year1": |
          % if taxes_filed:
          ${ current_datetime().year - 1 }
          % endif
      - "taxes_federal_refund1": |
          % if taxes_filed:
          ${ taxes[0].federal_tax == 'refund' }
          % endif
      - "taxes_federal_refund_amount1": |
          % if taxes_filed and taxes[0].federal_tax == 'refund':
          ${ thousands(taxes[0].federal_refund, show_decimals=True) }
          % endif
      - "taxes_federal_owed1": |
          % if taxes_filed:
          ${ taxes[0].federal_tax == 'owed' }
          % endif
      - "taxes_federal_owed_amount1": |
          % if taxes_filed and taxes[0].federal_tax == 'owed':
          ${ thousands(taxes[0].federal_owed, show_decimals=True) }
          % endif
      - "taxes_state_refund1": |
          % if taxes_filed:
          ${ taxes[0].state_tax == 'refund' }
          % endif
      - "taxes_state_refund_amount1": |
          % if taxes_filed and taxes[0].state_tax == 'refund':
          ${ thousands(taxes[0].state_refund, show_decimals=True) }
          % endif
      - "taxes_state_owed1": |
          % if taxes_filed:
          ${ taxes[0].state_tax == 'owed' }
          % endif
      - "taxes_state_owed_amount1": |
          % if taxes_filed and taxes[0].state_tax == 'owed':
          ${ thousands(taxes[0].state_owed, show_decimals=True) }
          % endif
      - "taxes_year2": |
          % if taxes_filed_two_years:
          ${ current_datetime().year - 2 }
          % endif
      - "taxes_federal_refund2": |
          % if taxes_filed_two_years:
          ${ taxes[1].federal_tax == 'refund' }
          % endif
      - "taxes_federal_refund_amount2": |
          % if taxes_filed_two_years and taxes[1].federal_tax == 'refund':
          ${ thousands(taxes[1].federal_refund, show_decimals=True) }
          % endif
      - "taxes_federal_owed2": |
          % if taxes_filed_two_years:
          ${ taxes[1].federal_tax == 'owed' }
          % endif
      - "taxes_federal_owed_amount2": |
          % if taxes_filed_two_years and taxes[1].federal_tax == 'owed':
          ${ thousands(taxes[1].federal_owed, show_decimals=True) }
          % endif
      - "taxes_state_refund2": |
          % if taxes_filed_two_years:
          ${ taxes[1].state_tax == 'refund' }
          % endif
      - "taxes_state_refund_amount2": |
          % if taxes_filed_two_years and taxes[1].state_tax == 'refund':
          ${ thousands(taxes[1].state_refund, show_decimals=True) }
          % endif
      - "taxes_state_owed2": |
          % if taxes_filed_two_years:
          ${ taxes[1].state_tax == 'owed' }
          % endif
      - "taxes_state_owed_amount2": |
          % if taxes_filed_two_years and taxes[1].state_tax == 'owed':
          ${ thousands(taxes[1].state_owed, show_decimals=True) }
          % endif

      - "users_signature": |
          ${ "/s/ " + users[0].name.full(middle="full") if e_signature else ''  }
      - "users_signed_date": ${ today() if e_signature else '' }

---
############ FA EMPLOYMENT/BUSINESS INCOME ADDENDUM #############
objects:
  - employment[i].additional_employment: ALDocument.using(title="FA Additional Employment Business", filename="fa_additional_employment_business.pdf", has_addendum=False)
---
objects:
  - additional_employment_bundle: ALDocumentBundle.using(elements=[], title= "FA Additional Employment Bundle", filename="fa_additional_employment_business.pdf", has_addendum=False)
---
reconsider: True
code: |
  employment_to_bundle = []
  additional_employment_bundle.enabled = False

  if employment.number_gathered():
    for index, el in enumerate(employment):
      # No need for additional employment or business income unless employment.number_gathered() >= 1
      if index == 0:
        el.additional_employment.enabled = False
      else:
        el.additional_employment.enabled = True
        additional_employment_bundle.enabled = True
        employment_to_bundle.append(el.additional_employment)

  additional_employment_bundle.elements = employment_to_bundle
  complete_additional_employment = True
---
attachment:
  variable name: employment[i].additional_employment[j]
  name: additional_employment
  filename: additional_employment
  skip undefined: True
  editable: False
  pdf template file: fa_additional_employment_business.pdf
  fields:
      - "county_name": ${ case_county }
      - "case_number": ${ case_number }
      - "pre-judgment": ${ filing_status == "pre_judgment" }
      - "post-judgment": ${ filing_status == "post_judgment" }
      - "petitioner_name": |
          % if party_label == 'petitioner':
          ${ users[0].name.full(middle='full') }
          % else:
          ${ other_parties[0].name.full(middle='full') }
          % endif
      - "respondent_name": |
          % if opposing_label == 'respondent':
          ${ other_parties[0].name.full(middle='full') }
          % else:
          ${ users[0].name.full(middle='full') }
          % endif
      - "petitioner_yes": ${ party_label == 'petitioner' }
      - "respondent_yes": ${ party_label == 'respondent' }

      - "employed_yes": ${ employment[i].type == 'employed' }
      - "employer_name": |
          % if employment[i].type == "employed":
          ${ employment[i].name.text }
          % endif
      - "employer_address": |
          % if employment[i].type == "employed":
          ${ employment[i].address.line_one(bare=True) }
          % endif
      - "employer_address2": |
          % if employment[i].type == "employed":
          ${ employment[i].address.line_two() }
          % endif
      - "paychecks_monthly": |
          % if employment[i].type == "employed":
          ${ employment[i].frequency == "12" }
          % endif
      - "paychecks_bi_monthly": |
          % if employment[i].type == "employed":
          ${ employment[i].frequency == "24" }
          % endif
      - "paychecks_two_weeks": |
          % if employment[i].type == "employed":
          ${ employment[i].frequency == "26" }
          % endif
      - "paychecks_weekly": |
          % if employment[i].type == "employed":
          ${ employment[i].frequency == "52" }
          % endif
      - "paychecks_cash": |
          % if employment[i].type == "employed":
          ${ employment[i].cash_payment }
          % endif
      - "income_gross": |
          % if employment[i].type == "employed":
          ${ thousands(employment[i].gross_income, show_decimals=True) }
          % endif
      - "income_date": |
          % if employment[i].type == "employed":
          ${ employment[i].gross_date.format('MM/dd/yyyy') }
          % endif
      # business
      - "business_own": ${ employment[i].type == "own" }
      - "business_contractor": ${ employment[i].type == "contractor" }
      - "business_partnership": ${ employment[i].type == "partnership" }
      - "business_llc": ${ employment[i].type == "llc" }
      - "business_corporation": ${ employment[i].type == "corp" }
      - "business_other_entity": ${ employment[i].type == "other_entity" }
      - "business_name": |
          % if employment[i].type != "employed":
          ${ employment[i].name.text }
          % endif
      - "business_address": |
          % if employment[i].type != "employed":
          ${ employment[i].address.line_one(bare=True) }
          % endif
      - "business_address2": |
          % if employment[i].type != "employed":
          ${ employment[i].address.line_two() }
          % endif
      - "business_gross_last_year": |
          % if employment[i].type != "employed":
          ${ thousands(employment[i].income_last_year, show_decimals=True) }
          % endif
      - "business_gross_current_year": |
          % if employment[i].type != "employed":
          ${ thousands(employment[i].income_current_year, show_decimals=True) }
          % endif           
      - "business_expense_last_year": |
          % if employment[i].type != "employed":
          ${ thousands(employment[i].expenses_last_year, show_decimals=True) }
          % endif
      - "business_expense_current_year": |
          % if employment[i].type != "employed":
          ${ thousands(employment[i].expenses_current_year, show_decimals=True) }
          % endif
      - "business_meals": |
          % if employment[i].type != "employed":
          ${ employment[i].perks['meals'] }
          % endif
      - "business_car": |
          % if employment[i].type != "employed":
          ${ employment[i].perks['car'] }
          % endif
      - "business_housing": |
          % if employment[i].type != "employed":
          ${ employment[i].perks['housing'] }
          % endif
      - "business_other": |
          % if employment[i].type != "employed":
          ${ employment[i].perks['other'] }
          % endif
      - "business_other_detail": |
          % if employment[i].type != "employed":
          ${ employment[i].other_perks }
          % endif
---
############ FA ADDITIONAL HEALTH INSURANCE #############
objects:
  - insurance[i].additional_health_insurance: ALDocument.using(title="FA Additional Health Insurance", filename="FA_additional_health_insurance.pdf", has_addendum=False)
---
objects:
  - additional_health_insurance_bundle: ALDocumentBundle.using(elements=[], title= "FA Additional Health Insurance Bundle", filename="FA_additional_health_insurance.pdf", has_addendum=False)
---
reconsider: True
code: |
  insurance_to_bundle = []
  additional_health_insurance_bundle.enabled = False

  if insurance.number_gathered():
    for index, el in enumerate(insurance):
      # No need for additional health insurance unless insurance.number_gathered() >= 1
      if index == 0:
        el.additional_health_insurance.enabled = False
      else:
        el.additional_health_insurance.enabled = True
        additional_health_insurance_bundle.enabled = True
        insurance_to_bundle.append(el.additional_health_insurance)

  additional_health_insurance_bundle.elements = insurance_to_bundle
  complete_additional_health_insurance = True
---
attachment:
  variable name: insurance[i].additional_health_insurance[j]
  name: additional_health_insurance
  filename: additional_health_insurance
  skip undefined: True
  editable: False
  pdf template file: FA_additional_health_insurance.pdf
  fields:
      - "county_name": ${ case_county }
      - "case_number": ${ case_number }
      - "pre-judgment": ${ filing_status == "pre_judgment" }
      - "post-judgment": ${ filing_status == "post_judgment" }
      - "petitioner_name": |
          % if party_label == 'petitioner':
          ${ users[0].name.full(middle='full') }
          % else:
          ${ other_parties[0].name.full(middle='full') }
          % endif
      - "respondent_name": |
          % if opposing_label == 'respondent':
          ${ other_parties[0].name.full(middle='full') }
          % else:
          ${ users[0].name.full(middle='full') }
          % endif
      - "petitioner_yes": ${ party_label == 'petitioner' }
      - "respondent_yes": ${ party_label == 'respondent' }

      - "health_insurance_yes": ${ insurance.there_are_any }
      - "health_insurance_no": ${ insurance.number_gathered() == 0 }
      - "health_insurance_company": |
          % if insurance.there_are_any:
          ${ insurance[i].name.text }
          % endif
      - "insurance_type_dental": |
          % if insurance.there_are_any:
          ${ insurance[i].type == "Dental" }
          % endif
      - "insurance_type_medical": |
          % if insurance.there_are_any:
          ${ insurance[i].type == "Medical" }
          % endif
      - "insurance_type_vision": |
          % if insurance.there_are_any:
          ${ insurance[i].type == "Vision" }
          % endif          
      - "insurance_type_orthodontic": |
          % if insurance.there_are_any:
          ${ insurance[i].type == "Orthodontic" }
          % endif          
      - "policy_type_ppo": |
          % if insurance.there_are_any:
          ${ insurance[i].policy == "PPO" }
          % endif
      - "policy_type_hmo": |
          % if insurance.there_are_any:
          ${ insurance[i].policy == "HMO" }
          % endif         
      - "policy_type_other": |
          % if insurance.there_are_any:
          ${ insurance[i].policy == "Other" }
          % endif
      - "insurance_provided_employer": |
          % if insurance.there_are_any:
          ${ insurance[i].provider == "employer" }
          % endif         
      - "insurance_provided_private": |
          % if insurance.there_are_any:
          ${ insurance[i].provider == "private" }
          % endif 
      - "insurance_provided_group": |
          % if insurance.there_are_any:
          ${ insurance[i].provider == "group" }
          % endif          
      - "insurance_provided_public": |
          % if insurance.there_are_any:
          ${ insurance[i].provider == "public" }
          % endif
      - "insurance_total_covered": |
          % if insurance.there_are_any:
          ${ nice_number(insurance[i].total_covered, use_word=False) }
          % endif
      - "insurance_covers_myself": |
          % if insurance.there_are_any:
          ${ insurance[i].coverage == "myself" }
          % endif
      - "insurance_covers_both": |
          % if insurance.there_are_any:
          ${ insurance[i].coverage == "both" }
          % endif
      - "insurance_covers_children_current": |
          % if insurance.there_are_any:
          ${ insurance[i].coverage == "children_current" }
          % endif
      - "insurance_covers_children_other": |
          % if insurance.there_are_any:
          ${ insurance[i].coverage == "children_other" }
          % endif
      - "other_children_covered": |
          % if insurance.there_are_any and insurance[i].coverage == "children_other":
          ${ insurance[i].other_children_covered }
          % endif
      - "insurance_monthly_cost":   |
          % if insurance.there_are_any:
          ${ thousands(insurance[i].monthly_cost, show_decimals=True) }
          % endif
      - "insurance_paid_myself":  |
          % if insurance.there_are_any:
          ${ insurance[i].paid == "myself" }
          % endif
      - "insurance_paid_partner":  |
          % if insurance.there_are_any:
          ${ insurance[i].paid == "partner" }
          % endif
      - "insurance_paid_other":  |
          % if insurance.there_are_any:
          ${ insurance[i].paid == "other" }
          % endif
      - "insurance_paid_other_description":   |
          % if insurance.there_are_any and insurance[i].paid == "other":
          ${ insurance[i].other_description }
          % endif
      - "cost_insurance_children":   |
          % if insurance.there_are_any:
          ${ thousands(insurance[i].cost_children, show_decimals=True) }
          % endif
      - "cost_insurance_children_current":   |
          % if insurance.there_are_any:
          ${ thousands(insurance[i].cost_children_current, show_decimals=True) }
          % endif
      - "individual_deductible":   |
          % if insurance.there_are_any:
          ${ thousands(insurance[i].individual_deductible, show_decimals=True) }
          % endif
      - "family_deductible":   |
          % if insurance.there_are_any:
          ${ thousands(insurance[i].family_deductible, show_decimals=True) }
          % endif
      - "coinsurance":  |
          % if insurance.there_are_any:
          ${ nice_number(insurance[i].coinsurance, use_word=False) }
          % endif
      - "copayment":  |
          % if insurance.there_are_any:
          ${ thousands(insurance[i].copayment, show_decimals=True) }
          % endif
      - "insurance_additional_yes": ${ insurance.number_gathered() > 2 }
      - "additional_count": |
          % if insurance.number_gathered() > 2:
          ${ insurance.number_gathered() - 1 }
          % endif 
---
