metadata:
  title: Financial affidavit
  short title: Financial affidavit
  comment: This program helps you make forms that provide financial information and documents to the other party in family law cases.
  authors:
    - Jim Graszer
    - Matt Newsted
---
include:
  - docassemble.AssemblyLine:assembly_line.yml
  - docassemble.ILAO:ilao-interview-framework.yml
  - docassemble.ILAO:shared-basic-questions.yml
  - section_reviews.yml
  - fa_additional.yml
---
objects:
  - users: ALPeopleList.using(there_are_any=True)
  - other_parties: ALPeopleList.using(there_are_any=True)
  - employment: DAList.using(object_type=Thing, complete_attribute='complete')
  - employment[i].address: ALAddress
  - taxes: DAList.using(object_type=Thing, there_are_any=False)
  - insurance: DAList.using(object_type=Thing, complete_attribute='complete')
  - debts: DAList.using(object_type=Thing, complete_attribute='complete', there_are_any=True)
  - cash: DAList.using(object_type=Thing, complete_attribute='complete', there_are_any=True)
  - cert_deposit: DAList.using(object_type=Thing, complete_attribute='complete', there_are_any=True)
  - money: DAList.using(object_type=Thing, complete_attribute='complete', there_are_any=True)
  - investments: DAList.using(object_type=Thing, complete_attribute='complete', there_are_any=True)
  - securities: DAList.using(object_type=Thing, complete_attribute='complete', there_are_any=True)
  - real_estate: DAList.using(object_type=Thing, complete_attribute='complete', there_are_any=True)
  - real_estate[i].address: ALAddress
  - motor_vehicle: DAList.using(object_type=Thing, complete_attribute='complete', there_are_any=True)
  - business_interests: DAList.using(object_type=Thing, complete_attribute='complete', there_are_any=True)
  - life_insurance: DAList.using(object_type=Thing, complete_attribute='complete', there_are_any=True)
  - retirement_plan: DAList.using(object_type=Thing, complete_attribute='complete', there_are_any=True)
  - collection: DAList.using(object_type=Thing, complete_attribute='complete', there_are_any=True)
  - other_property: DAList.using(object_type=Thing, complete_attribute='complete', there_are_any=True)
  - transfer: DAList.using(object_type=Thing, complete_attribute='complete', there_are_any=True)
  - lawsuits: DAList.using(object_type=Thing, complete_attribute='complete', there_are_any=True)
  - court_list: ALCourtLoader.using(file_name='docassemble.ILAO:data/sources/il_courts.xlsx')
---
code: |
  al_form_type = 'existing_case'
  ilao_easy_form_title = "Financial affidavit"
  ilao_easy_form_url = "https://www.illinoislegalaid.org/legal-information/financial-affidavit"
  form_name = "Financial affidavit"
  github_user = 'IllinoisLegalAidOnline'
  github_repo_name = 'docassemble-FinancialAffidavit'
  allowed_courts = ['Circuit']
---
sections:
  - section_intro: Start
  - section_case: Case information
  - section_user: About you
  - section_income: Income
  - section_expenses: Expenses and debts
  - section_assets: Assets
  - section_final: Final steps
  - section_download: Download
---
#################### Interview order #####################
mandatory: True
code: |
  nav.set_section('section_intro')
  sees_nav_bar
  snapshot_start
  set_progress(5)
  how_to_use
  accept_terms
  about_the_financial_affidavit
  if family_case == False:
    family_kickout
  set_progress(10)
  nav.set_section('section_case')
  users[0].name.first
  party_label
  other_parties[0].name.first
  case_county
  case_number
  filing_status
  set_progress(20)
  nav.set_section('section_user')
  if hide_contact == False:
    users[0].address.address
    users[0].phone_number
  users[0].birthdate
  household_expenses
  users_acknowledge
  set_progress(30)
  nav.set_section('section_income')
  if employment.there_are_any == True:
    employment.gather()

  if taxes_filed == True:
    taxes_filed_status
    taxes[0].federal_tax
  if taxes_filed_two_years == True:
    taxes[1].federal_tax

  monthly_income_intro
  users[0].regular_pay_question
  users[0].pension_question
  users[0].rental_income_question
  users[0].social_retirement_question
  users[0].maintenance_current_question
  users[0].gifts_money_question
  income_summary

  set_progress(50)
  nav.set_section('section_expenses') 
  expenses_intro
  users[0].deductions_federal_question
  users[0].maintenance_paid_court_question
  users[0].child_support_1_question
  
  users[0].living_house_payment_question
  users[0].living_gas_question
  users[0].living_laundry_question

  users[0].transport_payment_question

  users[0].personal_doctor_question
  users[0].personal_associations_question
  users[0].personal_life_term_question
  users[0].personal_clothing_question
  users[0].personal_gifts_question

  if users[0].children_expenses_question:
    users[0].children_clothing_question
    users[0].children_tuition_question
    users[0].children_doctor_question
    users[0].children_allowance_question 
    users[0].children_vacations_question 
    users[0].children_other_question

  expenses_summary

  if insurance.there_are_any:
    insurance.gather()

  set_progress(60)
  if has_debts:
    debts.gather()

  set_progress(70)
  nav.set_section('section_assets')
  assets_intro
  if has_cash_assets:
    cash.gather()
  if has_cert_deposit:
    cert_deposit.gather()
  if has_money:
    money.gather()
  if has_investments:
    investments.gather()
  if has_securities:
    securities.gather()
  if has_real_estate:
    real_estate.gather()
  if has_motor_vehicle:
    motor_vehicle.gather()
  if has_business_interests:
    business_interests.gather()
  if has_life_insurance:
    life_insurance.gather()
  if has_retirement_plan:
    retirement_plan.gather()
  if has_collection:
    collection.gather()
  if has_other_property:
    other_property.gather()
  if has_transfer:
    transfer.gather()
  
  if has_lawsuits:
    lawsuits.gather()

  set_progress(90)
  nav.set_section('section_final')
  users[0].attached_documents
  e_signature

  set_progress(100)
  nav.set_section('section_download')
  forms_assembling
  snapshot_forms
  get_docs_screen
---
code: |
  stuff_to_snapshot = {
  	'start_time': str(current_datetime().format_datetime()),
  	'started_interview': True, 
  	}

  try:
    stuff_to_snapshot['ip_address'] = device(ip=True)
  except:
    pass

  stuff_to_snapshot['zip'] = showifdef('users[0].address.zip')

  stuff_to_snapshot['downloaded_forms'] = showifdef('forms_assembling')
  
  store_variables_snapshot(
  	data=stuff_to_snapshot, persistent=True
  	)
  snapshot_interview_state = True
---
code: |
  snapshot_interview_state
  snapshot_start = True  
---
code: |
  reconsider('snapshot_interview_state')
  snapshot_forms = True
---
id: welcome
continue button field: sees_nav_bar
question: |
  Financial affidavit
subquestion: |
  Welcome to Illinois Legal Aid Online's **Financial affidavit** Easy Form.

    If you are in a court case for divorce, child support, or temporary maintenance, you and the other person will probably have to share infomration about your income, property, and expenses. 

  This program helps you make forms that provide financial information and documents to the other party in family law cases.
---
id: how to use
continue button field: how_to_use
question: |
  Instructions
subquestion: |
  To complete this program, you will need to know:

  * Your monthly income and expenses
  * Your expenses for children and other dependents, if any
  * Your income tax refunds or amounts owed for the last 2 years (federal and state)
  * Your debts and liabilities
  * Your assets, such as bank accounts, real estate, vehicles, and retirement benefits

  It could take 30 minutes to 60 minutes to finish this program. You can log in and save your work to return to later. 
 
  ${ collapse_template(help_example) }  

  Click on **{green words}** to learn what they mean. Some questions have a question mark in a circle ${ fa_icon("question-circle", color_css="#0dcaf0" ) } that also gives help.
---
template: help_example
subject: |
  **You can expand sections like this to show more information.**
content: |  
  This is an example of help. Click again to hide.
---
id: whats next
continue button field: about_the_financial_affidavit
question: |
  About the *Financial Affidavit*
subquestion: |
  The *Financial Affidavit* is a very long form. This program will help you fill it out and avoid mistakes.
  
  After you complete this Easy Form, you must send a copy of the completed *Financial Affidavit* and supporting documents to the other party in the case. If a party has a lawyer, send it to the lawyer.

  You can use ILAO's [**Proof of delivery**](https://www.illinoislegalaid.org/node/86991) Easy Form to make the other forms that show when you sent your Financial Affidavit and supporting documents.
  
  **Note:** You do not need to file your *Financial Affidavit* with the Circuit Clerk. However, you do need to file your *Proof of Delivery*.
  
---
id: family case 
question: |
  Do you have a family law case in Illinois?
subquestion: |
  The case can be ongoing or one where a final Judgment or Order was entered.
fields:
  - no label: family_case
    datatype: yesnoradio
---
id: family case kickout
event: family_kickout
question: |
  Sorry
subquestion: |
  You can only use this program if you have a family law case in Illinois.

  Use **[Get Legal Help](https://www.illinoislegalaid.org/get-legal-help)** to find free or low-cost legal services in your area.
buttons:
  - Exit: exit
  - Restart: restart
---
############### CASE INFORMATION ###############
id: case county
question: |
  In which county was this case filed?
fields:
  - County: case_county
    code:
      court_list._load_courts()["address_county"].unique()
---
id: case number
question: |
  What is the case number?
subquestion: |
  ${ collapse_template(case_number_help) }
fields:
  - Case number: case_number
    maxlength: 19
---
template: case_number_help
subject: |
  **Learn about case numbers**
content: |  
  The case number should be on your court papers. Look at the Complaint or Petition, or the Summons if you received one. It is usually in the top-right part of the first page.
  
  If you started the case, the court clerk should have given you the case number.
  
  In this example, the case number is **2022 EXAMPLE 123**.
  
  [FILE case_number_example.png, 100%, Summons form showing case number]
---  
id: case filing status
question: |
  What is the status of your family law case?
subquestion: |
  If your case is complete, there should be a final order or judgment that was entered.

  If no such order was entered, your case is "pending," and you probably have another court date scheduled.

  For example, a *Judgment of Dissolution of Marriage/Civil Union* would be a final order in a divorce case.

  Select **Pre-judgment** if a final judgment or order **has not** been entered in your case or if you do not know.
fields:
  - Case status: filing_status
    datatype: radio
    choices:
      - Pre-judgment: pre_judgment
      - Post-judgment: post_judgment
---  
id: party label
question: |
  What is your party label in the case?
subquestion: |
  ${ collapse_template(which_party) }  
field: party_label
choices:
  - Petitioner or Plaintiff: petitioner
  - Respondent or Defendant: respondent
---
template: which_party
subject: |
  **Learn more about party labels**
content: |
  If you filed a new case, you are either the Plaintiff or the Petitioner.

  If someone filed the case against you, you are either the Defendant or the Respondent.

  Most family law cases use Petitioner and Respondent.
  
  The other court papers in the case should help you figure it out. Look at the top (the caption)
  of the Petition, Complaint, or Order. That form should have a label by your name.
---
id: your name
sets:
    - users[0].name.first
    - users[0].name.last
    - users[0].name.middle
    - users[0].name.suffix
question: |
  What is your name?
fields:
  - code: |
      users[0].name_fields()
---
code: |
  if party_label == 'petitioner':
    opposing_label = 'respondent'
  if party_label == 'respondent':
    opposing_label = 'petitioner'
---
id: other party name
sets:
  - other_parties[0].name.first
question: |
  What is the name of the ${ opposing_label }?
fields:
  - code: |
      other_parties[0].name_fields(person_or_business='person')
---
############### ABOUT YOU ###############
id: hide contact 
question: |
  Are your address and phone number protected by court order because of domestic violence or abuse?
subquestion: |
  If your contact information does not appear on other court papers because you have a protective order, you do not have to list them on your *Financial Affidavit*. 
fields:
  - no label: hide_contact
    datatype: yesnoradio
---
id: users address
sets:
  - users[0].address.address
  - users[0].address.city
  - users[0].address.state
  - users[0].address.zip
question: |
  What is your address?
subquestion: |
  **This address will appear on your form.** If you do not want this, click **Back** to keep your address hidden.
fields:
  - Street address: users[0].address.address
    address autocomplete: True
  - Address line 2: users[0].address.unit
    required: False
  - City: users[0].address.city
  - State: users[0].address.state
    code: |
      states_list()
    default: IL      
  - ZIP code: users[0].address.zip
---
id: user phone
question: |
  What is your phone number?
subquestion: |
  **This number will appear on your form.** If you do not want this, leave it blank.
fields:
  - Phone Number: users[0].phone_number
    datatype: al_international_phone
    required: False
---
id: user birthdate
question: |
  When were you born?
fields:
  - Birth date: users[i].birthdate
    datatype: BirthDate
    alMax: ${ today().format("yyyy-MM-dd") }
---
id: user expenses
question: |
  Do you currently live with another adult, **not ${other_parties[0].name.full()}**,
  who helps you pay your expenses?
fields:
  - no label: household_expenses
    datatype: yesnoradio
---
id: user acknowledge
continue button field: users_acknowledge
question: |
  Accuracy is important
subquestion: |
  <div class="alert alert-info ilao-info" role="alert">
    <h2 class="h4">Important</h2>
    <p>The information you provide in the <i>Financial Affidavit</i> must be true.</p>
    <p>If you intentionally or recklessly enter inaccurate or misleading information on this form, 
    you may face significant penalties and sanctions, including costs and attorney's fees.</p>
    <p>Do not file this document and the enclosures with the Circuit Clerk unless a local rule or 
    court order requires you to do so.</p>
    <p>Ask the Circuit Clerk where to find these rules.</p>
  </div>
---
########### INCOME ####################
id: income intro 
question: |
  Do you have a job or other business income?
subquestion: |
  This includes income:
  
  * From employment by a company or someone else,
  * From self-employment as a sole proprietorship or independent contractor, 
  * As a member of a partnership,
  * As a member of a limited liability company (LLC) not treated as a corporation,
  * From a closely-held corporation, and
  * From any other flow-through business entities.

  If you do not currently have a job or other business income, select **No**.
fields:
  - no label: employment.there_are_any
    datatype: yesnoradio
---
code: |
  employment[i].type
  employment[i].name.text
  if employment[i].type == "employed":
    employment[i].frequency
  else:
    employment[i].income_last_year
    employment[i].perks
  employment[i].complete = True 
---
id: other employment
question: |
  Do you have any other job or business income to include?
subquestion: |
  So far you have told us about ${comma_and_list(employment.complete_elements())}.
fields:
  - no label: employment.there_is_another
    datatype: yesnoradio
---
id: employment info
question: |
  What is your ${ordinal(i)} source of employment or business income? 
fields:
  - "Employment or business income source": employment[i].type
    datatype: radio
    choices:
			- Employed by a company or someone else: employed
      - Own a business as a sole proprietorship: own
      - Independent contractor: contractor
      - Member of a partnership: partnership
      - As a member of a limited liability company (LLC) not treated as a corporation: llc
			- A closely-held corporation: corp
			- Other flow-through business entity: other_entity
---
id: employer or business info 
question: |
  % if employment[i].type == 'employed':
  Employer information
  % else:
  Business information
  % endif
fields: 
  - Employer name: employment[i].name.text
    show if: 
      code: |
        employment[i].type == 'employed'
  - Business name: employment[i].name.text
    show if: 
      code: |
        employment[i].type != 'employed'
  - Street address: employment[i].address.address
    address autocomplete: True
  - Address line 2: employment[i].address.unit
    required: False
  - City: employment[i].address.city
  - State: employment[i].address.state
    code: |
      states_list()
  - ZIP code: employment[i].address.zip
---
id: employer pay 
question: |
  Details about pay from ${ employment[i].name.text }
fields:
  - Pay period: employment[i].frequency
    datatype: radio
    choices:
      - Once a month: 12
      - Twice a month: 24
      - Every two weeks: 26
      - Once a week: 52
  - "Are you paid in cash?": employment[i].cash_payment
    datatype: yesnoradio
  - "Gross income so far in ${ current_datetime().year } (enter last pay date below)": employment[i].gross_income
    datatype: currency
    help: |
      Gross income is the amount of pay you would receive before taxes and deductions are withheld.
  - "Gross income amount from January 1, ${ current_datetime().year } through:": employment[i].gross_date
    datatype: date
    max: ${ today().format("MM-dd-yyyy") }
    default: |
      ${ today().format("MM-dd-yyyy") }
---
id: business income 
question: |
  Income and expenses for ${ employment[i].name.text }
subquestion: |
  **Note:** You must attach complete business federal and state business tax returns for the most recent tax year.
fields:
  - Gross business receipts for last year (${ current_datetime().year - 1 }): employment[i].income_last_year
    datatype: currency
  - Gross business receipts so far this year (${ current_datetime().year }): employment[i].income_current_year
    datatype: currency
  - note: |
      ---
      What were your necessary business expenses?
  - Business expenses from last year (${ current_datetime().year - 1 }): employment[i].expenses_last_year
    datatype: currency  
  - Business expenses so far this year (${ current_datetime().year }): employment[i].expenses_current_year
    datatype: currency
---
id: business perks
question: |
  Do you receive any of these benefits from ${ employment[i].name.text }?
subquestion: |
  Check all that apply.
fields:
  - Benefits: employment[i].perks
    datatype: checkboxes
    choices: 
      - Reimbursed meals: meals
      - Company car: car
      - Free housing or housing allowance: housing
      - Other: other
    none of the above: False
  - Other benefits: employment[i].other_perks
    input type: area
    rows: 2
    maxlength: 60
    show if: 
      variable: employment[i].perks['other']
      is: True
---
id: filed taxes
question: |
  Did you file taxes for ${ current_datetime().year - 1 }?
fields:
  - no label: taxes_filed
    datatype: yesnoradio
---
id: filed taxes two years
question: |
  Did you file taxes for ${ current_datetime().year - 2 }?
fields:
  - no label: taxes_filed_two_years
    datatype: yesnoradio
---
id: filed taxes detail
question: |
  Tax return details for the year ${ current_datetime().year-1 }
fields:
  - What was your tax filing status last year?: taxes_filed_status
    datatype: radio
    choices: 
      - Married (Joint): joint
      - Married (Separate): separate
      - Single: single
      - Head of Household: household
  - How did you claim deductions last year?: deduction_type
    datatype: radio
    choices: 
      - the standardized deduction: standard
      - itemized deductions: itemized
  - Gross income from last year: gross_income_last_year
    datatype: currency
    help: |
      Gross income is the amount of income you would receive before taxes and deductions are withheld.
  - Did you claim any of these credits?: tax_claimed
    datatype: checkboxes
    choices: 
      - Child tax credit: child_credit
      - Additional child tax credit: additional
      - Credit for other dependents: dependents
      - Earned Income Credit: eic
      - Dependent care credit: care
---
id: federal state taxes last year
question: |
  Tax return details for ${ current_datetime().year-1 }
fields: 
  - Federal: taxes[0].federal_tax
    datatype: radio
    choices:
      - Refund: refund
      - Amount Owed: owed
  - What was your refund?: taxes[0].federal_refund
    datatype: currency
    min: 0
    show if:
      variable: taxes[0].federal_tax
      is: refund
  - How much did you owe?: taxes[0].federal_owed
    datatype: currency
    min: 0
    show if:
      variable: taxes[0].federal_tax
      is: owed
  - note: |
      ---
  - State: taxes[0].state_tax
    datatype: radio
    choices:
      - Refund: refund
      - Amount Owed: owed
  - What was your refund?: taxes[0].state_refund
    datatype: currency
    min: 0
    show if:
      variable: taxes[0].state_tax
      is: refund
  - How much did you owe?: taxes[0].state_owed
    datatype: currency
    min: 0
    show if:
      variable: taxes[0].state_tax
      is: owed
---
id: federal state taxes two years ago
question: |
  Tax return details for ${ current_datetime().year-2 }
fields: 
  - Federal: taxes[1].federal_tax
    datatype: radio
    choices:
      - Refund: refund
      - Amount Owed: owed
  - What was your refund?: taxes[1].federal_refund
    datatype: currency
    min: 0
    show if:
      variable: taxes[1].federal_tax
      is: refund
  - How much did you owe?: taxes[1].federal_owed
    datatype: currency
    min: 0
    show if:
      variable: taxes[1].federal_tax
      is: owed
  - note: |
      ---
  - State: taxes[1].state_tax
    datatype: radio
    choices:
      - Refund: refund
      - Amount Owed: owed
  - What was your refund?: taxes[1].state_refund
    datatype: currency
    min: 0
    show if:
      variable: taxes[1].state_tax
      is: refund
  - How much did you owe?: taxes[1].state_owed
    datatype: currency
    min: 0
    show if:
      variable: taxes[1].state_tax
      is: owed
---
id: monthly income intro
continue button field: monthly_income_intro
question: |
  Monthly income from all sources
subquestion: |
  The next screens will ask you about the income you receive each month. The *Fiancial Affidavit* includes almost 30 types of income. Here's how we break it down.

  * Employment income
  * Investment income
  * Other business income
  * Benefits income
  * Maintenance and support
  * Gifts and other income
  
---
id: monthly employment income 
question: |
  Monthly employment income
subquestion: |
  **Remember:** List the income you receive each month.
fields:
  - "Regular employment or self-employment earnings from all jobs, such as salary, wages, or base pay": users[0].regular_pay_question
    datatype: yesnowide
  - Monthly amount: users[0].regular_pay
    datatype: currency
    min: 0
    show if: users[0].regular_pay_question
  - Overtime: users[0].overtime_pay_question
    datatype: yesnowide
  - Monthly amount: users[0].overtime_pay
    datatype: currency
    min: 0
    show if: users[0].overtime_pay_question
  - Commission: users[0].commission_pay_question
    datatype: yesnowide
  - Monthly amount: users[0].commission_pay
    datatype: currency
    min: 0
    show if: users[0].commission_pay_question
  - Tips and gratuities: users[0].tips_question
    datatype: yesnowide
  - Monthly amount: users[0].tips
    datatype: currency
    min: 0
    show if: users[0].tips_question
  - Bonus: users[0].bonus_question
    datatype: yesnowide
  - Bonus: users[0].bonus
    datatype: currency
    min: 0
    show if: users[0].bonus_question
---
id: monthly investment income 
question: |
  Monthly investment income
subquestion: |
  **Remember:** List the income you receive each month.
fields:
  - Pension: users[0].pension_question
    datatype: yesnowide
  - Monthly amount: users[0].pension
    datatype: currency
    min: 0
    show if: users[0].pension_question
  - Annuity: users[0].annuity_question
    datatype: yesnowide
  - Monthly amount: users[0].annuity
    datatype: currency
    min: 0
    show if: users[0].annuity_question
  - Interest income: users[0].interest_question
    datatype: yesnowide
  - Monthly amount: users[0].interest
    datatype: currency
    min: 0
    show if: users[0].interest_question
  - Dividend income: users[0].dividend_question
    datatype: yesnowide
  - Monthly amount: users[0].dividend
    datatype: currency
    min: 0
    show if: users[0].dividend_question
  - Trust income: users[0].trust_question
    datatype: yesnowide
  - Monthly amount: users[0].trust
    datatype: currency
    min: 0
    show if: users[0].trust_question
  - Investment income: users[0].investment_question
    datatype: yesnowide
  - Monthly amount: users[0].investment
    datatype: currency
    min: 0
    show if: users[0].investment_question
---
id: monthly benefits income
question: |
  Monthly benefits income 
subquestion: |
  **Remember:** List the income you receive each month.
fields:
  - Social Security Retirement: users[0].social_retirement_question
    datatype: yesnowide
  - Monthly amount: users[0].social_retirement
    datatype: currency
    min: 0
    show if: users[0].social_retirement_question
  - Social Security Disability: users[0].social_disability_question
    datatype: yesnowide
  - Monthly amount: users[0].social_disability
    datatype: currency
    min: 0
    show if: users[0].social_disability_question
  - Social Security Income (SSI) (*not included as income for child support purposes*): users[0].social_income_question
    datatype: yesnowide
  - Monthly amount: users[0].social_income
    datatype: currency
    min: 0
    show if: users[0].social_income_question
  - Unemployment: users[0].unemployment_benefits_question
    datatype: yesnowide
  - Monthly amount: users[0].unemployment_benefits
    datatype: currency
    min: 0
    show if: users[0].unemployment_benefits_question
  - Disability payment (*not Social Security*): users[0].disability_benefits_question
    datatype: yesnowide
  - Monthly amount: users[0].disability_benefits
    datatype: currency
    min: 0
    show if: users[0].disability_benefits_question
  - Workers' Compensation: users[0].workers_comp_benefits_question
    datatype: yesnowide
  - Monthly amount: users[0].workers_comp_benefits
    datatype: currency
    min: 0
    show if: users[0].workers_comp_benefits_question
  - TANF and SNAP (*not included as income for child support purposes*): users[0].child_benefits_question
    datatype: yesnowide
  - Monthly amount: users[0].child_benefits
    datatype: currency
    min: 0
    show if: users[0].child_benefits_question
  - Military allowances: users[0].military_allowances_question
    datatype: yesnowide
  - Monthly amount: users[0].military_allowances
    datatype: currency
    min: 0
    show if: users[0].military_allowances_question
---
id: other monthly business income
question: |
  Other monthly business income
subquestion: |
  **Remember:** List the income you receive each month.
fields:
  - Rental income: users[0].rental_income_question
    datatype: yesnowide
  - Monthly amount: users[0].rental_income
    datatype: currency
    min: 0
    show if: users[0].rental_income_question
  - Partnership income: users[0].partnership_income_question
    datatype: yesnowide
  - Monthly amount: users[0].partnership_income
    datatype: currency
    min: 0
    show if: users[0].partnership_income_question
  - Distributions and draws: users[0].distributions_draws_question
    datatype: yesnowide
  - Monthly amount: users[0].distributions_draws
    datatype: currency
    min: 0
    show if: users[0].distributions_draws_question
  - Royalty income: users[0].royalty_income_question
    datatype: yesnowide
  - Monthly amount: users[0].royalty_income
    datatype: currency
    min: 0
    show if: users[0].royalty_income_question
---
id: monthly maintenance and support 
question: |
  Monthly maintenance and support
subquestion: |
  **Remember:** List the income you receive each month.
fields:
  - "Maintenance received under an order entered in this case or another case that you must report as income on your tax return": users[0].maintenance_current_question
    datatype: yesnowide
  - Monthly amount: users[0].maintenance_current
    datatype: currency
    min: 0
    show if: users[0].maintenance_current_question
  - "Maintenance received under an order entered in this case or another case that you do not have to report as income on your tax return": users[0].maintenance_alternate_question
    datatype: yesnowide
  - Monthly amount: users[0].maintenance_alternate
    datatype: currency
    min: 0
    show if: users[0].maintenance_alternate_question
  - "Child support for children of this relationship (if this support is paid by the other parent, it does not affect the support calculation)": users[0].child_support_current_question
    datatype: yesnowide
  - Monthly amount: users[0].child_support_current
    datatype: currency
    min: 0
    show if: users[0].child_support_current_question
  - "Social Security payment made to the children of this relationship based on your disability or retirement": users[0].social_security_current_question
    datatype: yesnowide
  - Monthly amount: users[0].social_security_current
    datatype: currency
    min: 0
    show if: users[0].social_security_current_question
---
id: monthly gifts other income
question: |
  Monthly gifts and other income
subquestion: |
  **Remember:** List the income you receive each month.
fields:
  - Gifts of money: users[0].gifts_money_question
    datatype: yesnowide
  - Monthly amount: users[0].gifts_money
    datatype: currency
    min: 0
    show if: users[0].gifts_money_question
  - Do you receive other types of income?: users[0].other_income_question
    datatype: yesnowide
  - "What is the source of the other income? (list all sources)": users[0].other_income_description
    maxlength: 60
    show if: users[0].other_income_question
  - Total monthly income from other sources?: users[0].other_income
    datatype: currency
    min: 0
    show if: users[0].other_income_question
---
depends on:
  - users[0].regular_pay
  - users[0].overtime_pay
  - users[0].commission_pay
  - users[0].tips
  - users[0].bonus
  - users[0].pension
  - users[0].annuity
  - users[0].interest
  - users[0].dividend
  - users[0].trust
  - users[0].investment 
  - users[0].social_retirement
  - users[0].social_disability
  - users[0].social_income
  - users[0].unemployment_benefits
  - users[0].disability_benefits
  - users[0].workers_comp_benefits
  - users[0].child_benefits
  - users[0].military_allowances
  - users[0].rental_income
  - users[0].partnership_income
  - users[0].distributions_draws
  - users[0].royalty_income 
  - users[0].maintenance_current
  - users[0].maintenance_alternate
  - users[0].child_support_current
  - users[0].social_security_current
  - users[0].gifts_money 
  - users[0].other_income
code: |
  total_monthly_employment_income = sum_if_defined(
    'users[0].regular_pay',
    'users[0].overtime_pay',
    'users[0].commission_pay',
    'users[0].tips',
    'users[0].bonus')
  total_monthly_investment_income = sum_if_defined(
    'users[0].pension',
    'users[0].annuity',
    'users[0].interest',
    'users[0].dividend',
    'users[0].trust',
    'users[0].investment')

  total_monthly_benefits_income = sum_if_defined(
    'users[0].social_retirement',
    'users[0].social_disability',
    'users[0].social_income',
    'users[0].unemployment_benefits',
    'users[0].disability_benefits',
    'users[0].workers_comp_benefits',
    'users[0].child_benefits',
    'users[0].military_allowances')

  total_other_monthly_business_income = sum_if_defined(
    'users[0].rental_income',
    'users[0].partnership_income',
    'users[0].distributions_draws',
    'users[0].royalty_income')

  total_monthly_maintenance_support_income = sum_if_defined(
    'users[0].maintenance_current',
    'users[0].maintenance_alternate',
    'users[0].child_support_current',
    'users[0].social_security_current')

  total_monthly_gifts_other_income = sum_if_defined(
    'users[0].gifts_money',
    'users[0].other_income')

  total_gross_monthly_income = sum_if_defined(
    'users[0].regular_pay',
    'users[0].overtime_pay',
    'users[0].commission_pay',
    'users[0].tips',
    'users[0].bonus',
    'users[0].pension',
    'users[0].annuity',
    'users[0].interest',
    'users[0].dividend',
    'users[0].trust',
    'users[0].investment',
    'users[0].social_retirement',
    'users[0].social_disability',
    'users[0].social_income',
    'users[0].unemployment_benefits',
    'users[0].disability_benefits',
    'users[0].workers_comp_benefits',
    'users[0].child_benefits',
    'users[0].military_allowances',
    'users[0].rental_income',
    'users[0].partnership_income',
    'users[0].distributions_draws',
    'users[0].royalty_income',
    'users[0].maintenance_current',
    'users[0].maintenance_alternate',
    'users[0].child_support_current',
    'users[0].social_security_current',
    'users[0].gifts_money',
    'users[0].other_income')
---
########### EXPENSES ###########
id: expenses intro 
continue button field: expenses_intro
question: |
  Monthly expenses
subquestion: |
  The next screens will ask you about your monthly expenses. The *Fiancial Affidavit* includes many types of expenses. Here's how we break it down.

  * Income deductions
  * Maintenance payments, if any
  * Child support payments, if any
  * Housing expenses
  * Utilities
  * Living expenses
  * Transportation
  * Medical expenses
  * Professional dues and fees
  * Insurance
  * Personal, entertainment, and vacation expenses
  * Gifts, donations, and other expenses

  If you have expenses for children or other dependents, they are grouped as follows:
  
  * Personal expenses like clothes and grooming
  * Education expenses
  * Medical expenses
  * Additional expenses like allowance and childcare
  * Vacation, entertainment, and other expenses

  After asking about monthly expenses, you can enter information about health insurance and any debts you have.

---
id: monthly deduction expenses
question: |
  Monthly income deductions
subquestion: |
  Monthly deductions are payments you must make every month. They may be automatically deducted from your paycheck, or you may have to make them on your own.
fields:
  - Federal income tax: users[0].deductions_federal_question
    datatype: yesnowide
  - Monthly amount: users[0].deductions_federal
    datatype: currency
    min: 0
    show if: users[0].deductions_federal_question
  - State income tax: users[0].deductions_state_question
    datatype: yesnowide
  - Monthly amount: users[0].deductions_state
    datatype: currency
    min: 0
    show if: users[0].deductions_state_question
  - FICA (or Social Security equivalent, such as Self-employment tax): users[0].deductions_fica_question
    datatype: yesnowide
  - Monthly amount: users[0].deductions_fica
    datatype: currency
    min: 0
    show if: users[0].deductions_fica_question
  - Medicare tax: users[0].deductions_medicare_question
    datatype: yesnowide
  - Monthly amount: users[0].deductions_medicare
    datatype: currency
    min: 0
    show if: users[0].deductions_medicare_question
  - Mandatory retirement contributions: users[0].deductions_retirement_question
    datatype: yesnowide
    help: |
      These are retirement contributions that are required by law or condition of employment, but only if there is no FICA or Social Security equivalent.
  - Monthly amount: users[0].deductions_retirement
    datatype: currency
    min: 0
    show if: users[0].deductions_retirement_question
---
id: monthly maintenance expenses
question: |
  Monthly maintenance payments
fields:
  - "Maintenance being paid or payable to the other party by you under a court order **in this case**": users[0].maintenance_paid_court_question
    datatype: yesnowide
  - Monthly amount: users[0].maintenance_paid_court
    datatype: currency
    min: 0
    show if: users[0].maintenance_paid_court_question
  - "Maintenance being paid under a court order to a former spouse by you, which is **tax deductible** to you": users[0].maintenance_paid_no_tax_question
    datatype: yesnowide
  - Monthly amount: users[0].maintenance_paid_no_tax
    datatype: currency
    min: 0
    show if: users[0].maintenance_paid_no_tax_question
  - "Maintenance being paid under a court order to a former spouse by you, which is **not tax deductible** to you": users[0].maintenance_paid_taxed_question
    datatype: yesnowide
  - Monthly amount: users[0].maintenance_paid_taxed
    datatype: currency
    min: 0
    show if: users[0].maintenance_paid_taxed_question
---
id: monthly child support expenses
question: |
  Monthly child support payments
fields:
  - Court-ordered child support being paid for the children of this relationship: users[0].child_support_1_question
    datatype: yesnowide
  - Monthly amount: users[0].child_support_1
    datatype: currency
    min: 0
    show if: users[0].child_support_1_question
  - Child support being paid **under a court order** for children not shared with the other party and who are not part of this case: users[0].child_support_2_question
    datatype: yesnowide
  - Monthly amount: users[0].child_support_2
    datatype: currency
    min: 0
    show if: users[0].child_support_2_question
  - Child support being paid, **but there is no court order**, for children not shared with the other party and who are not part of this case. These are children[NEWLINE](1) that are presumed to be yours,[NEWLINE](2) for whom there is a Voluntary Acknowledgment of Paternity (VAP) signed by you and the other parent, **or**[NEWLINE](3) for whom there is a court order naming you as a parent, but there is no support order: users[0].child_support_3_question
    datatype: yesnowide
  - Monthly amount: users[0].child_support_3
    datatype: currency
    min: 0
    show if: users[0].child_support_3_question
---
id: monthly housing expenses
question: |
  Monthly housing expenses
fields:
  - Mortgage or rent payment: users[0].living_house_payment_question
    datatype: yesnowide
  - Monthly amount: users[0].living_house_payment
    datatype: currency
    min: 0
    show if: users[0].living_house_payment_question
  - Home equity (HELOC) and second mortgage payment: users[0].living_heloc_question
    datatype: yesnowide
    help: |
      HELOC stands for home equity line of credit.
  - Monthly amount: users[0].living_heloc
    datatype: currency
    min: 0
    show if: users[0].living_heloc_question
  - Real estate taxes: users[0].living_property_taxes_question
    datatype: yesnowide
  - Monthly amount: users[0].living_property_taxes
    datatype: currency
    min: 0
    show if: users[0].living_property_taxes_question
  - Homeowners or condo association dues and assessments: users[0].living_hoa_question
    datatype: yesnowide
  - Monthly amount: users[0].living_hoa
    datatype: currency
    min: 0
    show if: users[0].living_hoa_question
  - Homeowners or renters insurance: users[0].living_insurance_question
    datatype: yesnowide
  - Monthly amount: users[0].living_insurance
    datatype: currency
    min: 0
    show if: users[0].living_insurance_question
---
id: monthly utility expenses
question: |
  Monthly utility expenses
fields:
  - Gas: users[0].living_gas_question
    datatype: yesnowide
  - Monthly amount: users[0].living_gas
    datatype: currency
    min: 0
    show if:  users[0].living_gas_question
  - Electric: users[0].living_power_question
    datatype: yesnowide
  - Monthly amount: users[0].living_power
    datatype: currency
    min: 0
    show if: users[0].living_power_question
  - Telephone: users[0].living_phone_question
    datatype: yesnowide
  - Monthly amount: users[0].living_phone
    datatype: currency
    min: 0
    show if: users[0].living_phone_question
  - Cable or satellite TV: users[0].living_cable_question
    datatype: yesnowide
  - Monthly amount: users[0].living_cable
    datatype: currency
    min: 0
    show if: users[0].living_cable_question
  - Internet: users[0].living_internet_question
    datatype: yesnowide
  - Monthly amount: users[0].living_internet
    datatype: currency
    min: 0
    show if: users[0].living_internet_question
  - Water and sewer: users[0].living_water_question
    datatype: yesnowide
  - Monthly amount: users[0].living_water
    datatype: currency
    min: 0
    show if: users[0].living_water_question
  - Garbage removal: users[0].living_trash_question
    datatype: yesnowide
  - Monthly amount: users[0].living_trash
    datatype: currency
    min: 0
    show if: users[0].living_trash_question
---
id: monthly living expenses
question: |
  Monthly living expenses
fields:
  - Laundry and dry cleaning: users[0].living_laundry_question
    datatype: yesnowide
  - Monthly amount: users[0].living_laundry
    datatype: currency
    min: 0
    show if: users[0].living_laundry_question
  - House cleaning service: users[0].living_cleaner_question
    datatype: yesnowide
  - Monthly amount: users[0].living_cleaner
    datatype: currency
    min: 0
    show if: users[0].living_cleaner_question
  - Necessary repairs and maintenance to my property: users[0].living_repairs_question
    datatype: yesnowide
  - Monthly amount: users[0].living_repairs
    datatype: currency
    min: 0
    show if: users[0].living_repairs_question
  - Pet care: users[0].living_pets_question
    datatype: yesnowide
  - Monthly amount: users[0].living_pets
    datatype: currency
    min: 0
    show if: users[0].living_pets_question
  - Groceries, household supplies, and toiletries: users[0].living_groceries_question
    datatype: yesnowide
  - Monthly amount: users[0].living_groceries
    datatype: currency
    min: 0
    show if: users[0].living_groceries_question
  - Other monthly household living expenses (transportation expenses will be entered on another screen): users[0].living_other_question
    datatype: yesnowide
  - "What are the other monthly household living expenses?": users[0].living_other_description
    maxlength: 60
    show if: users[0].living_other_question
  - Total monthly other expenses?: users[0].living_other
    datatype: currency
    min: 0
    show if: users[0].living_other_question
---
id: monthly transport expenses
question: |
  Monthly transportation expenses
fields:
  - Car payment: users[0].transport_payment_question
    datatype: yesnowide
  - Monthly amount: users[0].transport_payment
    datatype: currency
    min: 0
    show if: users[0].transport_payment_question
  - Repairs and maintenance: users[0].transport_maintenance_question
    datatype: yesnowide
  - Monthly amount: users[0].transport_maintenance
    datatype: currency
    min: 0
    show if: users[0].transport_maintenance_question
  - Insurance, license, registration, and city stickers: users[0].transport_insurance_question
    datatype: yesnowide
  - Monthly amount: users[0].transport_insurance
    datatype: currency
    min: 0
    show if: users[0].transport_insurance_question
  - Gasoline/EV-charging: users[0].transport_fuel_question
    datatype: yesnowide
  - Monthly amount: users[0].transport_fuel
    datatype: currency
    min: 0
    show if: users[0].transport_fuel_question
  - Taxi, ride-share, bus, and train: users[0].transport_public_question
    datatype: yesnowide
  - Monthly amount: users[0].transport_public
    datatype: currency
    min: 0
    show if: users[0].transport_public_question
  - Parking: users[0].transport_parking_question
    datatype: yesnowide
  - Monthly amount: users[0].transport_parking
    datatype: currency
    min: 0
    show if: users[0].transport_parking_question
  - Other monthly transportation expenses: users[0].transport_other_question
    datatype: yesnowide
  - "What are the other monthly transportation expenses?": users[0].transport_other_description
    maxlength: 60
    show if: users[0].transport_other_question
  - Total monthly other transportation expenses?: users[0].transport_other
    datatype: currency
    min: 0
    show if: users[0].transport_other_question
---
id: monthly personal medical expenses
question: |
  Monthly medical expenses
subquestion: |
  These are expenses for your own medical care.
fields:
  - Doctor visits: users[0].personal_doctor_question
    datatype: yesnowide
  - Monthly amount: users[0].personal_doctor
    datatype: currency
    min: 0
    show if: users[0].personal_doctor_question
  - Therapy and counseling: users[0].personal_therapy_question
    datatype: yesnowide
  - Monthly amount: users[0].personal_therapy
    datatype: currency
    min: 0
    show if: users[0].personal_therapy_question
  - Dental and orthodontia: users[0].personal_dental_question
    datatype: yesnowide
  - Monthly amount: users[0].personal_dental
    datatype: currency
    min: 0
    show if: users[0].personal_dental_question
  - Optical: users[0].personal_vision_question
    datatype: yesnowide
  - Monthly amount: users[0].personal_vision
    datatype: currency
    min: 0
    show if: users[0].personal_vision_question
  - Medicine and prescriptions: users[0].personal_medications_question
    datatype: yesnowide
  - Monthly amount: users[0].personal_medications
    datatype: currency
    min: 0
    show if: users[0].personal_medications_question
---
id: monthly personal insurance expenses
question: |
  Monthly insurance expenses
subquestion: |
  These are insurance expenses for yourself, not those required by law to secure child support.
fields:
  - Life (term): users[0].personal_life_term_question
    datatype: yesnowide
  - Monthly amount: users[0].personal_life_term
    datatype: currency
    min: 0
    show if: users[0].personal_life_term_question
  - Life (whole or annuity): users[0].personal_life_whole_question
    datatype: yesnowide
  - Monthly amount: users[0].personal_life_whole
    datatype: currency
    min: 0
    show if: users[0].personal_life_whole_question
---
id: monthly personal expenses
question: |
  Monthly personal, entertainment, and vacation expenses 
fields:
  - Clothing: users[0].personal_clothing_question
    datatype: yesnowide
  - Monthly amount: users[0].personal_clothing  
    datatype: currency
    min: 0
    show if: users[0].personal_clothing_question 
  - Grooming, such as hair, nails, or spa: users[0].personal_stylist_question
    datatype: yesnowide
  - Monthly amount: users[0].personal_stylist  
    datatype: currency
    min: 0
    show if: users[0].personal_stylist_question 
  - Gym & Club membership dues: users[0].personal_memberships_question
    datatype: yesnowide
  - Monthly amount: users[0].personal_memberships  
    datatype: currency
    min: 0
    show if: users[0].personal_memberships_question 
  - Entertainment, dining out, and hobbies: users[0].personal_entertainment_question
    datatype: yesnowide
  - Monthly amount: users[0].personal_entertainment  
    datatype: currency
    min: 0
    show if: users[0].personal_entertainment_question 
  - Newspapers, magazines, and subscriptions: users[0].personal_subscriptions_question
    datatype: yesnowide
  - Monthly amount: users[0].personal_subscriptions  
    datatype: currency
    min: 0
    show if: users[0].personal_subscriptions_question 
  - Vacations: users[0].personal_vacations_question
    datatype: yesnowide
  - Monthly amount: users[0].personal_vacations  
    datatype: currency
    min: 0
    show if: users[0].personal_vacations_question
---
id: monthly personal gifts expenses
question: |
  Monthly gifts, donations, and other expenses
fields:
  - Gifts: users[0].personal_gifts_question
    datatype: yesnowide
  - Monthly amount: users[0].personal_gifts  
    datatype: currency
    min: 0
    show if: users[0].personal_gifts_question 
  - Donations, such as political, religious, or charity: users[0].personal_donations_question
    datatype: yesnowide
  - Monthly amount: users[0].personal_donations  
    datatype: currency
    min: 0
    show if: users[0].personal_donations_question
  - Other personal expenses not already listed: users[0].personal_other_question
    datatype: yesnowide
  - "What are the other monthly personal expenses?": users[0].personal_other_description
    maxlength: 60
    show if: users[0].personal_other_question
  - Monthly total amount of other personal expenses: users[0].personal_other
    datatype: currency
    min: 0
    show if: users[0].personal_other_question
--- 
id: monthly personal dues expenses
question: |
  Monthly professional dues and fees
fields:
  - Mandatory or voluntary union, trade, or professional association dues: users[0].personal_associations_question
    datatype: yesnowide
  - Monthly amount: users[0].personal_associations  
    datatype: currency
    min: 0
    show if: users[0].personal_associations_question 
  - Professional fees, such as accountants, tax preparers, or lawyers: users[0].peronsal_professional_question
    datatype: yesnowide
  - Monthly amount: users[0].peronsal_professional  
    datatype: currency
    min: 0
    show if: users[0].peronsal_professional_question 
---
id: monthly children expenses
question: |
  Do you have any expenses for minor or dependent children?
fields:
  - no label: users[0].children_expenses_question
    datatype: yesnoradio
---
id: monthly children personal expenses
question: |
  Monthly personal expenses for children
fields:
  - Clothing: users[0].children_clothing_question
    datatype: yesnowide
  - Monthly amount: users[0].children_clothing  
    datatype: currency
    min: 0
    show if: users[0].children_clothing_question 
  - Grooming, such as hair, nails, or spa: users[0].children_grooming_question
    datatype: yesnowide
  - Monthly amount: users[0].children_grooming  
    datatype: currency
    min: 0
    show if: users[0].children_grooming_question 
---
id: monthly children education expenses
question: |
  Monthly education expenses for children
fields:
  - Tuition: users[0].children_tuition_question
    datatype: yesnowide
  - Monthly amount: users[0].children_tuition
    datatype: currency
    min: 0
    show if: users[0].children_tuition_question
  - Books, fees, and supplies: users[0].children_books_question
    datatype: yesnowide
  - Monthly amount: users[0].children_books
    datatype: currency
    min: 0
    show if: users[0].children_books_question 
  - School lunch: users[0].children_school_lunch_question
    datatype: yesnowide
  - Monthly amount: users[0].children_school_lunch
    datatype: currency
    min: 0
    show if: users[0].children_school_lunch_question 
  - Transportation: users[0].children_transportation_question
    datatype: yesnowide
  - Monthly amount: users[0].children_transportation
    datatype: currency
    min: 0
    show if: users[0].children_transportation_question 
  - School-sponsored trips and special events: users[0].children_school_events_question
    datatype: yesnowide
  - Monthly amount: users[0].children_school_events
    datatype: currency
    min: 0
    show if: users[0].children_school_events_question 
  - Uniforms: users[0].children_school_uniforms_question
    datatype: yesnowide
  - Monthly amount: users[0].children_school_uniforms
    datatype: currency
    min: 0
    show if: users[0].children_school_uniforms_question 
  - Before and after-school care: users[0].children_after_school_question
    datatype: yesnowide
  - Monthly amount: users[0].children_after_school
    datatype: currency
    min: 0
    show if: users[0].children_after_school_question 
  - Tutoring and summer school: users[0].children_tutor_question
    datatype: yesnowide
  - Monthly amount: users[0].children_tutor
    datatype: currency
    min: 0
    show if: users[0].children_tutor_question 
---
id: monthly children medical expenses
question: |
  Monthly medical for children
subquestion: |
  **Note:** These are out-of-pocket expenses. Health insurance premiums and payments can be entered on another screen.
fields:
  - Doctor visits: users[0].children_doctor_question
    datatype: yesnowide
  - Monthly amount: users[0].children_doctor
    datatype: currency
    min: 0
    show if: users[0].children_doctor_question 
  - Therapy and counseling: users[0].children_therapy_question
    datatype: yesnowide
  - Monthly amount: users[0].children_therapy
    datatype: currency
    min: 0
    show if: users[0].children_therapy_question 
  - Dental and orthodontia: users[0].children_dental_question 
    datatype: yesnowide
  - Monthly amount: users[0].children_dental
    datatype: currency
    min: 0
    show if: users[0].children_dental_question 
  - Optical: users[0].children_vision_question
    datatype: yesnowide
  - Monthly amount: users[0].children_vision
    datatype: currency
    min: 0
    show if: users[0].children_vision_question 
  - Medicine: users[0].children_medications_question
    datatype: yesnowide
  - Monthly amount: users[0].children_medications
    datatype: currency
    min: 0
    show if: users[0].children_medications_question 
---
id: monthly children additional expenses
question: |
  Additional monthly expenses for children
fields:
  - Allowance: users[0].children_allowance_question 
    datatype: yesnowide
  - Monthly amount: users[0].children_allowance
    datatype: currency
    min: 0
    show if: users[0].children_allowance_question 
  - Childcare and sitters: users[0].children_childcare_question 
    datatype: yesnowide
  - Monthly amount: users[0].children_childcare
    datatype: currency
    min: 0
    show if: users[0].children_childcare_question 
  - Extracurricular activities and sports, such as equipment or uniforms: users[0].children_sports_question
    datatype: yesnowide
  - Monthly amount: users[0].children_sports
    datatype: currency
    min: 0
    show if: users[0].children_sports_question 
  - Summer and school-break camps: users[0].children_camps_question 
    datatype: yesnowide
  - Monthly amount: users[0].children_camps
    datatype: currency
    min: 0
    show if: users[0].children_camps_question 
---
id: monthly children vacation expenses
question: |
  Monthly vacation, entertainment, and other expenses for children
fields:
  - Vacations (children only): users[0].children_vacations_question 
    datatype: yesnowide
  - Monthly amount: users[0].children_vacations
    datatype: currency
    min: 0
    show if: users[0].children_vacations_question 
  - Entertainment, dining out, and hobbies (children only): users[0].children_entertainment_question
    datatype: yesnowide
  - Monthly amount: users[0].children_entertainment
    datatype: currency
    min: 0
    show if: users[0].children_entertainment_question 
  - Gifts children give to others: users[0].children_party_gifts_question 
    datatype: yesnowide
  - Monthly amount: users[0].children_party_gifts
    datatype: currency
    min: 0
    show if: users[0].children_party_gifts_question 
  - Other expenses for children not already listed: users[0].children_other_question
    datatype: yesnowide
  - "What are the other monthly expenses for children?": users[0].children_other_description
    maxlength: 60
    show if: users[0].children_other_question
  - Total monthly other expenses for the children?: users[0].children_other
    datatype: currency
    min: 0
    show if: users[0].children_other_question
---
depends on:
  - users[0].deductions_federal
  - users[0].deductions_state
  - users[0].deductions_FICA
  - users[0].deductions_medicare
  - users[0].deductions_retirement
  - users[0].maintenance_paid_court
  - users[0].maintenance_paid_no_tax
  - users[0].maintenance_paid_taxed
  - users[0].child_support_1
  - users[0].child_support_2
  - users[0].child_support_3
  # Section 12 a-d
  - users[0].living_house_payment
  - users[0].living_heloc
  - users[0].living_property_taxes
  - users[0].living_hoa
  - users[0].living_insurance
  - users[0].living_gas
  - users[0].living_power
  - users[0].living_phone
  - users[0].living_cable
  - users[0].living_internet
  - users[0].living_water
  - users[0].living_trash
  - users[0].living_laundry
  - users[0].living_cleaner
  - users[0].living_repairs
  - users[0].living_pets
  - users[0].living_groceries
  - users[0].living_other
  - users[0].transport_payment
  - users[0].transport_maintenance
  - users[0].transport_insurance
  - users[0].transport_fuel
  - users[0].transport_public
  - users[0].transport_parking
  - users[0].transport_other
  - users[0].personal_doctor
  - users[0].personal_therapy
  - users[0].personal_dental
  - users[0].personal_vision
  - users[0].personal_medications
  - users[0].personal_life_term
  - users[0].personal_life_whole
  - users[0].personal_clothing
  - users[0].personal_stylist
  - users[0].personal_memberships
  - users[0].personal_subscriptions
  - users[0].personal_entertainment
  - users[0].personal_gifts
  - users[0].personal_donations
  - users[0].personal_vacations
  - users[0].personal_associations
  - users[0].peronsal_professional
  - users[0].personal_other
  - users[0].children_clothing
  - users[0].children_grooming
  - users[0].children_tuition
  - users[0].children_books
  - users[0].children_school_lunch
  - users[0].children_transportation
  - users[0].children_school_events
  - users[0].children_school_uniforms
  - users[0].children_after_school
  - users[0].children_tutor
  - users[0].children_doctor
  - users[0].children_therapy
  - users[0].children_dental
  - users[0].children_vision
  - users[0].children_medications
  - users[0].children_allowance
  - users[0].children_childcare
  - users[0].children_sports
  - users[0].children_camps
  - users[0].children_vacations
  - users[0].children_entertainment
  - users[0].children_party_gifts
  - users[0].children_other
code: |
  total_monthly_deductions = sum_if_defined(
    'users[0].deductions_federal',
    'users[0].deductions_state',
    'users[0].deductions_FICA',
    'users[0].deductions_medicare',
    'users[0].deductions_retirement')

  total_maintenance_payments = sum_if_defined(
    'users[0].maintenance_paid_court',
    'users[0].maintenance_paid_no_tax',
    'users[0].maintenance_paid_taxed')

  total_child_support_payments = sum_if_defined(
    'users[0].child_support_1',
    'users[0].child_support_2',
    'users[0].child_support_3')

  subtotal_monthly_household_expenses = sum_if_defined(
    'users[0].living_house_payment',
    'users[0].living_heloc',
    'users[0].living_property_taxes',
    'users[0].living_hoa',
    'users[0].living_insurance',
    'users[0].living_gas',
    'users[0].living_power',
    'users[0].living_phone',
    'users[0].living_cable',
    'users[0].living_internet',
    'users[0].living_water',
    'users[0].living_trash',
    'users[0].living_laundry',
    'users[0].living_cleaner',
    'users[0].living_repairs',
    'users[0].living_pets',
    'users[0].living_groceries',
    'users[0].living_other')

  subtotal_monthly_transportation_expenses = sum_if_defined(
    'users[0].transport_payment',
    'users[0].transport_maintenance',
    'users[0].transport_insurance',
    'users[0].transport_fuel',
    'users[0].transport_public',
    'users[0].transport_parking',
    'users[0].transport_other')
  
  subtotal_monthly_personal_expenses = sum_if_defined(
    'users[0].personal_doctor',
    'users[0].personal_therapy',
    'users[0].personal_dental',
    'users[0].personal_vision',
    'users[0].personal_medications',
    'users[0].personal_life_term',
    'users[0].personal_life_whole',
    'users[0].personal_clothing',
    'users[0].personal_stylist',
    'users[0].personal_memberships',
    'users[0].personal_subscriptions',
    'users[0].personal_entertainment',
    'users[0].personal_gifts',
    'users[0].personal_donations',
    'users[0].personal_vacations',
    'users[0].personal_associations',
    'users[0].peronsal_professional',
    'users[0].personal_other')

  subtotal_monthly_children_expenses = sum_if_defined(
    'users[0].children_clothing',
    'users[0].children_grooming',
    'users[0].children_tuition',
    'users[0].children_books',
    'users[0].children_school_lunch',
    'users[0].children_transportation',
    'users[0].children_school_events',
    'users[0].children_school_uniforms',
    'users[0].children_after_school',
    'users[0].children_tutor',
    'users[0].children_doctor',
    'users[0].children_therapy',
    'users[0].children_dental',
    'users[0].children_vision',
    'users[0].children_medications',
    'users[0].children_allowance',
    'users[0].children_childcare',
    'users[0].children_sports',
    'users[0].children_camps',
    'users[0].children_vacations',
    'users[0].children_entertainment',
    'users[0].children_party_gifts',
    'users[0].children_other')

  total_monthly_household_expenses = sum_if_defined(
    'subtotal_monthly_household_expenses',
    'subtotal_monthly_transportation_expenses',
    'subtotal_monthly_personal_expenses',
    'subtotal_monthly_children_expenses')
---
################### FA HEALTH INSURANCE ##################
id: health insurance intro 
question: |
  Do you have health insurance?
subquestion: |
  This includes health insurance for yourself and for any of your children.
fields:
  - no label: insurance.there_are_any
    datatype: yesnoradio
---
code: |
  insurance[i].name.text
  insurance[i].coverage
  insurance[i].monthly_cost
  insurance[i].complete = True 
---
id: additional health insurance
question: |
  Do you have another health insurance policy?
subquestion: |
  So far you have told us about ${comma_and_list(insurance.complete_elements())}.
fields:
  - no label: insurance.there_is_another
    datatype: yesnoradio
---
id: health insurance name
question: |
  Details for the ${ordinal(i)} health insurance provider
fields:
  - Name of insurance company: insurance[i].name.text
  - Type of insurance: insurance[i].type
    datatype: radio
    choices:
      - Medical
      - Dental
      - Orthodontic
      - Vision
  - Type of policy: insurance[i].policy
    datatype: radio
    choices:
      - HMO
      - PPO
      - Other
  - Provided through: insurance[i].provider
    datatype: radio
    choices:
      - Employer: employer
      - Private policy: private 
      - Other group policy: group
      - Medicaid/All Kids: public
---
id: health insurance coverage
question: |
  ${insurance[i].name.text} coverage
fields:
  - Number of people covered: insurance[i].total_covered
    datatype: integer
    min: 1
    max: 20
  - Who is covered?: insurance[i].coverage
    datatype: checkboxes
    choices:
      - Me: myself
      - My spouse/partner: both
      - Children of this relationship: children_current
      - Children of this relationship and other children: children_other
    none of the above: False
  - note: |
      List the number of the **other children** covered and their ages: 
    show if:
      variable: insurance[i].coverage["children_other"]
      is: True
  - Number of other children: insurance[i].other_children_count
    datatype: integer
    min: 0
    show if:
      variable: insurance[i].coverage["children_other"]
      is: True
  - Ages of other children: insurance[i].other_children_age_list
    maxlength: 40
    show if:
      variable: insurance[i].coverage["children_other"]
      is: True
---
id: health insurance costs 
question: |
  ${insurance[i].name.text} monthly costs
fields:
  - Total monthly cost for this insurance: insurance[i].monthly_cost
    datatype: currency
    min: 0
  - This is paid for by: insurance[i].paid
    datatype: radio
    choices:
      - Me: myself 
      - My spouse/partner: partner 
      - Other: other
  - Name of other payment source: insurance[i].other_description
    maxlength: 30
    show if:
      variable: insurance[i].paid
      is: "other"
  - What is the monthly cost for this insurance for covering children?: insurance[i].cost_children 
    datatype: currency
    min: 0
  - What is the monthly cost for this insurance for covering children of this relationship (if known)?: insurance[i].cost_children_current
    datatype: currency
    min: 0
  - What is the individual yearly deductible?: insurance[i].individual_deductible
    datatype: currency
    min: 0
    help: |
      The deductible is the amount you pay before your insurance starts to pay.
  - What is the family deductible?: insurance[i].family_deductible
    datatype: currency
    min: 0
    help: |
      The deductible is the amount you pay before your insurance starts to pay.
  - Coinsurance (up to 100%): insurance[i].coinsurance
    datatype: integer
    min: 0
    max: 100
    help: |
       Coninsurance is the percentage of costs you pay.
  - Copayment amount: insurance[i].copayment
    datatype: currency
    min: 0
    help: |
      A copayment amount is a flat amount you pay per service, such as an office visit or an x-ray.
---
########### FA DEBTS ###########
id: debt intro 
question: |
  Do you have any debts?
subquestion: |
  This includes debts like credit cards and past due bills.
  
  You do not need to include include debt payments already listed like mortgage or car loans.
fields:
  - no label: has_debts
    datatype: yesnoradio
---
id: additional debts
question: |
  Do you have any other debts?
subquestion: |
  So far you have told us about:

  ${ debts_table }

  Remember, you do not need to include include debt payments already listed like mortgage or car loans.
fields:
  - Add another?: debts.there_is_another
    datatype: yesnoradio
---
table: debts_table
rows: debts
columns:
  - Creditor: row_item.name.text
  - Desciption: row_item.description
  - Amount owed: currency(row_item.amount)
  - Monthly payment: currency(row_item.payment)
---
id: debt information
question: |
  Details for the ${ordinal(i)} debt 
fields:
  - Name of creditor: debts[i].name.text
    maxlength: 25
    help: |
      The creditor is the company, institution, or person you owe money to.
  - What the debt is for?: debts[i].description
    maxlength: 25
    help: |
      Examples: credit card, parking tickets, household goods, are lawyer's fees
  - Total amount owed: debts[i].amount
    datatype: currency
    min: 0
  - Monthly payment: debts[i].payment
    datatype: currency
    min: 0
---
code: |
  debts[i].name.text
  debts[i].complete = True 
---
code: |
  if debts.number_gathered() == 26:
    debts.there_is_another = False
---
########### FA ASSETS ###########
id: assets intro
continue button field: assets_intro
question: |
  Your belongings
subquestion: |
  On the *Financial Affidavit*, you are required to list all of your belongings, also known as your assets. The form puts assets in the following groups.

  * Cash and cash equivalents 
  * Certificates of Deposit
  * Money on cash cards, prepaid debit cards, and money transfer apps 
  * Investment accounts and securities
  * Investment/brokerage accounts, mutual funds, secured or unsecured notes, and cryptocurrency
  * Real estate 
  * Motor vehicles
  * Business interests
  * Life insurance policies
  * Retirement benefits and deferred compensation
  * Valuable collectibles 
  * Other personal property valued over $500
  * Transfer or sale of assets or property valued over $1,000 within the last 2 years
---
########### FA ASSETS - 15a Cash/Cash Equivalents ###########
id: cash equivalent intro 
question: |
  Do you have any cash or cash equivalents?
subquestion: |
  These include checking, savings, money market, and other bank or credit union accounts.
  
  **Do not list account numbers on your forms.** 
fields:
  - no label: has_cash_assets
    datatype: yesnoradio
---
id: additional cash
question: |
  Do you have other cash or cash equivalent accounts?
subquestion: |
  So far you have told us about:
  ${ cash_table }
fields:
  - Add another?: cash.there_is_another
    datatype: yesnoradio
---
table: cash_table
rows: cash
columns:
  - Bank or institution name: row_item.name.text
  - Name on account: row_item.account
  - Account type: row_item.type
  - Balance: currency(row_item.balance)
---
id: cash information
question: |
  Details for the ${ordinal(i)} cash or cash equivalent account
subquestion: |
  **Do not list account numbers on your forms.** 
fields:
  - Bank or institution name: cash[i].name.text
    maxlength: 25
  - Name on account: cash[i].account
    maxlength: 25
  - Account type: cash[i].type
    datatype: radio
    choices:
      - Checking
      - Savings 
      - Money market
      - Credit union
  - Account balance: cash[i].balance
    datatype: currency
    min: 0
---
code: |
  cash[i].name.text
  cash[i].complete = True 
---
code: |
  if cash.number_gathered() == 25:
    cash.there_is_another = False
---
########### FA ASSETS - 15a Certificate of Deposit ###########
id: certificate of deposit intro 
question: |
  Do you have any Certificates of Deposit?
fields:
  - no label: has_cert_deposit
    datatype: yesnoradio
---
id: additional certificate of deposit
question: |
  Do you have other Certificates of Deposit?
subquestion: |
  So far you have told us about:
  ${ cert_deposit_table }
fields:
  - Add another?: cert_deposit.there_is_another
    datatype: yesnoradio
---
table: cert_deposit_table
rows: cert_deposit
columns:
  - Bank or institution name: row_item.name.text
  - Name on account: row_item.account
  - Balance: currency(row_item.balance)
---
id: certificate of deposit information
question: |
  Details for the ${ordinal(i)} Certificate of Deposit: 
fields:
  - Bank or institution name: cert_deposit[i].name.text
    maxlength: 25
  - Name on account: cert_deposit[i].account
    maxlength: 25
  - Balance: cert_deposit[i].balance
    datatype: currency
    min: 0
---
code: |
  cert_deposit[i].name.text
  cert_deposit[i].complete = True 
---
code: |
  if cert_deposit.number_gathered() == 25:
    cert_deposit.there_is_another = False
---
########### FA ASSETS - 15a money cash/card ###########
id: money cash/card intro 
question: |
  Do you have any money on debit cards or in money transfer apps?
subquestion: |
  These include any money you have on cash cards, prepaid debit cards, and money transfer mobile apps like Venmo, PayPal, or Apple Pay.
fields:
  - no label: has_money
    datatype: yesnoradio
---
id: additional money cash/card
question: |
  Do you have other debit cards or money transfer app balances?
subquestion: |
  So far you have told us about:
  ${ money_table }
fields:
  - Add another?: money.there_is_another
    datatype: yesnoradio
---
table: money_table
rows: money
columns:
  - Location of cash/card: row_item.name.text
  - Held by: row_item.holder
  - Balance: currency(row_item.balance)
---
id: money cash/card information
question: |
  Details for the ${ordinal(i)} debit card or money transfer app 
fields:
  - Location of cash/card: money[i].name.text
    maxlength: 25
  - Name of holder: money[i].holder
    maxlength: 25
  - Balance: money[i].balance
    datatype: currency
    min: 0
---
code: |
  money[i].name.text
  money[i].complete = True 
---
code: |
  if money.number_gathered() == 25:
    money.there_is_another = False
---
########### FA ASSETS - 15b Investment Accounts ###########
id: investment accounts intro 
question: |
  Do you have any investment accounts or securities?
subquestion: |
  These include stocks, bonds, options, and Employee Stock Ownership Plans (ESOP).

  **Note:** These do not include investement/brokerage accounts, mutual funds, secured or unsecured notes, and cryptocurrency.
fields:
  - no label: has_investments
    datatype: yesnoradio
---
id: additional investment accounts
question: |
  Do you have other investment accounts or securities?
subquestion: |
  So far you have told us about:
  ${ investments_table }

  Reminder: These do not include investement/brokerage accounts, mutual funds, secured or unsecured notes, and cryptocurrency.
fields:
  - Add another?: investments.there_is_another
    datatype: yesnoradio
---
table: investments_table
rows: investments
columns:
  - Company name: row_item.name.text
  - "Number of shares": row_item.shares
  - Account type: row_item.type
  - Owner: row_item.owner
  - FMV: currency(row_item.fmv)
---
id: investments information
question: |
  Details for the ${ordinal(i)} investment account or securities
subquestion: |
  ${ collapse_template(FMV_help) }
fields:
  - Company name: investments[i].name.text
    maxlength: 25
  - Number of shares: investments[i].shares
    datatype: integer
    min: 1
  - Type of account: investments[i].type
    datatype: radio
    choices:
      - Stocks
      - Bonds 
      - Options
      - Employee Stock Ownership Plans: ESOP
  - Who is the owner?: investments[i].owner
    maxlength: 25
  - Fair market value (FMV): investments[i].fmv
    datatype: currency
    min: 0
---
template: FMV_help
subject: |
  **How to determine Fair Market Value (FMV)**
content: |  
  Fair Market Value (FMV) is generally defined as a selling price for an item to which an unrelated buyer and seller can agree. You may look at what similar items have sold for recently, getting the item appraised, or by using a third-party website like Zillow.com for real estate or Kelley Blue Book for automobiles.

  Attach any documents you have that verify FMV to your *Financial Affidavit*. 
---
code: |
  investments[i].name.text
  investments[i].complete = True 
---
code: |
  if investments.number_gathered() == 25:
    investments.there_is_another = False
---
########### FA ASSETS - 15b Brokerage accounts ###########
id: brokerage accounts intro 
question: |
  Do you have any other investment assets?
subquestion: |
  These include investment/brokerage accounts, mutual funds, secured or unsecured notes, and cryptocurrency.
fields:
  - no label: has_securities
    datatype: yesnoradio
---
id: additional securities
question: |
  Do you have other investment assets?
subquestion: |
  So far you have told us about:
  ${ securities_table }

  Remember: These include investment/brokerage accounts, mutual funds, secured or unsecured notes, and cryptocurrency.

fields:
  - Add another?: securities.there_is_another
    datatype: yesnoradio
---
table: securities_table
rows: securities
columns:
  - Description: row_item.name.text
  - Owner: row_item.owner
  - Balance: currency(row_item.balance)
---
id: securities information
question: |
  Details for the ${ordinal(i)} investment asset
fields:
  - Description of asset: securities[i].name.text
    maxlength: 30
  - Who is the owner?: securities[i].owner
    maxlength: 30
  - Balance: securities[i].balance
    datatype: currency
    min: 0
---
code: |
  securities[i].name.text
  securities[i].complete = True 
---
code: |
  if securities.number_gathered() == 25:
    securities.there_is_another = False
---
########### FA ASSETS - 15c REAL ESTATE ###########
id: real estate intro 
question: |
  Do you have any real estate?
fields:
  - no label: has_real_estate
    datatype: yesnoradio
---
id: additional real estate
question: |
  Do you have other real estate?
subquestion: |
  So far you have told us about:
  ${ real_estate_table }
fields:
  - Add another?: real_estate.there_is_another
    datatype: yesnoradio
---
table: real_estate_table
rows: real_estate
columns:
  - Address: row_item.address.on_one_line()
  - Name on title: row_item.name.text
  - FMV: currency(row_item.fmv)
  - Balance: currency(row_item.balance)
---
id: real estate information
question: |
  Details for the ${ordinal(i)} property
subquestion: |
  ${ collapse_template(FMV_help) }
fields:
  - Street address: real_estate[i].address.address
    address autocomplete: True
  - Address line 2: real_estate[i].address.unit
    required: False
  - City: real_estate[i].address.city
  - State: real_estate[i].address.state
    code: |
      states_list()
  - ZIP code: real_estate[i].address.zip
  - Name on the title: real_estate[i].name.text
    maxlength: 25
  - Fair market value (FMV): real_estate[i].fmv
    datatype: currency
    min: 0
  - Balance due: real_estate[i].balance
    datatype: currency
    min: 0
---
code: |
  real_estate[i].address.address
  real_estate[i].complete = True 
---
code: |
  if real_estate.number_gathered() == 25:
    real_estate.there_is_another = False
---
########### FA ASSETS - 15d Motor Vehicle ###########
id: motor vehicle intro 
question: |
  Do you have any motor vehicles?
subquestion: |
  These include cars, boats, trailers, motorcycles, and aircrafts.
fields:
  - no label: has_motor_vehicle
    datatype: yesnoradio
---
id: additional motor vehicle
question: |
  Do you have other vehicles?
subquestion: |
  So far you have told us about:
  ${ motor_vehicle_table }
fields:
  - Add another?: motor_vehicle.there_is_another
    datatype: yesnoradio
---
table: motor_vehicle_table
rows: motor_vehicle
columns:
  - Vehicle year: row_item.year 
  - Vehicle make: row_item.make 
  - Vehicle model: row_item.model
  - Name on title: row_item.name.text
  - FMV: currency(row_item.fmv)
  - Balance: currency(row_item.balance)
---
id: motor vehicle information
question: |
  Details for the ${ordinal(i)} motor vehicle 
subquestion: |

  ${ collapse_template(FMV_help) }  
fields:
  - Vehicle year: motor_vehicle[i].year
    datatype: integer
    maxlength: 4
    min: 1900
    max: 2100
  - Vehicle make: motor_vehicle[i].make
    maxlength: 15
    help: |
      Car examples: Chevrolet, Honda, and Ford    
  - Vehicle model: motor_vehicle[i].model
    maxlength: 10
    help: |
      Car examples: Malibu, Civic, and Mustang
  - Name on title: motor_vehicle[i].name.text
    maxlength: 25
  - Fair market value (FMV): motor_vehicle[i].fmv
    datatype: currency
    min: 0
  - Balance: motor_vehicle[i].balance
    datatype: currency
    min: 0
---
code: |
  motor_vehicle[i].year
  motor_vehicle[i].complete = True 
---
code: |
  if motor_vehicle.number_gathered() == 25:
    motor_vehicle.there_is_another = False
---
########### FA ASSETS - 15e Business Interests ###########
id: business interests intro 
question: |
  Do you have any business interests?
fields:
  - no label: has_business_interests
    datatype: yesnoradio
---
id: additional business interests
question: |
  Do you have other business interests?
subquestion: |
  So far you have told us about:
  ${ business_interests_table }
fields:
  - Add another?: business_interests.there_is_another
    datatype: yesnoradio
---
table: business_interests_table
rows: business_interests
columns:
  - Name of business: row_item.name.text
  - Type of business: row_item.type
  - "% ownership": row_item.ownership
  - FMV: currency(row_item.fmv)
---
id: business_interests information
question: |
  Details for the ${ordinal(i)} business interest 
subquestion: |
  ${ collapse_template(FMV_help) }  
fields:
  - Name of business: business_interests[i].name.text
    maxlength: 30
  - Type of business: business_interests[i].type
    maxlength: 25
  - "What percent do you own? (1-100%)": business_interests[i].ownership
    datatype: integer
    min: 1
    max: 100
  - Fair market value (FMV): business_interests[i].fmv
    datatype: currency
    min: 0
---
code: |
  business_interests[i].name.text
  business_interests[i].complete = True 
---
code: |
  if business_interests.number_gathered() == 25:
    business_interests.there_is_another = False
---
########### FA ASSETS - 15f Life Insurance ###########
id: life insurance intro
question: |
  Do you have any life insurance policies?
fields:
  - no label: has_life_insurance
    datatype: yesnoradio
---
id: additional investment accounts
question: |
  Do you have other life insurance policies?
subquestion: |
  So far you have told us about:
  ${ life_insurance_table }
fields:
  - Add another?: life_insurance.there_is_another
    datatype: yesnoradio
---
table: life_insurance_table
rows: life_insurance
columns:
  - Name of insurance company: row_item.name.text
  - Type of policy: row_item.type
  - Death benefit: currency(row_item.benefit)
  - Cash value: currency(row_item.value)
---
id: life_insurance information
question: |
  Details for the ${ordinal(i)} life insurance policy 
fields:
  - Name of insurance company: life_insurance[i].name.text
  - Type of policy: life_insurance[i].type
    datatype: radio
    choices:
      - Whole
      - Term
      - Universal
      - Variable
      - Final expense
  - Death benefit: life_insurance[i].benefit
    datatype: currency
    min: 0
  - Cash value: life_insurance[i].value
    datatype: currency
    min: 0
---
code: |
  life_insurance[i].name.text
  life_insurance[i].complete = True 
---
code: |
  if life_insurance.number_gathered() == 25:
    life_insurance.there_is_another = False
---
########### FA ASSETS - 15g Retirement Benefits #######
id: retirement benefits intro
question: |
  Do you have any retirement benefits or deferred compensation?
subquestion: |
  These could be a pension plan, annuity, IRA, 401(k), 403(b), or a Simplified Employee Pension (SEP).
fields:
  - no label: has_retirement_plan
    datatype: yesnoradio
---
id: additional retirement benefits
question: |
  Do you have other retirement benefits or deferred compensation?
subquestion: |
  So far you have told us about:
  ${ retirement_plan_table }
fields:
  - Add another?: retirement_plan.there_is_another
    datatype: yesnoradio
---
table: retirement_plan_table
rows: retirement_plan
columns:
  - Name of plan: row_item.name.text
  - Type of plan: row_item.type
  - Balance: currency(row_item.balance)
---
id: retirement_plan information
question: |
  Details for the ${ordinal(i)} retirement benefit or deferred compensation 
fields:
  - Name of plan: retirement_plan[i].name.text
    maxlength: 25
  - Type of plan: retirement_plan[i].type
    maxlength: 30
  - Balance: retirement_plan[i].balance
    datatype: currency
    min: 0
---
code: |
  retirement_plan[i].name.text
  retirement_plan[i].complete = True 
---
code: |
  if retirement_plan.number_gathered() == 25:
    retirement_plan.there_is_another = False
---
########### FA ASSETS - 15h Valuable collectibles ###########
id: collectibles intro 
question: |
  Do you have any valuable collectibles?
subquestion: 
  Collectibles are things like coins, stamps, art or antiques.
fields:
  - no label: has_collection
    datatype: yesnoradio
---
id: additional collectibles 
question: |
  Do you have other valuable collectibles?
subquestion: |
  So far you have told us about:
  ${ collection_table }
fields:
  - Add another?: collection.there_is_another
    datatype: yesnoradio
---
table: collection_table
rows: collection
columns:
  - Description: row_item.name.text
  - FMV: currency(row_item.fmv)
---
id: collectibles information
question: |
  Details for the ${ordinal(i)} collectible
subquestion: |

  ${ collapse_template(FMV_help) }  
  
fields:
  - Description: collection[i].name.text
    maxlength: 50
  - Fair market value (FMV): collection[i].fmv
    datatype: currency
    min: 0
---
code: |
  collection[i].name.text
  collection[i].complete = True 
---
code: |
  if collection.number_gathered() == 25:
    collection.there_is_another = False
---
########### FA ASSETS - 15i Other Personal Property ###########
id: other property intro 
question: |
  Do you have any other personal property valued over $500?
subquestion: |
  ${ collapse_template(FMV_help) }  
fields:
  - no label: has_other_property
    datatype: yesnoradio
---
id: additional other_property 
question: |
  Do you have other personal property valued over $500?
subquestion: |
  So far you have told us about:
  ${ other_property_table }
fields:
  - Add another?: other_property.there_is_another
    datatype: yesnoradio
---
table: other_property_table
rows: other_property
columns:
  - Description: row_item.name.text
  - FMV: currency(row_item.fmv)
---
id: other property information
question: |
  Details for the ${ordinal(i)} property: 
subquestion: |
  ${ collapse_template(FMV_help) }  
fields:
  - Description: other_property[i].name.text
    maxlength: 50
  - Fair market value (FMV): other_property[i].fmv
    datatype: currency
    min: 0
---
code: |
  other_property[i].name.text
  other_property[i].complete = True 
---
code: |
  if other_property.number_gathered() == 25:
    other_property.there_is_another = False
---
########### FA ASSETS - 15j Transfer or Sale of Assets #######
id: transfer sale intro
question: |
  Have you transferred or sold any assets or property valued at or over $1,000 within the last two years?
subquestion: |
  ${ collapse_template(FMV_help) }  
fields:
  - no label: has_transfer
    datatype: yesnoradio
---
id: additional transfer
question: |
  Did you have other asset or property transfers or sales within the last two years?
subquestion: |
  So far you have told us about:
  ${ transfer_table }
fields:
  - Add another?: transfer.there_is_another
    datatype: yesnoradio
---
table: transfer_table
rows: transfer
columns:
  - Description: row_item.name.text
  - Transfer/sold to: row_item.sold
  - Date: row_item.date.format("MM/dd/yyyy")
  - Amount: currency(row_item.amount)
---
id: transfer information
question: |
  Details for the ${ordinal(i)} transfer or sale
subquestion: |
  ${ collapse_template(FMV_help) }  
fields:
  - Description of asset or property: transfer[i].name.text
    maxlength: 25
  - Who was it transferred or sold to?: transfer[i].sold
    maxlength: 25
  - Date of transfer or sale: transfer[i].date
    datatype: ThreePartsDate
    alMax: ${ today().format("MM/dd/yyyy") }
  - Amount: transfer[i].amount
    datatype: currency
    min: 0
---
code: |
  transfer[i].name.text
  transfer[i].complete = True 
---
code: |
  if transfer.number_gathered() == 25:
    transfer.there_is_another = False
---
########### FA LAWSUITS AND CLAIMS #######
id: lawsuits and claims intro
question: |
  Do you have any lawsuits or claims?
subquestion: |
  These include Workers' Compensation, disability, or lawsuits brought against other companies or individuals. These also include lawsuits or claims brought against you. 
fields:
  - no label: has_lawsuits
    datatype: yesnoradio
---
id: additional lawsuits
question: |
  Do you have other lawsuits or claims?
subquestion: |
  So far you have told us about:
  ${ lawsuits_table }
fields:
  - Add another?: lawsuits.there_is_another
    datatype: yesnoradio
---
table: lawsuits_table
rows: lawsuits
columns:
  - Case number: row_item.case
  - Date lawsuit/claim filed: row_item.date
  - Amount recovered: currency(row_item.amount)
---
id: lawsuits information
question: |
  Details for the ${ordinal(i)} lawsuit or claim
subquestion: |
 
fields:
  - Case number: lawsuits[i].case
  - Date lawsuit or claim filed: lawsuits[i].date
    datatype: ThreePartsDate
    alMax: ${ today().format("yyyy-MM-dd") }
  - Amount recovered: lawsuits[i].amount
    datatype: currency
    min: 0
    help: |
      If you did not recover anything, enter $0. If your case is still pending or has not yet been filed, enter unknown.
---
code: |
  lawsuits[i].case
  lawsuits[i].complete = True 
---
code: |
  if lawsuits.number_gathered() == 25:
    lawsuits.there_is_another = False
---
id: attach documents 
question: |
  Attach documents to your *Financial Affidavit*
subquestion: |
  The *Financial Affidavit* requires that you attach the most recent copies of certain documents.

  **Note:** You must attach these documents if you have them or can get them.

  Check all that apply.
fields:
  - I am attaching: users[0].attached_documents
    datatype: checkboxes
    choices:
      - Pay stubs or other proof of income: stubs
      - Income tax returns: returns
      - Bank statements: statements
      - Other documents that verify my debts and assets: other
    none of the above: False
  - List of documents that verify debts: users[0].attachment_debts
    input type: area
    rows: 2
    maxlength: 100
    show if:
      variable: users[0].attached_documents["other"]
      is: True      
  - List of documents that verify assets: users[0].attachment_assets
    input type: area
    rows: 2
    maxlength: 100
    show if:
      variable: users[0].attached_documents["other"]
      is: True    
---
id: e-signature
question: |
  Do you want to add your e-signature to your ${ form_name }?
subquestion: |
  This program can put "**/s/ ${users[0].name.full(middle='full')}**" where you would sign your name. The court will accept this as your signature.

  If you do not add your **{e-signature}**, you must sign your paper form before you send it to the other party in your case or their lawyer.

  <div class="alert alert-info ilao-info" role="alert">
    <h6 class="alert-heading">What it means to sign your form</h6>
    <p>By signing your <i>Financial Affidavit</i>, you are certifying that:</p>
    <p><ul>
      <li>Everything on the forms is true and correct, and</li>
      <li>You understand that making a false statement on the form is perjury, which can result in criminal penalties.</li>
    </ul></p>
  <p>See the <a href="https://www.ilga.gov/legislation/ilcs/documents/073500050k1-109.htm"><b>Code of Civil Procedure, 735 ILCS 5/1-109</b></a> for more information.</p>
  </div>
fields:
  - "Add e-signature?": e_signature
    datatype: yesnoradio
terms:
  - "e-signature": |
      An e-signature is an electronic signature. It is a digital version of a signature that has the same effect as a hand-written signature. 
---
id: forms assembling
continue button field: forms_assembling
question: |
  Almost done
subquestion: |
  After you click **Next**, it may take a few moments to finish making your forms.
  
  ###### You do not need to refresh your screen. Hang in there!
  
  [NEWLINE]
---
id: get docs screen
event: get_docs_screen
question: |
  Download
subquestion: |
  Your form is ready. View and download your form below. Click **Make changes** to fix any mistakes.

  This program does not deliver your *Financial Affidavit* to other party in your case. You will need to do this yourself.
  
  ${ action_button_html(url_action('review_answers'), label=':edit: Make changes', color='success', size="md") }

  ${ al_user_bundle.download_list_html() }

  [NEWLINE]

  ${ al_user_bundle.send_button_html(show_editable_checkbox=False) }

  **Note:** This program does not deliver your *Financial Affidavit* to other party in your case. You will need to do this yourself.
  
  Thank you for using ILAO Easy Forms!
under: |
  % if not user_logged_in():
  [${fa_icon("sign-in-alt", color="#0079d0", size="sm")} **Sign-in**](${url_of('login', next=interview_url())}) or [**create**](${url_of('register', next=interview_url())}) an ILAO Easy Form account to save your progress (optional).
  % endif

  ${ action_button_html(interview_url(i="docassemble.ILAO:feedback.yml", easy_form_interview=ilao_easy_form_url, easy_form_title=ilao_easy_form_title, easy_form_page=user_info().question_id, easy_form_variable=user_info().variable, local=False,reset=1), label=':comment: Was this program helpful?', color="#181c36", size="md", new_window=True) }
---
objects:
  - al_user_bundle: ALDocumentBundle.using(elements=[instructions, financial_affidavit_bundle], filename="completed_financial_affidavit.pdf", title="All forms", enabled=True)
---
objects:
  - financial_affidavit_bundle: ALDocumentBundle.using(title="Financial Affidavit", filename="fa_primary.pdf", enabled=True, elements=[
        fa_primary, 
        additional_employment_bundle,
        additional_health_insurance_bundle,
        additional_debts,
        additional_cash,
        additional_cd,
        additional_money,
        additional_investments,
        additional_securities,
        additional_real_estate,
        additional_motor_vehicle,
        additional_business_interests,
        additional_life_insurance,
        additional_retirement,
        additional_collectibles,
        additional_other_property,
        additional_transfer,
        additional_lawsuits,
      ])
---
objects:
  - instructions: ALDocument.using(title="Instructions", filename="instructions.pdf", enabled=True, has_addendum=False)
  - fa_primary: ALDocument.using(title="Financial Affidavit", filename="fa_primary.pdf", enabled=True, has_addendum=False)
---
############ FA PRIMARY DOCUMENT #############
attachment:
  - name: instructions
    variable name: instructions[i]
    filename: instructions
    pdf template file: instructions.pdf
---
attachment:
  - name: fa_primary
    variable name: fa_primary[i]
    filename: fa_primary
    pdf template file: fa_primary.pdf
    editable: False
    fields:
      - "county_name": ${ case_county.upper() }
      - "case_number": ${ case_number }
      - "pre-judgment": ${ filing_status == "pre_judgment" }
      - "post-judgment": ${ filing_status == "post_judgment" }
      - "petitioner_name": |
          % if party_label == 'petitioner':
          ${ users[0].name.full(middle='full') }
          % else:
          ${ other_parties[0].name.full(middle='full') }
          % endif
      - "respondent_name": |
          % if opposing_label == 'respondent':
          ${ other_parties[0].name.full(middle='full') }
          % else:
          ${ users[0].name.full(middle='full') }
          % endif
      - "petitioner_yes": ${ party_label == 'petitioner' }
      - "respondent_yes": ${ party_label == 'respondent' }
      - "date_affirm": ${ today().format('MM/dd/yyyy') }
      - "attached_pay_stubs": ${ users[0].attached_documents["stubs"] }
      - "attached_tax_return": ${ users[0].attached_documents["returns"] }
      - "attached_bank_statements": ${ users[0].attached_documents["statements"] }
      - "attached_other_documents": ${ users[0].attached_documents["other"] }
      - "other_document1": |
          % if users[0].attached_documents["other"]:
          ${ comma_and_list(users[0].attachment_debts) }
          % endif
      - "other_document2": |
          % if users[0].attached_documents["other"]:
          ${ comma_and_list(users[0].attachment_assets) }
          % endif
      - "users_name": ${ users[0].name.full(middle='full') }
      - "users_phone_number": |
          % if not hide_contact:
          ${ phone_number_formatted(users[0].phone_number) }
          % endif
      - "users_address": |
          % if not hide_contact:
          ${ users[0].address.line_one(bare=True) }
          % endif
      - "users_address2": |
          % if not hide_contact:
          ${ users[0].address.line_two() }
          % endif
      - "users_birthdate": ${ users[0].birthdate.format('MM/dd/yyyy') }
      - "household_expenses": ${ household_expenses }
      # Page 2: 6. My Employment/Business
      - "unemployed_yes": ${ employment.number_gathered() == 0 }  
      # employed
      - "employed_yes": |
          % if employment.there_are_any:
          ${ employment[0].type == "employed" }
          % endif
      - "employer_name": |
          % if employment.there_are_any and employment[0].type == "employed":
          ${ employment[0].name.text }
          % endif
      - "employer_address": |
          % if employment.there_are_any and employment[0].type == "employed":
          ${ employment[0].address.line_one(bare=True) }
          % endif
      - "employer_address2": |
          % if employment.there_are_any and employment[0].type == "employed":
          ${ employment[0].address.line_two() }
          % endif
      - "paychecks_monthly": |
          % if employment.there_are_any and employment[0].type == "employed":
          ${ employment[0].frequency == "12" }
          % endif
      - "paychecks_bi_monthly": |
          % if employment.there_are_any and employment[0].type == "employed":
          ${ employment[0].frequency == "24" }
          % endif
      - "paychecks_two_weeks": |
          % if employment.there_are_any and employment[0].type == "employed":
          ${ employment[0].frequency == "26" }
          % endif
      - "paychecks_weekly": |
          % if employment.there_are_any and employment[0].type == "employed":
          ${ employment[0].frequency == "52" }
          % endif
      - "paychecks_cash": |
          % if employment.there_are_any and employment[0].type == "employed":
          ${ employment[0].cash_payment }
          % endif
      - "income_gross": |
          % if employment.there_are_any and employment[0].type == "employed":
          ${ thousands(employment[0].gross_income, show_decimals=True) }
          % endif
      - "income_date": |
          % if employment.there_are_any and employment[0].type == "employed":
          ${ employment[0].gross_date.format('MM/dd/yyyy') }
          % endif
      # business
      - "business_own": |
          % if employment.there_are_any:
          ${ employment[0].type == "own" }
          % endif
      - "business_contractor": |
          % if employment.there_are_any:
          ${ employment[0].type == "contractor" }
          % endif
      - "business_partnership": |
          % if employment.there_are_any:
          ${ employment[0].type == "partnership" }
          % endif          
      - "business_llc": |
          % if employment.there_are_any:
          ${ employment[0].type == "llc" }
          % endif          
      - "business_corporation": |
          % if employment.there_are_any:
          ${ employment[0].type == "corp" }
          % endif
      - "business_other_entity": |
          % if employment.there_are_any:
          ${ employment[0].type == "other_entity" }
          % endif          
      - "business_name": |
          % if employment.there_are_any and employment[0].type != "employed":
          ${ employment[0].name.text }
          % endif
      - "business_address": |
          % if employment.there_are_any and employment[0].type != "employed":
          ${ employment[0].address.line_one(bare=True) }
          % endif
      - "business_address2": |
          % if employment.there_are_any and employment[0].type != "employed":
          ${ employment[0].address.line_two() }
          % endif
      - "business_gross_last_year": |
          % if employment.there_are_any and employment[0].type != "employed":
          ${ thousands(employment[0].income_last_year, show_decimals=True) }
          % endif
      - "business_gross_current_year": |
          % if employment.there_are_any and employment[0].type != "employed":
          ${ thousands(employment[0].income_current_year, show_decimals=True) }
          % endif           
      - "business_expense_last_year": |
          % if employment.there_are_any and employment[0].type != "employed":
          ${ thousands(employment[0].expenses_last_year, show_decimals=True) }
          % endif
      - "business_expense_current_year": |
          % if employment.there_are_any and employment[0].type != "employed":
          ${ thousands(employment[0].expenses_current_year, show_decimals=True) }
          % endif
      - "business_meals": |
          % if employment.there_are_any and employment[0].type != "employed":
          ${ employment[0].perks['meals'] }
          % endif
      - "business_car": |
          % if employment.there_are_any and employment[0].type != "employed":
          ${ employment[0].perks['car'] }
          % endif
      - "business_housing": |
          % if employment.there_are_any and employment[0].type != "employed":
          ${ employment[0].perks['housing'] }
          % endif
      - "business_other": |
          % if employment.there_are_any and employment[0].type != "employed":
          ${ employment[0].perks['other'] }
          % endif
      - "business_other_detail": |
          % if employment.there_are_any and employment[0].type != "employed" and employment[i].perks["other"] == True:
          ${ employment[0].other_perks }
          % endif
      - "employment_addendum_yes": ${ employment.number_gathered() > 1 }

      ## Page 3:  Gross income/taxes from last year, monthly gross income sources
      - "married_joint_yes": |
          % if taxes_filed:
          ${ taxes_filed_status == "joint" }
          % endif
      - "married_separate_yes": |
          % if taxes_filed:
          ${ taxes_filed_status == "separate" }
          % endif
      - "single_yes": |
          % if taxes_filed:
          ${ taxes_filed_status == "single" }
          % endif
      - "taxes_household": |
          % if taxes_filed:
          ${ taxes_filed_status == "household" }
          % endif
      - "taxes_not_filed": ${ not taxes_filed }   
      - "deduction_standard": |
          % if taxes_filed:
          ${ deduction_type == "standard" }
          % endif
      - "deduction_itemized": |
          % if taxes_filed:
          ${ deduction_type == "itemized" }
          % endif
      - "Gross income (before taxes and deductions) last year": |
          % if taxes_filed:
          ${ thousands(gross_income_last_year, show_decimals=True)}
          % endif
      - "Child Tax Credit": |
          % if taxes_filed:
          ${ tax_claimed['child_credit'] }
          % endif
      - "Additional child tax credit": |
          % if taxes_filed:
          ${ tax_claimed['additional'] }
          % endif
      - "Credit for other dependents": |
          % if taxes_filed:
          ${ tax_claimed['dependents'] }
          % endif
      - "Earned Income Credit": |
          % if taxes_filed:
          ${ tax_claimed['eic'] }
          % endif
      - "Dependent care credit": |
          % if taxes_filed:
          ${ tax_claimed['care'] }
          % endif
      # monthly gross income
      - "regular_pay": |
          % if users[0].regular_pay_question:
          ${thousands(users[0].regular_pay, show_decimals=True)}
          % endif
      - "overtime_pay": |
          % if users[0].overtime_pay_question:
          ${ thousands(users[0].overtime_pay, show_decimals=True)}
          % endif
      - "commission_pay": |
          % if users[0].commission_pay_question:
          ${ thousands(users[0].commission_pay, show_decimals=True)}
          % endif
      - "tips": |
          % if users[0].tips_question:
          ${ thousands(users[0].tips, show_decimals=True)}
          % endif
      - "bonus": |
          % if users[0].bonus_question:
          ${ thousands(users[0].bonus, show_decimals=True)}
          % endif
      - "pension": |
          % if users[0].pension_question:
          ${ thousands(users[0].pension, show_decimals=True)}
          % endif
      - "annuity": |
          % if users[0].annuity_question:
          ${ thousands(users[0].annuity, show_decimals=True)}
          % endif
      - "interest_income": |
          % if users[0].interest_question:
          ${ thousands(users[0].interest, show_decimals=True)}
          % endif
      - "dividend_income": |
          % if users[0].dividend_question:
          ${ thousands(users[0].dividend, show_decimals=True)}
          % endif
      - "trust_income": |
          % if users[0].trust_question:
          ${ thousands(users[0].trust, show_decimals=True)}
          % endif
      - "investment_income": |
          % if users[0].investment_question:
          ${ thousands(users[0].investment, show_decimals=True)}
          % endif
      - "social_retirement": |
          % if users[0].social_retirement_question:
          ${ thousands(users[0].social_retirement, show_decimals=True)}
          % endif
      - "social_disability": |
          % if users[0].social_disability_question:
          ${ thousands(users[0].social_disability, show_decimals=True)}
          % endif
      - "social_income": |
          % if users[0].social_income_question:
          ${ thousands(users[0].social_income, show_decimals=True)}
          % endif
      - "unemployment_benefits": |
          % if users[0].unemployment_benefits_question:
          ${ thousands(users[0].unemployment_benefits, show_decimals=True)}
          % endif
      - "disability_benefits": |
          % if users[0].disability_benefits_question:
          ${ thousands(users[0].disability_benefits, show_decimals=True)}
          % endif
      - "workers_comp_benefits": |
          % if users[0].workers_comp_benefits_question:
          ${ thousands(users[0].workers_comp_benefits, show_decimals=True)}
          % endif
      - "child_benefits": |
          % if users[0].child_benefits_question:
          ${ thousands(users[0].child_benefits, show_decimals=True)}
          % endif
      - "military_allowances": |
          % if users[0].military_allowances_question:
          ${ thousands(users[0].military_allowances, show_decimals=True)}
          % endif
      - "rental_income": |
          % if users[0].rental_income_question:
          ${ thousands(users[0].rental_income, show_decimals=True)}
          % endif
      - "partnership_income": |
          % if users[0].partnership_income_question:
          ${ thousands(users[0].partnership_income, show_decimals=True)}
          % endif
      - "distributions_draws": |
          % if users[0].distributions_draws_question:
          ${ thousands(users[0].distributions_draws, show_decimals=True)}
          % endif
      - "royalty_income": |
          % if users[0].royalty_income_question:
          ${ thousands(users[0].royalty_income, show_decimals=True)}
          % endif
      - "maintenance_current": |
          % if users[0].maintenance_current_question:
          ${ thousands(users[0].maintenance_current, show_decimals=True)}
          % endif
      - "maintenance_alternate": |
          % if users[0].maintenance_alternate_question:
          ${ thousands(users[0].maintenance_alternate, show_decimals=True)}
          % endif
      - "child_support_current": |
          % if users[0].child_support_current_question:
          ${ thousands(users[0].child_support_current, show_decimals=True)}
          % endif
      - "social_security_current": |
          % if users[0].social_security_current_question:
          ${ thousands(users[0].social_security_current, show_decimals=True)}
          % endif
      - "gifts_money": |
          % if users[0].gifts_money_question:
          ${ thousands(users[0].gifts_money, show_decimals=True)}
          % endif
      - "other_income": |
          % if users[0].other_income_question:
          ${ thousands(users[0].other_income, show_decimals=True)}
          % endif
      - "other_income_description": |
          % if users[0].other_income_question:
          ${ users[0].other_income_description }
          % endif          
      - "total_gross_monthly_income": |
          ${ thousands(total_gross_monthly_income, show_decimals=True) }
      # expenses
      - "deductions_federal": |
          % if users[0].deductions_federal_question:
          ${ thousands(users[0].deductions_federal, show_decimals=True)}
          % endif
      - "deductions_state": |
          % if users[0].deductions_state_question:
          ${ thousands(users[0].deductions_state, show_decimals=True)}
          % endif
      - "deductions_fica": |
          % if users[0].deductions_fica_question:
          ${ thousands(users[0].deductions_fica, show_decimals=True)}
          % endif
      - "deductions_medicare": |
          % if users[0].deductions_medicare_question:
          ${ thousands(users[0].deductions_medicare, show_decimals=True)}
          % endif
      - "deductions_retirement": |
          % if users[0].deductions_retirement_question:
          ${ thousands(users[0].deductions_retirement, show_decimals=True)}
          % endif
      - "total_deductions": |
          ${ thousands(total_monthly_deductions, show_decimals=True)}
      - "maintenance_paid_court": |
          % if users[0].maintenance_paid_court_question:
          ${ thousands(users[0].maintenance_paid_court, show_decimals=True)}
          % endif
      - "maintenance_paid_no_tax": |
          % if users[0].maintenance_paid_no_tax_question:
          ${ thousands(users[0].maintenance_paid_no_tax, show_decimals=True)}
          % endif
      - "maintenance_paid_taxed": |
          % if users[0].maintenance_paid_taxed_question:
          ${ thousands(users[0].maintenance_paid_taxed, show_decimals=True)}
          % endif
      - "total_maintenance": |
          ${ thousands(total_maintenance_payments, show_decimals=True)}
      - "child_support_1": |
          % if users[0].child_support_1_question:
          ${ thousands(users[0].child_support_1, show_decimals=True)}
          % endif
      - "child_support_2": |
          % if users[0].child_support_2_question:
          ${ thousands(users[0].child_support_2, show_decimals=True)}
          % endif
      - "child_support_3": |
          % if users[0].child_support_3_question:
          ${ thousands(users[0].child_support_3, show_decimals=True)}
          % endif
      - "total_child_support": |
          ${ thousands(total_child_support_payments, show_decimals=True)}
      - "living_house_payment": |
          % if users[0].living_house_payment_question:
          ${ thousands(users[0].living_house_payment, show_decimals=True)}
          % endif
      - "living_heloc": |
          % if users[0].living_heloc_question:
          ${ thousands(users[0].living_heloc, show_decimals=True)}
          % endif
      - "living_property_taxes": |
          % if users[0].living_property_taxes_question:
          ${ thousands(users[0].living_property_taxes, show_decimals=True)}
          % endif
      - "living_hoa": |
          % if users[0].living_hoa_question:
          ${ thousands(users[0].living_hoa, show_decimals=True)}
          % endif
      - "living_insurance": |
          % if users[0].living_insurance_question:
          ${ thousands(users[0].living_insurance, show_decimals=True)}
          % endif
      - "living_gas": |
          % if users[0].living_gas_question:
          ${ thousands(users[0].living_gas, show_decimals=True)}
          % endif
      - "living_power": |
          % if users[0].living_power_question:
          ${ thousands(users[0].living_power, show_decimals=True)}
          % endif
      - "living_phone": |
          % if users[0].living_phone_question:
          ${ thousands(users[0].living_phone, show_decimals=True)}
          % endif
      - "living_cable": |
          % if users[0].living_cable_question:
          ${ thousands(users[0].living_cable, show_decimals=True)}
          % endif
      - "living_internet": |
          % if users[0].living_internet_question:
          ${ thousands(users[0].living_internet, show_decimals=True)}
          % endif
      - "living_water": |
          % if users[0].living_water_question:
          ${ thousands(users[0].living_water, show_decimals=True)}
          % endif
      - "living_trash": |
          % if users[0].living_trash_question:
          ${ thousands(users[0].living_trash, show_decimals=True)}
          % endif
      - "living_laundry": |
          % if users[0].living_laundry_question:
          ${ thousands(users[0].living_laundry, show_decimals=True)}
          % endif
      - "living_cleaner": |
          % if users[0].living_cleaner_question:
          ${ thousands(users[0].living_cleaner, show_decimals=True)}
          % endif
      - "living_repairs": |
          % if users[0].living_repairs_question:
          ${ thousands(users[0].living_repairs, show_decimals=True)}
          % endif
      - "living_pets": |
          % if users[0].living_pets_question:
          ${ thousands(users[0].living_pets, show_decimals=True)}
          % endif
      - "living_groceries": |
          % if users[0].living_groceries_question:
          ${ thousands(users[0].living_groceries, show_decimals=True)}
          % endif
      - "living_other": |
          % if users[0].living_other_question:
          ${ thousands(users[0].living_other, show_decimals=True)}
          % endif
      - "living_other_description": |
          % if users[0].living_other_question:
          ${ users[0].living_other_description }
          % endif
      - "subtotal_living": |
          ${ thousands(subtotal_monthly_household_expenses, show_decimals=True)}
      - "transport_payment": |
          % if users[0].transport_payment_question:
          ${ thousands(users[0].transport_payment, show_decimals=True)}
          % endif
      - "transport_maintenance": |
          % if users[0].transport_maintenance_question:
          ${ thousands(users[0].transport_maintenance, show_decimals=True)}
          % endif
      - "transport_insurance": |
          % if users[0].transport_insurance_question:
          ${ thousands(users[0].transport_insurance, show_decimals=True)}
          % endif
      - "transport_fuel": |
          % if users[0].transport_fuel_question:
          ${ thousands(users[0].transport_fuel, show_decimals=True)}
          % endif
      - "transport_public": |
          % if users[0].transport_public_question:
          ${ thousands(users[0].transport_public, show_decimals=True)}
          % endif
      - "transport_parking": |
          % if users[0].transport_parking_question:
          ${ thousands(users[0].transport_parking, show_decimals=True)}
          % endif
      - "transport_other": |
          % if users[0].transport_other_question:
          ${ thousands(users[0].transport_other, show_decimals=True)}
          % endif
      - "transport_other_description": |
          % if users[0].transport_other_question:
          ${ users[0].transport_other_description }
          % endif
      - "subtotal_transport":  |
          ${ thousands(subtotal_monthly_transportation_expenses, show_decimals=True)}
      - "personal_doctor": |
          % if users[0].personal_doctor_question:
          ${ thousands(users[0].personal_doctor, show_decimals=True)}
          % endif
      - "personal_therapy": |
          % if users[0].personal_therapy_question:
          ${ thousands(users[0].personal_therapy, show_decimals=True)}
          % endif
      - "personal_dental": |
          % if users[0].personal_dental_question:
          ${ thousands(users[0].personal_dental, show_decimals=True)}
          % endif
      - "personal_vision": |
          % if users[0].personal_vision_question:
          ${ thousands(users[0].personal_vision, show_decimals=True)}
          % endif
      - "personal_medications": |
          % if users[0].personal_medications_question:
          ${ thousands(users[0].personal_medications, show_decimals=True)}
          % endif
      - "personal_life_term": |
          % if users[0].personal_life_term_question:
          ${ thousands(users[0].personal_life_term, show_decimals=True)}
          % endif
      - "personal_life_whole": |
          % if users[0].personal_life_whole_question:
          ${ thousands(users[0].personal_life_whole, show_decimals=True)}
          % endif
      - "personal_clothing": |
          % if users[0].personal_clothing_question:
          ${ thousands(users[0].personal_clothing, show_decimals=True)}
          % endif
      - "personal_stylist": |
          % if users[0].personal_stylist_question:
          ${ thousands(users[0].personal_stylist, show_decimals=True)}
          % endif
      - "personal_memberships": |
          % if users[0].personal_memberships_question:
          ${ thousands(users[0].personal_memberships, show_decimals=True)}
          % endif
      - "personal_subscriptions": |
          % if users[0].personal_subscriptions_question:
          ${ thousands(users[0].personal_subscriptions, show_decimals=True)}
          % endif
      - "personal_entertainment": |
          % if users[0].personal_entertainment_question:
          ${ thousands(users[0].personal_entertainment, show_decimals=True)}
          % endif
      - "personal_gifts": |
          % if users[0].personal_gifts_question:
          ${ thousands(users[0].personal_gifts, show_decimals=True)}
          % endif
      - "personal_donations": |
          % if users[0].personal_donations_question:
          ${ thousands(users[0].personal_donations, show_decimals=True)}
          % endif
      - "personal_vacations": |
          % if users[0].personal_vacations_question:
          ${ thousands(users[0].personal_vacations, show_decimals=True)}
          % endif
      - "personal_associations": |
          % if users[0].personal_associations_question:
          ${ thousands(users[0].personal_associations, show_decimals=True)}
          % endif
      - "peronsal_professional": |
          % if users[0].peronsal_professional_question:
          ${ thousands(users[0].peronsal_professional, show_decimals=True)}
          % endif
      - "personal_other": |
          % if users[0].personal_other_question:
          ${ thousands(users[0].personal_other, show_decimals=True)}
          % endif
      - "personal_other": |
          % if users[0].personal_other_question:
          ${ thousands(users[0].personal_other, show_decimals=True)}
          % endif
      - "personal_other_description": |
          % if users[0].personal_other_question:
          ${ users[0].personal_other_description}
          % endif
      - "subtotal_personal":  |
          ${ thousands(subtotal_monthly_personal_expenses, show_decimals=True) }
      - "children_clothing": |
          % if users[0].children_expenses_question and users[0].children_clothing_question:
          ${ thousands(users[0].children_clothing, show_decimals=True)}
          % endif
      - "children_grooming": |
          % if users[0].children_expenses_question and users[0].children_grooming_question:
          ${ thousands(users[0].children_grooming, show_decimals=True)}
          % endif
      - "children_tuition": |
          % if users[0].children_expenses_question and users[0].children_tuition_question:
          ${ thousands(users[0].children_tuition, show_decimals=True)}
          % endif
      - "children_books": |
          % if users[0].children_expenses_question and users[0].children_books_question:
          ${ thousands(users[0].children_books, show_decimals=True)}
          % endif
      - "children_school_lunch": |
          % if users[0].children_expenses_question and users[0].children_school_lunch_question:
          ${ thousands(users[0].children_school_lunch, show_decimals=True)}
          % endif
      - "children_transportation": |
          % if users[0].children_expenses_question and users[0].children_transportation_question:
          ${ thousands(users[0].children_transportation, show_decimals=True)}
          % endif
      - "children_school_events": |
          % if users[0].children_expenses_question and users[0].children_school_events_question:
          ${ thousands(users[0].children_school_events, show_decimals=True)}
          % endif
      - "children_school_uniforms": |
          % if users[0].children_expenses_question and users[0].children_school_uniforms_question:
          ${ thousands(users[0].children_school_uniforms, show_decimals=True)}
          % endif
      - "children_after_school": |
          % if users[0].children_expenses_question and users[0].children_after_school_question:
          ${ thousands(users[0].children_after_school, show_decimals=True)}
          % endif
      - "children_tutor": |
          % if users[0].children_expenses_question and users[0].children_tutor_question:
          ${ thousands(users[0].children_tutor, show_decimals=True)}
          % endif
      - "children_doctor": |
          % if users[0].children_expenses_question and users[0].children_doctor_question:
          ${ thousands(users[0].children_doctor, show_decimals=True)}
          % endif
      - "children_therapy": |
          % if users[0].children_expenses_question and users[0].children_therapy_question:
          ${ thousands(users[0].children_therapy, show_decimals=True)}
          % endif
      - "children_dental": |
          % if users[0].children_expenses_question and users[0].children_dental_question:
          ${ thousands(users[0].children_dental, show_decimals=True)}
          % endif
      - "children_vision": |
          % if users[0].children_expenses_question and users[0].children_vision_question:
          ${ thousands(users[0].children_vision, show_decimals=True)}
          % endif
      - "children_medications": |
          % if users[0].children_expenses_question and users[0].children_medications_question:
          ${ thousands(users[0].children_medications, show_decimals=True)}
          % endif
      - "children_allowance": |
          % if users[0].children_expenses_question and users[0].children_allowance_question:
          ${ thousands(users[0].children_allowance, show_decimals=True)}
          % endif
      - "children_childcare": |
          % if users[0].children_expenses_question and users[0].children_childcare_question:
          ${ thousands(users[0].children_childcare, show_decimals=True)}
          % endif
      - "children_sports": |
          % if users[0].children_expenses_question and users[0].children_sports_question:
          ${ thousands(users[0].children_sports, show_decimals=True)}
          % endif
      - "children_camps": |
          % if users[0].children_expenses_question and users[0].children_camps_question:
          ${ thousands(users[0].children_camps, show_decimals=True)}
          % endif
      - "children_vacations": |
          % if users[0].children_expenses_question and users[0].children_vacations_question:
          ${ thousands(users[0].children_vacations, show_decimals=True)}
          % endif
      - "children_entertainment": |
          % if users[0].children_expenses_question and users[0].children_entertainment_question:
          ${ thousands(users[0].children_entertainment, show_decimals=True)}
          % endif
      - "children_party_gifts": |
          % if users[0].children_expenses_question and users[0].children_party_gifts_question:
          ${ thousands(users[0].children_party_gifts, show_decimals=True)}
          % endif
      - "children_other": |
          % if users[0].children_expenses_question and users[0].children_other_question:
          ${ thousands(users[0].children_other, show_decimals=True)}
          % endif
      - "children_other_description": |
          % if users[0].children_expenses_question and users[0].children_other_question:
          ${ users[0].children_other_description}
          % endif
      - "subtotal_children_expense":  |
          ${ thousands(subtotal_monthly_children_expenses, show_decimals=True)}
      # Part 12 total monthly living expenses
      - "total_monthly_living _expenses": |
          ${ thousands(total_monthly_household_expenses, show_decimals=True)}
      # 13 Health insurance
      - "health_insurance_yes": ${ insurance.there_are_any }
      - "health_insurance_no": ${ insurance.number_gathered() == 0 }
      - "health_insurance_company": |
          % if insurance.there_are_any:
          ${ insurance[0].name.text }
          % endif
      - "insurance_type_dental": |
          % if insurance.there_are_any:
          ${ insurance[0].type == "Dental" }
          % endif
      - "insurance_type_medical": |
          % if insurance.there_are_any:
          ${ insurance[0].type == "Medical" }
          % endif
      - "insurance_type_vision": |
          % if insurance.there_are_any:
          ${ insurance[0].type == "Vision" }
          % endif          
      - "insurance_type_orthodontic": |
          % if insurance.there_are_any:
          ${ insurance[0].type == "Orthodontic" }
          % endif          
      - "policy_type_ppo": |
          % if insurance.there_are_any:
          ${ insurance[0].policy == "PPO" }
          % endif
      - "policy_type_hmo": |
          % if insurance.there_are_any:
          ${ insurance[0].policy == "HMO" }
          % endif         
      - "policy_type_other": |
          % if insurance.there_are_any:
          ${ insurance[0].policy == "Other" }
          % endif
      - "insurance_provided_employer": |
          % if insurance.there_are_any:
          ${ insurance[0].provider == "employer" }
          % endif         
      - "insurance_provided_private": |
          % if insurance.there_are_any:
          ${ insurance[0].provider == "private" }
          % endif 
      - "insurance_provided_group": |
          % if insurance.there_are_any:
          ${ insurance[0].provider == "group" }
          % endif          
      - "insurance_provided_public": |
          % if insurance.there_are_any:
          ${ insurance[0].provider == "public" }
          % endif
      - "insurance_total_covered": |
          % if insurance.there_are_any:
          ${ nice_number(insurance[0].total_covered, use_word=False) }
          % endif
      - "insurance_covers_myself": |
          % if insurance.there_are_any:
          ${ insurance[0].coverage["myself"] }
          % endif
      - "insurance_covers_both": |
          % if insurance.there_are_any:
          ${ insurance[0].coverage["both"] }
          % endif
      - "insurance_covers_children_current": |
          % if insurance.there_are_any:
          ${ insurance[0].coverage["children_current"] }
          % endif
      - "insurance_covers_children_other": |
          % if insurance.there_are_any:
          ${ insurance[0].coverage["children_other"] }
          % endif
      - "other_children_covered": |
          % if insurance.there_are_any and insurance[0].coverage["children_other"]:
            % if insurance[0].other_children_count == 1:
            1 child, age: ${ insurance[0].other_children_age_list }
            % else:
            ${ insurance[0].other_children_count } children, ages: ${ insurance[0].other_children_age_list }
            % endif
          % endif
      - "insurance_monthly_cost": |
          % if insurance.there_are_any:
          ${ thousands(insurance[0].monthly_cost, show_decimals=True) }
          % endif
      - "insurance_paid_myself": |
          % if insurance.there_are_any:
          ${ insurance[0].paid == "myself" }
          % endif
      - "insurance_paid_partner": |
          % if insurance.there_are_any:
          ${ insurance[0].paid == "partner" }
          % endif
      - "insurance_paid_other": |
          % if insurance.there_are_any:
          ${ insurance[0].paid == "other" }
          % endif
      - "insurance_paid_other_description": |
          % if insurance.there_are_any and insurance[0].paid == "other":
          ${ insurance[0].other_description }
          % endif
      - "cost_insurance_children": |
          % if insurance.there_are_any:
          ${ thousands(insurance[0].cost_children, show_decimals=True) }
          % endif
      - "cost_insurance_children_current": |
          % if insurance.there_are_any:
          ${ thousands(insurance[0].cost_children_current, show_decimals=True) }
          % endif
      - "individual_deductible": |
          % if insurance.there_are_any:
          ${ thousands(insurance[0].individual_deductible, show_decimals=True) }
          % endif
      - "family_deductible": |
          % if insurance.there_are_any:
          ${ thousands(insurance[0].family_deductible, show_decimals=True) }
          % endif
      - "coinsurance": |
          % if insurance.there_are_any:
          ${ nice_number(insurance[0].coinsurance, use_word=False) }
          % endif
      - "copayment": |
          % if insurance.there_are_any:
          ${ thousands(insurance[0].copayment, show_decimals=True) }
          % endif
      - "insurance_addendum_yes": ${ insurance.number_gathered() > 1 }
      # 14 Debts
      - "creditor_name_1": |
          % if has_debts:
          ${ debts[0].name.text }
          % endif
      - "creditor_description_1": |
          % if has_debts:
          ${ debts[0].description }
          % endif
      - "creditor_amount_1": |
          % if has_debts:
          ${ thousands(debts[0].amount, show_decimals=True) }
          % endif
      - "creditor_payment_1": |
          % if has_debts:
          ${ thousands(debts[0].payment, show_decimals=True) }
          % endif
      - "creditor_name_2": |
          % if debts.number_gathered() >= 2:
          ${ debts[1].name.text }
          % endif
      - "creditor_description_2": |
          % if debts.number_gathered() >= 2:
          ${ debts[1].description }
          % endif
      - "creditor_amount_2": |
          % if debts.number_gathered() >= 2:
          ${ thousands(debts[1].amount, show_decimals=True) }
          % endif
      - "creditor_payment_2": |
          % if debts.number_gathered() >= 2:
          ${ thousands(debts[1].payment, show_decimals=True) }
          % endif
      - "creditor_name_3": |
          % if debts.number_gathered() >= 3:
          ${ debts[2].name.text }
          % endif
      - "creditor_description_3": |
          % if debts.number_gathered() >= 3:
          ${ debts[2].description }
          % endif
      - "creditor_amount_3": |
          % if debts.number_gathered() >= 3:
          ${ thousands(debts[2].amount, show_decimals=True) }
          % endif
      - "creditor_payment_3": |
          % if debts.number_gathered() >= 3:
          ${ thousands(debts[2].payment, show_decimals=True) }
          % endif
      - "creditor_name_4": |
          % if debts.number_gathered() >= 4:
          ${ debts[3].name.text }
          % endif
      - "creditor_description_4": |
          % if debts.number_gathered() >= 4:
          ${ debts[3].description }
          % endif
      - "creditor_amount_4": |
          % if debts.number_gathered() >= 4:
          ${ thousands(debts[3].amount, show_decimals=True) }
          % endif
      - "creditor_payment_4": |
          % if debts.number_gathered() >= 4:
          ${ thousands(debts[3].payment, show_decimals=True) }
          % endif
      - "creditor_name_5": |
          % if debts.number_gathered() >= 5:
          ${ debts[4].name.text }
          % endif
      - "creditor_description_5": |
          % if debts.number_gathered() >= 5:
          ${ debts[4].description }
          % endif
      - "creditor_amount_5": |
          % if debts.number_gathered() >= 5:
          ${ thousands(debts[4].amount, show_decimals=True) }
          % endif
      - "creditor_payment_5": |
          % if debts.number_gathered() >= 5:
          ${ thousands(debts[4].payment, show_decimals=True) }
          % endif
      - "creditor_name_6": |
          % if debts.number_gathered() >= 6:
          ${ debts[5].name.text }
          % endif
      - "creditor_description_6": |
          % if debts.number_gathered() >= 6:
          ${ debts[5].description }
          % endif
      - "creditor_amount_6": |
          % if debts.number_gathered() >= 6:
          ${ thousands(debts[5].amount, show_decimals=True) }
          % endif
      - "creditor_payment_6": |
          % if debts.number_gathered() >= 6:
          ${ thousands(debts[5].payment, show_decimals=True) }
          % endif
      - "creditor_addendum_yes": ${ debts.number_gathered() > 6 }
      - "total_aditional_debts": |
          % if has_debts and debts.number_gathered() >= 7:
          ${ thousands(sum(y.payment for y in debts[6:]), show_decimals=True) }
          % endif
      - "total_debt_payments": |
          % if has_debts:
          ${ thousands(sum(y.payment for y in debts), show_decimals=True) }
          % endif
      # 15 Assets - Cash/bank accounts
      - "cash_bank_name_1": |
          % if has_cash_assets:
          ${ cash[0].name.text }
          % endif
      - "cash_account_name_1": |
          % if has_cash_assets:
          ${ cash[0].account }
          % endif
      - "cash_account_type_1": |
          % if has_cash_assets:
          ${ cash[0].type }
          % endif
      - "cash_balance_1": |
          % if has_cash_assets:
          ${ thousands(cash[0].balance, show_decimals=True) }
          % endif
      - "cash_bank_name_2": |
          % if cash.number_gathered() >= 2:
          ${ cash[1].name.text }
          % endif
      - "cash_account_name_2": |
          % if cash.number_gathered() >= 2:
          ${ cash[1].account }
          % endif
      - "cash_account_type_2": |
          % if cash.number_gathered() >= 2:
          ${ cash[1].type }
          % endif
      - "cash_balance_2": |
          % if cash.number_gathered() >= 2:
          ${ thousands(cash[1].balance, show_decimals=True) }
          % endif
      - "cash_bank_name_3": |
          % if cash.number_gathered() >= 3:
          ${ cash[2].name.text }
          % endif
      - "cash_account_name_3": |
          % if cash.number_gathered() >= 3:
          ${ cash[2].account }
          % endif
      - "cash_account_type_3": |
          % if cash.number_gathered() >= 3:
          ${ cash[2].type }
          % endif
      - "cash_balance_3": |
          % if cash.number_gathered() >= 3:
          ${ thousands(cash[2].balance, show_decimals=True) }
          % endif
      - "cash_addendum_yes": ${ cash.number_gathered() > 3 }
      # 15 Assets - Certificate of Deposit
      - "cd_bank_name_1": |
          % if has_cert_deposit:
          ${ cert_deposit[0].name.text }
          % endif
      - "cd_account_name_1": |
          % if has_cert_deposit:
          ${ cert_deposit[0].account }
          % endif
      - "cd_balance_1": |
          % if has_cert_deposit:
          ${ thousands(cert_deposit[0].balance, show_decimals=True) }
          % endif
      - "cd_bank_name_2": |
          % if cert_deposit.number_gathered() >= 2:
          ${ cert_deposit[1].name.text }
          % endif
      - "cd_account_name_2": |
          % if cert_deposit.number_gathered() >= 2:
          ${ cert_deposit[1].account }
          % endif
      - "cd_balance_2": |
          % if cert_deposit.number_gathered() >= 2:
          ${ thousands(cert_deposit[1].balance, show_decimals=True) }
          % endif
      - "cd_bank_name_3": |
          % if cert_deposit.number_gathered() >= 3:
          ${ cert_deposit[2].name.text }
          % endif
      - "cd_account_name_3": |
          % if cert_deposit.number_gathered() >= 3:
          ${ cert_deposit[2].account }
          % endif
      - "cd_balance_3": |
          % if cert_deposit.number_gathered() >= 3:
          ${ thousands(cert_deposit[2].balance, show_decimals=True) }
          % endif
      - "cd_addendum_yes": ${ cert_deposit.number_gathered() > 3 }
      # 15 Assets - Money cash/card/apps
      - "money_card_1": |
          % if has_money:
          ${ money[0].name.text }
          % endif
      - "money_holder_1": |
          % if has_money:
          ${ money[0].holder }
          % endif
      - "money_balance_1": |
          % if has_money:
          ${ thousands(money[0].balance, show_decimals=True) }
          % endif
      - "money_card_2": |
          % if money.number_gathered() >= 2:
          ${ money[1].name.text }
          % endif
      - "money_holder_2": |
          % if money.number_gathered() >= 2:
          ${ money[1].holder }
          % endif
      - "money_balance_2": |
          % if money.number_gathered() >= 2:
          ${ thousands(money[1].balance, show_decimals=True) }
          % endif
      - "money_card_3": |
          % if money.number_gathered() >= 3:
          ${ money[2].name.text }
          % endif
      - "money_holder_3": |
          % if money.number_gathered() >= 3:
          ${ money[2].holder }
          % endif
      - "money_balance_3": |
          % if money.number_gathered() >= 3:
          ${ thousands(money[2].balance, show_decimals=True) }
          % endif
      - "money_addendum_yes": ${ money.number_gathered() > 3 }
      # 15 Assets - Investments
      - "investment_name_1": |
          % if has_investments:
          ${ investments[0].name.text }
          % endif
      - "investment_shares_1": |
          % if has_investments:
          ${ investments[0].shares }
          % endif
      - "investment_type_1": |
          % if has_investments:
          ${ investments[0].type }
          % endif
      - "investment_owner_1": |
          % if has_investments:
          ${ investments[0].owner }
          % endif
      - "investment_fmv_1": |
          % if has_investments:
          ${ thousands(investments[0].fmv, show_decimals=True) }
          % endif
      - "investment_name_2": |
          % if investments.number_gathered() >= 2:
          ${ investments[1].name.text }
          % endif
      - "investment_shares_2": |
          % if investments.number_gathered() >= 2:
          ${ investments[1].shares }
          % endif
      - "investment_type_2": |
          % if investments.number_gathered() >= 2:
          ${ investments[1].type }
          % endif
      - "investment_owner_2": |
          % if investments.number_gathered() >= 2:
          ${ investments[1].owner }
          % endif
      - "investment_fmv_2": |
          % if investments.number_gathered() >= 2:
          ${ thousands(investments[1].fmv, show_decimals=True) }
          % endif
      - "investment_name_3": |
          % if investments.number_gathered() >= 2:
          ${ investments[2].name.text }
          % endif
      - "investment_shares_3": |
          % if investments.number_gathered() >= 2:
          ${ investments[2].shares }
          % endif
      - "investment_type_3": |
          % if investments.number_gathered() >= 2:
          ${ investments[2].type }
          % endif
      - "investment_owner_3": |
          % if investments.number_gathered() >= 2:
          ${ investments[2].owner }
          % endif
      - "investment_fmv_3": |
          % if investments.number_gathered() >= 3:
          ${ thousands(investments[2].fmv, show_decimals=True) }
          % endif
      - "investment_addendum_yes": ${ investments.number_gathered() > 3 }
      # 15 Assets - Investment securities
      - "securities_description_1": |
          % if has_securities:
          ${ securities[0].name.text }
          % endif
      - "securities_owner_1": |
          % if has_securities:
          ${ securities[0].owner }
          % endif
      - "securities_balance_1": |
          % if has_securities:
          ${ thousands(securities[0].balance, show_decimals=True) }
          % endif
      - "securities_description_2": |
          % if securities.number_gathered() >= 2:
          ${ securities[1].name.text }
          % endif
      - "securities_owner_2": |
          % if securities.number_gathered() >= 2:
          ${ securities[1].owner }
          % endif
      - "securities_balance_2": |
          % if securities.number_gathered() >= 2:
          ${ thousands(securities[1].balance, show_decimals=True) }
          % endif
      - "securities_description_3": |
          % if securities.number_gathered() >= 3:
          ${ securities[2].name.text }
          % endif
      - "securities_owner_3": |
          % if securities.number_gathered() >= 3:
          ${ securities[2].owner }
          % endif
      - "securities_balance_3": |
          % if securities.number_gathered() >= 3:
          ${ thousands(securities[2].balance, show_decimals=True) }
          % endif
      - "securities_addendum_yes": ${ securities.number_gathered() > 3 }
      # 15 Assets - Real Estate
      - "real_estate_address_1": |
          % if has_real_estate:
          ${ real_estate[0].address.on_one_line() }
          % endif
      - "real_estate_title_1": |
          % if has_real_estate:
          ${ real_estate[0].name.text }
          % endif
      - "real_estate_fmv_1": |
          % if has_real_estate:
          ${ thousands(real_estate[0].balance, show_decimals=True) }
          % endif
      - "real_estate_balance_1": |
          % if has_real_estate:
          ${ thousands(real_estate[0].balance, show_decimals=True) }
          % endif
      - "real_estate_address_2": |
          % if real_estate.number_gathered() >= 2:
          ${ real_estate[1].address.on_one_line() }
          % endif
      - "real_estate_title_2": |
          % if real_estate.number_gathered() >= 2:
          ${ real_estate[1].name.text }
          % endif
      - "real_estate_fmv_2": |
          % if real_estate.number_gathered() >= 2:
          ${ thousands(real_estate[1].balance, show_decimals=True) }
          % endif
      - "real_estate_balance_2": |
          % if real_estate.number_gathered() >= 2:
          ${ thousands(real_estate[1].balance, show_decimals=True) }
          % endif
      - "real_estate_address_3": |
          % if real_estate.number_gathered() >= 3:
          ${ real_estate[2].address.on_one_line() }
          % endif
      - "real_estate_title_3": |
          % if real_estate.number_gathered() >= 3:
          ${ real_estate[2].name.text }
          % endif
      - "real_estate_fmv_3": |
          % if real_estate.number_gathered() >= 3:
          ${ thousands(real_estate[2].fmv, show_decimals=True) }
          % endif
      - "real_estate_balance_3": |
          % if real_estate.number_gathered() >= 3:
          ${ thousands(real_estate[2].balance, show_decimals=True) }
          % endif
      - "real_estate_addendum_yes": ${ real_estate.number_gathered() > 3 }
      # 15 Assets - Motor Vehicles
      - "motor_vehicle_info_1": |
          % if has_motor_vehicle:
          ${ motor_vehicle[0].year } ${ motor_vehicle[0].make } ${ motor_vehicle[0].model }
          % endif
      - "motor_vehicle_title_1": |
          % if has_motor_vehicle:
          ${ motor_vehicle[0].name.text }
          % endif
      - "motor_vehicle_fmv_1": |
          % if has_motor_vehicle:
          ${ thousands(motor_vehicle[0].fmv, show_decimals=True) }
          % endif
      - "motor_vehicle_balance_1": |
          % if has_motor_vehicle:
          ${ thousands(motor_vehicle[0].balance, show_decimals=True) }
          % endif
      - "motor_vehicle_info_2": |
          % if motor_vehicle.number_gathered() >= 2:
          ${ motor_vehicle[1].year } ${ motor_vehicle[1].make } ${ motor_vehicle[1].model }
          % endif
      - "motor_vehicle_title_2": |
          % if motor_vehicle.number_gathered() >= 2:
          ${ motor_vehicle[1].name.text }
          % endif
      - "motor_vehicle_fmv_2": |
          % if motor_vehicle.number_gathered() >= 2:
          ${ thousands(motor_vehicle[1].fmv, show_decimals=True) }
          % endif
      - "motor_vehicle_balance_2": |
          % if motor_vehicle.number_gathered() >= 2:
          ${ thousands(motor_vehicle[1].balance, show_decimals=True) }
          % endif
      - "motor_vehicle_info_3": |
          % if motor_vehicle.number_gathered() >= 3:
          ${ motor_vehicle[2].year } ${ motor_vehicle[2].make } ${ motor_vehicle[2].model }
          % endif
      - "motor_vehicle_title_3": |
          % if motor_vehicle.number_gathered() >= 3:
          ${ motor_vehicle[2].name.text }
          % endif
      - "motor_vehicle_fmv_3": |
          % if motor_vehicle.number_gathered() >= 3:
          ${ thousands(motor_vehicle[2].fmv, show_decimals=True) }
          % endif
      - "motor_vehicle_balance_3": |
          % if motor_vehicle.number_gathered() >= 3:
          ${ thousands(motor_vehicle[2].balance, show_decimals=True) }
          % endif
      - "motor_vehicle_info_4": |
          % if motor_vehicle.number_gathered() >= 4:
          ${ motor_vehicle[3].year } ${ motor_vehicle[3].make } ${ motor_vehicle[3].model }
          % endif
      - "motor_vehicle_title_4": |
          % if motor_vehicle.number_gathered() >= 4:
          ${ motor_vehicle[3].name.text }
          % endif
      - "motor_vehicle_fmv_4": |
          % if motor_vehicle.number_gathered() >= 4:
          ${ thousands(motor_vehicle[3].fmv, show_decimals=True) }
          % endif
      - "motor_vehicle_balance_4": |
          % if motor_vehicle.number_gathered() >= 4:
          ${ thousands(motor_vehicle[3].balance, show_decimals=True) }
          % endif
      - "motor_vehicle_addendum_yes": ${ motor_vehicle.number_gathered() > 4 }
      # 15 Assets - Business interests
      - "business_interests_name_1": |
          % if has_business_interests:
          ${ business_interests[0].name.text }
          % endif
      - "business_interests_type_1": |
          % if has_business_interests:
          ${ business_interests[0].name.text }
          % endif
      - "business_interests_ownership_1": |
          % if has_business_interests:
          ${ nice_number(business_interests[0].ownership, use_word=False) }
          % endif
      - "business_interests_fmv_1": |
          % if has_business_interests:
          ${ thousands(business_interests[0].fmv, show_decimals=True) }
          % endif
      - "business_interests_name_2": |
          % if business_interests.number_gathered() >= 2:
          ${ business_interests[1].name.text }
          % endif
      - "business_interests_type_2": |
          % if business_interests.number_gathered() >= 2:
          ${ business_interests[1].type }
          % endif
      - "business_interests_ownership_2": |
          % if business_interests.number_gathered() >= 2:
          ${ nice_number(business_interests[1].ownership, use_word=False) }
          % endif
      - "business_interests_fmv_2": |
          % if business_interests.number_gathered() >= 2:
          ${ thousands(business_interests[1].fmv, show_decimals=True) }
          % endif
      - "business_interests_name_3": |
          % if business_interests.number_gathered() >= 3:
          ${ business_interests[2].name.text }
          % endif
      - "business_interests_type_3": |
          % if business_interests.number_gathered() >= 3:
          ${ business_interests[2].type }
          % endif
      - "business_interests_ownership_3": |
          % if business_interests.number_gathered() >= 3:
          ${ nice_number(business_interests[2].ownership, use_word=False) }
          % endif
      - "business_interests_fmv_3": |
          % if business_interests.number_gathered() >= 3:
          ${ thousands(business_interests[2].fmv, show_decimals=True) }
          % endif
      - "business_interests_addendum_yes": ${ business_interests.number_gathered() > 3 }
      # 15 Assets - Life insurance
      - "life_insurance_company_1": |
          % if has_life_insurance:
          ${ life_insurance[0].name.text }
          % endif
      - "life_insurance_type_1": |
          % if has_life_insurance:
          ${ life_insurance[0].type }
          % endif
      - "life_insurance_benefit_1": |
          % if has_life_insurance:
          ${ thousands(life_insurance[0].benefit, show_decimals=True) }
          % endif
      - "life_insurance_value_1": |
          % if has_life_insurance:
          ${ thousands(life_insurance[0].value, show_decimals=True) }
          % endif
      - "life_insurance_company_2": |
          % if life_insurance.number_gathered() >= 2:
          ${ life_insurance[1].name.text }
          % endif
      - "life_insurance_type_2": |
          % if life_insurance.number_gathered() >= 2:
          ${ life_insurance[1].type }
          % endif
      - "life_insurance_benefit_2": |
          % if life_insurance.number_gathered() >= 2:
          ${ thousands(life_insurance[1].benefit, show_decimals=True) }
          % endif
      - "life_insurance_value_2": |
          % if life_insurance.number_gathered() >= 2:
          ${ thousands(life_insurance[1].value, show_decimals=True) }
          % endif
      - "life_insurance_company_3": |
          % if life_insurance.number_gathered() >= 3:
          ${ life_insurance[2].name.text }
          % endif
      - "life_insurance_type_3": |
          % if life_insurance.number_gathered() >= 3:
          ${ life_insurance[2].type }
          % endif
      - "life_insurance_benefit_3": |
          % if life_insurance.number_gathered() >= 3:
          ${ thousands(life_insurance[2].benefit, show_decimals=True) }
          % endif
      - "life_insurance_value_3": |
          % if life_insurance.number_gathered() >= 3:
          ${ thousands(life_insurance[2].value, show_decimals=True) }
          % endif
      - "life_insurance_addendum_yes": ${ life_insurance.number_gathered() > 3 }
      # 15 Assets - retirement benefits
      - "retirement_plan_1": |
          % if has_retirement_plan:
          ${ retirement_plan[0].name.text }
          % endif
      - "retirement_type_1": |
          % if has_retirement_plan:
          ${ retirement_plan[0].name.text }
          % endif
      - "retirement_balance_1": |
          % if has_retirement_plan:
          ${ thousands(retirement_plan[0].balance, show_decimals=True) }
          % endif
      - "retirement_plan_2": |
          % if retirement_plan.number_gathered() >= 2:
          ${ retirement_plan[1].name.text }
          % endif
      - "retirement_type_2": |
          % if retirement_plan.number_gathered() >= 2:
          ${ retirement_plan[1].name.text }
          % endif
      - "retirement_balance_2": |
          % if retirement_plan.number_gathered() >= 2:
          ${ thousands(retirement_plan[1].balance, show_decimals=True) }
          % endif
      - "retirement_plan_3": |
          % if retirement_plan.number_gathered() >= 3:
          ${ retirement_plan[2].name.text }
          % endif
      - "retirement_type_3": |
          % if retirement_plan.number_gathered() >= 3:
          ${ retirement_plan[2].name.text }
          % endif
      - "retirement_balance_3": |
          % if retirement_plan.number_gathered() >= 3:
          ${ thousands(retirement_plan[2].balance, show_decimals=True) }
          % endif
      - "retirement_addendum_yes": ${ retirement_plan.number_gathered() > 3 }
      # 15 Assets - valuable collectibles
      - "collection_description_1": |
          % if has_collection:
          ${ collection[0].name.text }
          % endif
      - "collection_fmv_1": |
          % if has_collection:
          ${ thousands(collection[0].fmv, show_decimals=True) }
          % endif
      - "collection_description_2": |
          % if collection.number_gathered() >= 2:
          ${ collection[1].name.text }
          % endif
      - "collection_fmv_2": |
          % if collection.number_gathered() >= 2:
          ${ thousands(collection[1].fmv, show_decimals=True) }
          % endif
      - "collection_description_3": |
          % if collection.number_gathered() >= 3:
          ${ collection[2].name.text }
          % endif
      - "collection_fmv_3": |
          % if collection.number_gathered() >= 3:
          ${ thousands(collection[2].fmv, show_decimals=True) }
          % endif
      - "collection_addendum_yes": ${ collection.number_gathered() > 3 }
      # 15 Assets - other personal property
      - "other_property_description_1": |
          % if has_other_property:
          ${ other_property[0].name.text }
          % endif
      - "other_property_fmv_1": |
          % if has_other_property:
          ${ thousands(other_property[0].fmv, show_decimals=True) }
          % endif
      - "other_property_description_2": |
          % if other_property.number_gathered() >= 2:
          ${ other_property[1].name.text }
          % endif
      - "other_property_fmv_2": |
          % if other_property.number_gathered() >= 2:
          ${ thousands(other_property[1].fmv, show_decimals=True) }
          % endif
      - "other_property_description_3": |
          % if other_property.number_gathered() >= 3:
          ${ other_property[2].name.text }
          % endif
      - "other_property_fmv_3": |
          % if other_property.number_gathered() >= 3:
          ${ thousands(other_property[2].fmv, show_decimals=True) }
          % endif
      - "other_property_addendum_yes": ${ other_property.number_gathered() > 3 }
      # 15 Assets - transfer/sale property
      - "transfer_description_1": |
          % if has_transfer:
          ${ transfer[0].name.text }
          % endif
      - "transfer_sold_1": |
          % if has_transfer:
          ${ transfer[0].sold }
          % endif
      - "transfer_date_1": |
          % if has_transfer:
          ${ transfer[0].date.format('MM/dd/yyyy') }
          % endif
      - "transfer_amount_1": |
          % if has_transfer:
          ${ thousands(transfer[0].amount, show_decimals=True) }
          % endif
      - "transfer_description_2": |
          % if transfer.number_gathered() >= 2:
          ${ transfer[1].name.text }
          % endif
      - "transfer_sold_2": |
          % if transfer.number_gathered() >= 2:
          ${ transfer[1].sold }
          % endif
      - "transfer_date_2": |
          % if transfer.number_gathered() >= 2:
          ${ transfer[1].date.format('MM/dd/yyyy') }
          % endif
      - "transfer_amount_2": |
          % if transfer.number_gathered() >= 2:
          ${ thousands(transfer[1].amount, show_decimals=True) }
          % endif
      - "transfer_description_3": |
          % if transfer.number_gathered() >= 3:
          ${ transfer[2].name.text }
          % endif
      - "transfer_sold_3": |
          % if transfer.number_gathered() >= 3:
          ${ transfer[2].sold }
          % endif
      - "transfer_date_3": |
          % if transfer.number_gathered() >= 3:
          ${ transfer[2].date.format('MM/dd/yyyy') }
          % endif
      - "transfer_amount_3": |
          % if transfer.number_gathered() >= 3:
          ${ thousands(transfer[2].amount, show_decimals=True) }
          % endif
      - "transfer_addendum_yes": ${ transfer.number_gathered() > 3 }
      # 16 Lawsuits and Claims
      - "lawsuit_number_1": |
          % if has_lawsuits:
          ${ lawsuits[0].case }
          % endif
      - "lawsuit_date_1":  |
          % if has_lawsuits:
          ${ lawsuits[0].date.format('MM/dd/yyyy') }
          % endif
      - "lawsuit_amount_1": |
          % if has_lawsuits:
          ${ thousands(lawsuits[0].amount, show_decimals=True) }
          % endif
      - "lawsuit_number_2": |
          % if lawsuits.number_gathered() >= 2:
          ${ lawsuits[1].case }
          % endif
      - "lawsuit_date_2":  |
          % if lawsuits.number_gathered() >= 2:
          ${ lawsuits[1].date.format('MM/dd/yyyy') }
          % endif
      - "lawsuit_amount_2": |
          % if lawsuits.number_gathered() >= 2:
          ${ thousands(lawsuits[1].amount, show_decimals=True) }
          % endif
      - "lawsuit_number_3": |
          % if lawsuits.number_gathered() >= 3:
          ${ lawsuits[2].case }
          % endif
      - "lawsuit_date_3":  |
          % if lawsuits.number_gathered() >= 3:
          ${ lawsuits[2].date.format('MM/dd/yyyy') }
          % endif
      - "lawsuit_amount_3": |
          % if lawsuits.number_gathered() >= 3:
          ${ thousands(lawsuits[2].amount, show_decimals=True) }
          % endif
      - "lawsuit_addendum_yes":  ${ lawsuits.number_gathered() > 3 }
      # 17 Income Tax Refund/Owed Amounts
      - "taxes_year1": |
          % if taxes_filed:
          ${ current_datetime().year - 1 }
          % endif
      - "taxes_federal_refund1": |
          % if taxes_filed:
          ${ taxes[0].federal_tax == 'refund' }
          % endif
      - "taxes_federal_refund_amount1": |
          % if taxes_filed and taxes[0].federal_tax == 'refund':
          ${ thousands(taxes[0].federal_refund, show_decimals=True) }
          % endif
      - "taxes_federal_owed1": |
          % if taxes_filed:
          ${ taxes[0].federal_tax == 'owed' }
          % endif
      - "taxes_federal_owed_amount1": |
          % if taxes_filed and taxes[0].federal_tax == 'owed':
          ${ thousands(taxes[0].federal_owed, show_decimals=True) }
          % endif
      - "taxes_state_refund1": |
          % if taxes_filed:
          ${ taxes[0].state_tax == 'refund' }
          % endif
      - "taxes_state_refund_amount1": |
          % if taxes_filed and taxes[0].state_tax == 'refund':
          ${ thousands(taxes[0].state_refund, show_decimals=True) }
          % endif
      - "taxes_state_owed1": |
          % if taxes_filed:
          ${ taxes[0].state_tax == 'owed' }
          % endif
      - "taxes_state_owed_amount1": |
          % if taxes_filed and taxes[0].state_tax == 'owed':
          ${ thousands(taxes[0].state_owed, show_decimals=True) }
          % endif
      - "taxes_year2": |
          % if taxes_filed_two_years:
          ${ current_datetime().year - 2 }
          % endif
      - "taxes_federal_refund2": |
          % if taxes_filed_two_years:
          ${ taxes[1].federal_tax == 'refund' }
          % endif
      - "taxes_federal_refund_amount2": |
          % if taxes_filed_two_years and taxes[1].federal_tax == 'refund':
          ${ thousands(taxes[1].federal_refund, show_decimals=True) }
          % endif
      - "taxes_federal_owed2": |
          % if taxes_filed_two_years:
          ${ taxes[1].federal_tax == 'owed' }
          % endif
      - "taxes_federal_owed_amount2": |
          % if taxes_filed_two_years and taxes[1].federal_tax == 'owed':
          ${ thousands(taxes[1].federal_owed, show_decimals=True) }
          % endif
      - "taxes_state_refund2": |
          % if taxes_filed_two_years:
          ${ taxes[1].state_tax == 'refund' }
          % endif
      - "taxes_state_refund_amount2": |
          % if taxes_filed_two_years and taxes[1].state_tax == 'refund':
          ${ thousands(taxes[1].state_refund, show_decimals=True) }
          % endif
      - "taxes_state_owed2": |
          % if taxes_filed_two_years:
          ${ taxes[1].state_tax == 'owed' }
          % endif
      - "taxes_state_owed_amount2": |
          % if taxes_filed_two_years and taxes[1].state_tax == 'owed':
          ${ thousands(taxes[1].state_owed, show_decimals=True) }
          % endif

      - "users_signature": |
          ${ "/s/ " + users[0].name.full(middle="full") if e_signature else ''  }
      - "users_signed_date": ${ today().format("MM/dd/yyyy") if e_signature else '' }

---
############ FA EMPLOYMENT/BUSINESS INCOME ADDENDUM #############
objects:
  - employment[i].additional_employment: ALDocument.using(title="FA Additional Employment Business", filename="fa_additional_employment_business.pdf", has_addendum=False)
---
objects:
  - additional_employment_bundle: ALDocumentBundle.using(elements=[], title= "FA Additional Employment Bundle", filename="fa_additional_employment_business.pdf", has_addendum=False)
---
reconsider: True
code: |
  employment_to_bundle = []
  additional_employment_bundle.enabled = False

  if employment.number_gathered():
    for index, el in enumerate(employment):
      # No need for additional employment or business income unless employment.number_gathered() >= 1
      if index == 0:
        el.additional_employment.enabled = False
      else:
        el.additional_employment.enabled = True
        additional_employment_bundle.enabled = True
        employment_to_bundle.append(el.additional_employment)

  additional_employment_bundle.elements = employment_to_bundle
  complete_additional_employment = True
---
attachment:
  variable name: employment[i].additional_employment[j]
  name: additional_employment
  filename: additional_employment
  skip undefined: True
  editable: False
  pdf template file: fa_additional_employment_business.pdf
  fields:
      - "county_name": ${ case_county.upper() }
      - "case_number": ${ case_number }
      - "pre-judgment": ${ filing_status == "pre_judgment" }
      - "post-judgment": ${ filing_status == "post_judgment" }
      - "petitioner_name": |
          % if party_label == 'petitioner':
          ${ users[0].name.full(middle='full') }
          % else:
          ${ other_parties[0].name.full(middle='full') }
          % endif
      - "respondent_name": |
          % if opposing_label == 'respondent':
          ${ other_parties[0].name.full(middle='full') }
          % else:
          ${ users[0].name.full(middle='full') }
          % endif
      - "petitioner_yes": ${ party_label == 'petitioner' }
      - "respondent_yes": ${ party_label == 'respondent' }

      - "employed_yes": ${ employment[i].type == 'employed' }
      - "employer_name": |
          % if employment[i].type == "employed":
          ${ employment[i].name.text }
          % endif
      - "employer_address": |
          % if employment[i].type == "employed":
          ${ employment[i].address.line_one(bare=True) }
          % endif
      - "employer_address2": |
          % if employment[i].type == "employed":
          ${ employment[i].address.line_two() }
          % endif
      - "paychecks_monthly": |
          % if employment[i].type == "employed":
          ${ employment[i].frequency == "12" }
          % endif
      - "paychecks_bi_monthly": |
          % if employment[i].type == "employed":
          ${ employment[i].frequency == "24" }
          % endif
      - "paychecks_two_weeks": |
          % if employment[i].type == "employed":
          ${ employment[i].frequency == "26" }
          % endif
      - "paychecks_weekly": |
          % if employment[i].type == "employed":
          ${ employment[i].frequency == "52" }
          % endif
      - "paychecks_cash": |
          % if employment[i].type == "employed":
          ${ employment[i].cash_payment }
          % endif
      - "income_gross": |
          % if employment[i].type == "employed":
          ${ thousands(employment[i].gross_income, show_decimals=True) }
          % endif
      - "income_date": |
          % if employment[i].type == "employed":
          ${ employment[i].gross_date.format('MM/dd/yyyy') }
          % endif
      # business
      - "business_own": ${ employment[i].type == "own" }
      - "business_contractor": ${ employment[i].type == "contractor" }
      - "business_partnership": ${ employment[i].type == "partnership" }
      - "business_llc": ${ employment[i].type == "llc" }
      - "business_corporation": ${ employment[i].type == "corp" }
      - "business_other_entity": ${ employment[i].type == "other_entity" }
      - "business_name": |
          % if employment[i].type != "employed":
          ${ employment[i].name.text }
          % endif
      - "business_address": |
          % if employment[i].type != "employed":
          ${ employment[i].address.line_one(bare=True) }
          % endif
      - "business_address2": |
          % if employment[i].type != "employed":
          ${ employment[i].address.line_two() }
          % endif
      - "business_gross_last_year": |
          % if employment[i].type != "employed":
          ${ thousands(employment[i].income_last_year, show_decimals=True) }
          % endif
      - "business_gross_current_year": |
          % if employment[i].type != "employed":
          ${ thousands(employment[i].income_current_year, show_decimals=True) }
          % endif           
      - "business_expense_last_year": |
          % if employment[i].type != "employed":
          ${ thousands(employment[i].expenses_last_year, show_decimals=True) }
          % endif
      - "business_expense_current_year": |
          % if employment[i].type != "employed":
          ${ thousands(employment[i].expenses_current_year, show_decimals=True) }
          % endif
      - "business_meals": |
          % if employment[i].type != "employed":
          ${ employment[i].perks['meals'] }
          % endif
      - "business_car": |
          % if employment[i].type != "employed":
          ${ employment[i].perks['car'] }
          % endif
      - "business_housing": |
          % if employment[i].type != "employed":
          ${ employment[i].perks['housing'] }
          % endif
      - "business_other": |
          % if employment[i].type != "employed":
          ${ employment[i].perks['other'] }
          % endif
      - "business_other_detail": |
          % if employment[i].type != "employed" and employment[i].perks["other"] == True:
          ${ employment[i].other_perks }
          % endif
---
############ FA ADDITIONAL HEALTH INSURANCE #############
objects:
  - insurance[i].additional_health_insurance: ALDocument.using(title="FA Additional Health Insurance", filename="FA_additional_health_insurance.pdf", has_addendum=False)
---
objects:
  - additional_health_insurance_bundle: ALDocumentBundle.using(elements=[], title= "FA Additional Health Insurance Bundle", filename="FA_additional_health_insurance.pdf", has_addendum=False)
---
reconsider: True
code: |
  insurance_to_bundle = []
  additional_health_insurance_bundle.enabled = False

  if insurance.number_gathered():
    for index, el in enumerate(insurance):
      # No need for additional health insurance unless insurance.number_gathered() >= 1
      if index == 0:
        el.additional_health_insurance.enabled = False
      else:
        el.additional_health_insurance.enabled = True
        additional_health_insurance_bundle.enabled = True
        insurance_to_bundle.append(el.additional_health_insurance)

  additional_health_insurance_bundle.elements = insurance_to_bundle
  complete_additional_health_insurance = True
---
attachment:
  variable name: insurance[i].additional_health_insurance[j]
  name: additional_health_insurance
  filename: additional_health_insurance
  skip undefined: True
  editable: False
  pdf template file: FA_additional_health_insurance.pdf
  fields:
      - "county_name": ${ case_county.upper() }
      - "case_number": ${ case_number }
      - "pre-judgment": ${ filing_status == "pre_judgment" }
      - "post-judgment": ${ filing_status == "post_judgment" }
      - "petitioner_name": |
          % if party_label == 'petitioner':
          ${ users[0].name.full(middle='full') }
          % else:
          ${ other_parties[0].name.full(middle='full') }
          % endif
      - "respondent_name": |
          % if opposing_label == 'respondent':
          ${ other_parties[0].name.full(middle='full') }
          % else:
          ${ users[0].name.full(middle='full') }
          % endif
      - "petitioner_yes": ${ party_label == 'petitioner' }
      - "respondent_yes": ${ party_label == 'respondent' }

      - "health_insurance_yes": ${ insurance.there_are_any }
      - "health_insurance_no": ${ insurance.number_gathered() == 0 }
      - "health_insurance_company": |
          % if insurance.there_are_any:
          ${ insurance[i].name.text }
          % endif
      - "insurance_type_dental": |
          % if insurance.there_are_any:
          ${ insurance[i].type == "Dental" }
          % endif
      - "insurance_type_medical": |
          % if insurance.there_are_any:
          ${ insurance[i].type == "Medical" }
          % endif
      - "insurance_type_vision": |
          % if insurance.there_are_any:
          ${ insurance[i].type == "Vision" }
          % endif          
      - "insurance_type_orthodontic": |
          % if insurance.there_are_any:
          ${ insurance[i].type == "Orthodontic" }
          % endif          
      - "policy_type_ppo": |
          % if insurance.there_are_any:
          ${ insurance[i].policy == "PPO" }
          % endif
      - "policy_type_hmo": |
          % if insurance.there_are_any:
          ${ insurance[i].policy == "HMO" }
          % endif         
      - "policy_type_other": |
          % if insurance.there_are_any:
          ${ insurance[i].policy == "Other" }
          % endif
      - "insurance_provided_employer": |
          % if insurance.there_are_any:
          ${ insurance[i].provider == "employer" }
          % endif         
      - "insurance_provided_private": |
          % if insurance.there_are_any:
          ${ insurance[i].provider == "private" }
          % endif 
      - "insurance_provided_group": |
          % if insurance.there_are_any:
          ${ insurance[i].provider == "group" }
          % endif          
      - "insurance_provided_public": |
          % if insurance.there_are_any:
          ${ insurance[i].provider == "public" }
          % endif
      - "insurance_total_covered": |
          % if insurance.there_are_any:
          ${ nice_number(insurance[i].total_covered, use_word=False) }
          % endif
      - "insurance_covers_myself": |
          % if insurance.there_are_any:
          ${ insurance[i].coverage["myself"] }
          % endif
      - "insurance_covers_both": |
          % if insurance.there_are_any:
          ${ insurance[i].coverage["both"] }
          % endif
      - "insurance_covers_children_current": |
          % if insurance.there_are_any:
          ${ insurance[i].coverage["children_current"] }
          % endif
      - "insurance_covers_children_other": |
          % if insurance.there_are_any:
          ${ insurance[i].coverage["children_other"] }
          % endif
      - "other_children_covered": |
          % if insurance.there_are_any and insurance[i].coverage["children_other"]:
            % if insurance[0].other_children_count == 1:
            1 child, age: ${ insurance[0].other_children_age_list }
            % else:
            ${ insurance[0].other_children_count } children, ages: ${ insurance[0].other_children_age_list }
            % endif
          % endif
      - "insurance_monthly_cost":   |
          % if insurance.there_are_any:
          ${ thousands(insurance[i].monthly_cost, show_decimals=True) }
          % endif
      - "insurance_paid_myself":  |
          % if insurance.there_are_any:
          ${ insurance[i].paid == "myself" }
          % endif
      - "insurance_paid_partner":  |
          % if insurance.there_are_any:
          ${ insurance[i].paid == "partner" }
          % endif
      - "insurance_paid_other":  |
          % if insurance.there_are_any:
          ${ insurance[i].paid == "other" }
          % endif
      - "insurance_paid_other_description":   |
          % if insurance.there_are_any and insurance[i].paid == "other":
          ${ insurance[i].other_description }
          % endif
      - "cost_insurance_children":   |
          % if insurance.there_are_any:
          ${ thousands(insurance[i].cost_children, show_decimals=True) }
          % endif
      - "cost_insurance_children_current":   |
          % if insurance.there_are_any:
          ${ thousands(insurance[i].cost_children_current, show_decimals=True) }
          % endif
      - "individual_deductible":   |
          % if insurance.there_are_any:
          ${ thousands(insurance[i].individual_deductible, show_decimals=True) }
          % endif
      - "family_deductible":   |
          % if insurance.there_are_any:
          ${ thousands(insurance[i].family_deductible, show_decimals=True) }
          % endif
      - "coinsurance":  |
          % if insurance.there_are_any:
          ${ nice_number(insurance[i].coinsurance, use_word=False) }
          % endif
      - "copayment":  |
          % if insurance.there_are_any:
          ${ thousands(insurance[i].copayment, show_decimals=True) }
          % endif
      - "insurance_additional_yes": ${ insurance.number_gathered() > 2 }
      - "additional_count": |
          % if insurance.number_gathered() > 2:
          ${ insurance.number_gathered() - 1 }
          % endif 
---
